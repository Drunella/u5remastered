# ----------------------------------------------------------------------------
# Copyright 2025 Drunella
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------

FEATURES {
    STARTADDRESS:    default = $0801;
}

SYMBOLS {
    __LOADADDR__:  type = import;
    __STACKSIZE__: type = weak, value = $0400; # 2k stack
    __HIMEM__:     type = weak, value = $D000;
}

MEMORY {
    ZP:       file = "", define = yes, start = $0002,  size = $001A;
    LOADADDR: file = %O,               start = %S - 2, size = $0002;
    BASIC:    file = %O, define = yes, start = $0801,  size = $000f, fill = yes, fillval = $ff;
    MAIN:     file = %O, define = yes, start = $0810,  size = $07f0, fill = yes, fillval = $ff;
    ROSTER:   file = %O, define = yes, start = $1000,  size = $0400, fill = yes, fillval = $00;
    GEN2:     file = %O, define = yes, start = $1400,  size = $5c00;
    BSS:      file = "",               start = $7000,  size = $0c00;
    STACK:    file = "", define = yes, start = $7c00,  size = __STACKSIZE__;

    PRTYDATA: file = "",               start = $bc00,  size = $30;

}

SEGMENTS {
    EXEHDR:   load = BASIC,    type = rw;
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    STARTUP:  load = MAIN,     type = ro,  start = $0810;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    CODE:     load = GEN2,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;
    ONCE:     load = MAIN,     type = ro,  define   = yes;
    BSS:      load = BSS,      type = bss, define   = yes;
    HEAP:     load = BSS,      type = bss, optional = yes;

    EDITOR:      load = GEN2, type = rw;
    ROEDITOR:    load = MAIN, type = ro;
    DAEDITOR:    load = GEN2, type = rw;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
