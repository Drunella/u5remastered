# ----------------------------------------------------------------------------
# Copyright 2019 Drunella
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------

FEATURES {
    STARTADDRESS:    default = $2000;
}

SYMBOLS {
    __LOADADDR__:  type = import;
    __STACKSIZE__: type = weak, value = $0400; # 2k stack
    __HIMEM__:     type = weak, value = $D000;
}

MEMORY {
    ZP:       file = "", define = yes, start = $0002,     size = $001A;
    LOADADDR: file = %O,               start = %S - 2,    size = $0002;
    GEN:      file = %O, define = yes, start = $2000,     size = $2000, fill = yes, fillval = $ff;
    BSS:      file = "",               start = $1400,     size = $0800;
    MAIN:                define = yes, start = $1c00,     size = __STACKSIZE__;

    MUSIC_DATA:        file = "",      start = $0100,     size = $0022;
    MUSIC_JUMPTABLE:   file = "",      start = $0123,     size = $0009;
    MUSIC_IRQHANDLER:  file = "",      start = $0380,     size = $0038;
    MUSIC_RAM:         file = "",      start = $7c00,     size = $0200;
    MUSIC_SOURCE:      file = "",      start = $8000,     size = $4000;

    PRTYDATA:    start = $bc00,  size = $30, file = "";
    ROSTER:      start = $1000,  size = $0400,  file = "";
    LIST:        start = $4a00,  size = $0200,  file = "";
    SLIST:       start = $7c00,  size = $0200,  file = "";
    IO_DATA:     start = $df00,  size = $80,  fill = no;

    EDITOR:      start = $5000,  size = $2000, file = "build/ef/editor.aprg";
}

SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    STARTUP:  load = GEN,     type = ro,  start = $2000;
    LOWCODE:  load = GEN,     type = ro,  optional = yes;
    CODE:     load = GEN,     type = ro;
    RODATA:   load = GEN,     type = ro;
    DATA:     load = GEN,     type = rw;
    INIT:     load = GEN,     type = rw;
    ONCE:     load = GEN,     type = ro,  define   = yes;
    BSS:      load = BSS,      type = bss, define   = yes;
    HEAP:     load = BSS,      type = bss, optional = yes;

    MUSIC_JUMPTABLE:   load = GEN,   type = rw,  define   = yes,  run = MUSIC_JUMPTABLE;
    MUSIC_IRQHANDLER:  load = GEN,   type = rw,  define   = yes,  run = MUSIC_IRQHANDLER;
    MUSIC_CONTROL:     load = MUSIC_RAM,  type = rw;
    MUSIC_INIT:        load = GEN,   type = rw;
    MUSIC_DATA:        load = MUSIC_DATA, type = rw;
    MUSIC_SOURCE:      load = MUSIC_SOURCE, type = ro;

    LOADER:      load = GEN,  type = rw;
    IO_DATA:     load = IO_DATA,  type = bss;
    IO_CODE:     load = GEN,  type = rw;
    IO_CODE2:    load = GEN,  type = rw;
#    EXO_CODE:    load = GEN,  type = rw;
    LOADSAVEGAME: load = GEN, type = rw;

    EDITOR:      load = EDITOR, type = rw;
    ROEDITOR:    load = EDITOR, type = ro;
    DAEDITOR:    load = EDITOR, type = rw;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
