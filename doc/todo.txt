Ultima V Remastered

Mission: Put the complete original game for the C64 on an EasyFlash cartridge
==============================================================================

Features
- d81 version save file manager (save files in d81 version have different names)
- show karma with CTRL+K (difficult)

ToDo
- enhance blockmap (there are probably rooms missing in dungeons)
  7 disks: from track 19 to 35 (17 tracks) with space for max 19 sectors (32)
  every entry has 4 bytes: bank, high, low address
  every disk needs 2176 bytes, alltogether 15232
  the disk start addresses are put at the beginning (32 bytes)
  (32 and 4 are easy to multiply)
- reset rooms does not get all rooms
  see covetous
- identify the meaning of list, slist and tlist saving
  look in create.prg
- sound and effect mixing is not good
- change own file formats to json
- check Underworld/startup.prg for menu modifications
- d81 version u4 import
- quickstart in d81 does not work (c128)
- does not work in c64 standard emulator

- VICE & VICE Monitor
  Alt+F12: Hard Reset
  d [addr]: disassemble

- Save Game
    save S:PRTY.DATA (bc00, 0030)
    save S:LIST (4a00, 0200)
    load TLIST
    save S:SLIST (4a00, 0200)
    load LIST
    save S:ROSTER (1000, 0400)

- Create new game
  + insert program
    load
    load FONT3.SHPTBL
    load CREATE1.TXT
    load C1
    load C2
    load C3
    load MAIN.SUBS
  + insert underworld
    load BLANK.ROSTER
    load BLANK.PARTY
    load BLANK.ULIST
    save S:TLIST (4a00, 0200)
  + insert britannia
    save S:ROSTER (1000, 0400)
    save S:PRTY.DATA (bc00, 0030)
    save S:LIST (4a00, 0200)
    save S:SLIST (4a00, 0200)
    load STARTUP
    load MAIN.SUBS
    ...

- Journey Onward (after new game)
    load...
    loads ENTER.PLAY ($8000)
    (change disk BRITANNIA)
    loads PRTY.DATA ($bc00)
    loads SLIST ($4a00)
    save S:TLIST (4a00, 0200)
    loads LIST ($4a00)
    loads ROSTER ($1000) (ROS*)
      loads Q (on c128 only)
      loads C (on c128 only)
      loads E (on c128 only)
      loads I (on c128 only)
      loads M (on c128 only)
      loads P (on c128 only)
      loads R (on c128 only)
      loads S (on c128 only)
      loads T (on c128 only)
      loads U (on c128 only)
      loads V (on c128 only)
      loads Z (on c128 only)
      loads MAIN.C* (MAIN.COMBAT, on c128 only)
      ...
    (change disk DWELLING)
    loads MAIN.T* ($8000)

- Change to Britannia
     load TLIST
     load MAIN.OUT

- Enter Keep
    load E
    save S:TLIST
    (enter keep)
    load MAIN.TWN

- Leave Keep
    (insert britannia)
    load TLIST
    load MAIN.OUT

- Enter Room in Dungeon
    load DNG.* (DNG.PRECOM)
    load S3
    load S2
    load S1
    load S0
    load COLORS
    block Y, X
    load MAIN.COMBAT

- Leave Room in Dungeon
    load MAIN.DNG
    load DNG3A (dungeon specific?)
    load DNG3B (dungeon specific?)
    load DNG3C (dungeon specific?)
    load ITEMS
    load MS0 (dungeon specific?)

- Enter Dungeon
    load E* (underworld/britannia)
    load MAIN.DNG (dungeon)
    load DNG3A (dungeon specific?)
    load DNG3B (dungeon specific?)
    load DNG3C (dungeon specific?)
    load ITEMS
    load MS6 (dungeon specific?)
    block_alt 0x23 0x08 0x23 0x09 (dungeon map)
    

Build Process
=============
- extract from original disk
- compile source code
- disassemble binary files
- patch disassemblies
- patch programs
- crunch programs
- build easyflash file system
- compile more programs
- build block files
- make binary and convert to cartridge


Loading
=======

1. meow.prg
   loads xyzzy.prg ($2000)
   
2. xyzzy.prg (alternate would be scratch.prg, which will not be loaded)
   drive selection
   many operations, purpose unclear
   loads U5SIZ.O.PRG ($7700) (fastloader) -> not necessary
   loads TEMP.SUBS ($6c00)

3. jumps to TEMP.SUBS
   many operations, purpose unclear
   loads STARTUP
   jumps to STARTUP
   
4. loads PRINT ($c000)
   loads OSI.LOGOS ($c000)
   loads FLIPPER ($1000)
   loads HTXT ($1580)
   loads INTRO.VIEW ($9500)
   loads U5.PTHTBL ($4000)
   loads S3 ($c000)
   loads S2 ($c000)
   loads S1 ($c000)
   loads UPDATE.HIMEM ($1d80)
   loads COLORS ($b000)
   loads FLAMES ($4000)
   loads U5.LOGO ($c000)
   loads S0 ($c000)
   loads LOGO.COLORS ($1000)
   loads MAIN.SUBS ($4c00)

5. on journey onward: (new game)
   loads ENTER.PLAY ($8000)
   (change disk BRITANNIA)
   loads PRTY.DATA ($bc00)
   loads SLIST ($4a00)
   loads LIST ($4a00)
   loads ROSTER ($1000)
   (change disk DWELLING)
   loads MAIN.T* ($8000)


Internal text encoding
======================

0xa8: '('
0xa9: ')'

0xc1: 'A'
0xc2: 'B'
0xc3: 'C'
0xc4: 'D'
0xc5: 'E'
0xc6: 'F'
0xc7: 'G'
0xc8: 'H'
0xc9: 'I'
0xca: 'J'
0xcb: 'K'
0xcc: 'L'
0xcd: 'M'
0xce: 'N'
0xcf: 'O'
0xd0: 'P'
0xd1: 'Q'
0xd2: 'R'
0xd3: 'S'
0xd4: 'T'
0xd5: 'U'
0xd6: 'V'
0xd7: 'W'
0xd8: 'X'
0xd9: 'Y'
0xda: 'Z'

0xe1: 'a'
0xe2: 'b'
0xe3: 'c'
0xe4: 'd'
0xe5: 'e'
0xe6: 'f'
0xe7: 'g'
0xe8: 'h'
0xe9: 'i'
0xea: 'j'
0xeb: 'k'
0xec: 'l'
0xed: 'm'
0xee: 'n'
0xef: 'o'
0xf0: 'p'
0xf1: 'q'
0xf2: 'r'
0xf3: 's'
0xf4: 't'
0xf5: 'u'
0xf6: 'v'
0xf7: 'w'
0xf8: 'x'
0xf9: 'y'
0xfa: 'z'
0xfb: '?'
0xfc: '?'
0xfd: '?'
0xfe: '?'
0xff: '?'


==============================================================================
Old stuff

Done:
- (ok) import u4 directly from remastered files
- (ok) cleanup for release
  + (ok) write small documentation
  + (ok) apache 2.0 licence
  + (no) cleanup of repository, rewrite history, one commit only
- (ok) make block loading not interrupt music
- (ok) remove exodecrunch
- (no) trainer, we have an editor
- (ok) run music while loading (at least for block loading)
- ok better patch mechanism
- ok check for irq handling while loading
- ok add patching of prg files with other prg files
- ok modify transfer.prg to read from disk
  + no disk loading available, could be necessary to redesign
- ok improve makefile: phony labels, correct building in external directory
- ok make transfer save files from and to disk
- ok make start menu
- ok extend patcher
- ok patches for ef:
  + remove drive selection from main menu
  + append disk read for transfer from ultima 4
- no: idea: replace all filenames with numbers (not important right now)
  directory search is simple multiplication (well not simple, but ok)
  identification of save files is easy
  rewrite of load call everywere necessary: b:number b:argument size 0 0 0 ...
- ok make jmp table modificator
  + tool to read map files 
  + extract relevant symbol
  + patch other file
- ok implement new loading routines
  + omit saving for now
  + just loading blocks and files
- ok make tool to create bin file: 
  + define map to put together all files for bin file
  + list of files and their position in the cartridge
  + make crt file from binfile (own script or cartconv)
- ok save strategy
- ok Identify relevant code and files
- ok Learn about u5 structure
- ok Identify all kernal calls (not all, but is sufficient)
- ok identify saved location for current disk -> is requested through temp.subs call
- ok create all code and data as prg files with their visible address (bank0: 0x8000, bank1: 0xA000, startup: 0xE000)


Calculation

- 1 5 1/4 disk: 174848 bytes (minus directory): 169984 bytes
- U5 has 8 disks: 1.359.872 bytes
  => we need to find appr 400kB of empty or duplicate blocks

- Disk1: Program
  free: appr 19968 bytes
  
- Disk 2 Dungeon:
  2x 20 empty: 10240 bytes

- Disk 3 Britannia:
  4x 20 empty: 20480 bytes

- Disk 4 Underworld
  4x 20 empty: 20480 bytes

- Disk 5 Towne
  4x 20 empty: 20480 bytes

- Disk 6 Dwelling
  full

- Disk 7: Castle
  3x20 + 11 empty: 19712 bytes

- Disk 8: Keep
  23 blocks: 5888 bytes

=> Free: 117248 bytes

=> Duplicates 360860 bytes

=> sound can be removed on c64 (or maybe can run?)

Overall uncompressed size: 881764 
=> should fit

-----

File Locator:
- assume 255 files, each file has: (compatible to EasyFS)
  + 16 bytes name
       1. byte: diskid (0x41-0x48)
       2. to n. byte: name
  +  1 byte flags 0x60|0x01 (not hidden, type 0x01, normal prg files)
  +  1 byte bank
  +  1 byte reserved
  +  2 byte start offset in bank, 
  +  3 byte file size
  4800 bytes, appr 3300 bytes of code, enough for inventory and code in one 8k page
  saveable files simply point to the correct block
- blocks:
  dungeon: 19 + 11*16 = 195 blocks
  britannia: 272 blocks
  underworld: 272 blocks
  towne: 192 blocks
  dwelling: 192 blocks
  castle: 192 blocks
  keep: 192 blocks
  -> assume 1564 blocks
  block location: 4 byte address: 6144
  simple address resolution disk*256 + x*16 + y 
  or: disk start address fixed + x*16 + y
  about 1024 bytes code
  -> put as large files in efs, and load block with special method (name x)
- saving
  must be redesign at the source:
  first erase and then save all files
  list saving is a problem :(

Files that load other files or do file operations
- Load call
ok Program/meow.prg (1x) -> startup program, will be replaced
ok Program/xyzzy.prg (4x) -> loader, will be changed
ok Program/temp.subs.prg (1x) -> main loading function, will be changed
ok Program/scratch.prg (3x) -> alternative loader with fastloader

- Open call
ok Britannia/q.prg  (1x) -> drive detection
ok Dungeon/main.dng.prg  (1x) -> drive detection
ok Program/scratch.prg (1x) -> alternative loader with fastloader
ok Program/startup.prg (2x) -> will be changed, device 9 related
ok Program/temp.subs.prg (3x) -> load, save, load block, will be changed
ok Program/xyzzy.prg (1x) -> loader, will be changed

-----

Not used zeropage addresses
- fc, fd, fe, ff (probably temporary variables)
- fb (not found with lda)

-----

- cc65 command to make prg
  + cl65 -o out.prg -t c64 -C config.cfg in.s (config must have startaddress definition)
FEATURES {
    STARTADDRESS:    default = $ff00;
}
SYMBOLS {
    __LOADADDR__:    type = import;
}
MEMORY {
    LOADADDR: file = %O, start = %S - 2, size = $0002;
}

SEGMENTS {
    LOADADDR: load = LOADADDR, type = ro;
}


File operations
0x6c49 - 0x6f4d

- Load file, get name from return address, x: 0: return, 1: call 0x8000, other call 0xa700
  0x6c24: (0x6c49) load file from disk [6c49 - 6ca9]
  copy file to non bankable area
  bank in directory
  find entry
    depending on inserted disk
    filename    
  set
    offset address in file (0)
    destination address (from file entry)
    bank (from directory entry)
    decrunch necessary (yes)
  load as file
    + bank in
    + read one byte
    + bank out
    + write one byte
    + when finished, decrunch if necessary
  
- Read disk block
0x6c24: (0x6eae) read disk block, Y: track, X: sector, A: address high byte [6eae - 6f41]
  depending on inserted disk:
    set filename
    correct track offset
  calculate offset in file
    (y*16 + x) * 256
  set
    offset address in file (256 steps only)
    destination address (from A and 0)
    bank (from directory entry)
    decrunch necessary (no)
  load as file
  
- Save file [6de0 - 6e6e]
0x6c2d: (0x6de0): save file
  size: 142 bytes

- Change disk
0x6c09 (0x6d47): request disk with text [overwrite 0x6d47 to 6ddf]
  set current disk in file loader
  return success

0x6c2a: (0x6caa): check inserted disk, A is requested disk, return C set disk no inserted [overwrite 6caa - 6cdf, 6ce0-6d46]
  set current disk in file loader
  return success

- Load data
  + needed:
    offset address in file (high byte only)
    destination address (from file entry or provided)
    bank (from directory entry)
    decrunch necessary
  + operation
    bank in
    read one byte
    bank out
    write one byte
    when finished, decrunch if necessary


Transfer
- transfer.prg: 3366 bytes
  from 0x8000 to 0x8d25
  + reprogram check disk
  + reprogram load block
- patch transfer.prg
  80e7: 202a6c -> 20????
  81fa: 20006c -> 20????
  8203: 4c006c -> 4c????
  8cae: b016 -> b013  (bugfix)
- text patches:
  + change+pos: Please remove the boot disk 
                -> Please insert the
    8170:  d0ece5e1f3e5a0f2e5edeff6e5a0f4e8e5a0e2efeff4a0e4e9f3eb00
           a0a0a0a0a0d0ece5e1f3e5a0e9eef3e5f2f4a0f4e8e5a0a0a0a0a000
  
  + change+pos: and insert ...          -> Ultima IV BRITANNIA disk
    8197:  e1eee4a0e9eef3e5f2f4a0f4e8e5a0d5ecf4e9ede1a0c9d6a0c2d2c9d4c1cecec9c1a0e4e9f3eb00
           a0a0a0a0a0a0a0a0d5ecf4e9ede1a0c9d6a0c2d2c9d4c1cecec9c1a0e4e9f3eba0a0a0a0a0a0a000


Sound
  + ok free memory areas:
    0x0200 - 0x027f
    0x0380 - 0x3c8 (0x380 must be entry point of irq handler)
  + ok initialize interrupt and timer
  + ok Ctrl+V for Music on/off
  + ok transform music code and data to rom
    * 0x7203 - 0x7bc3 (code, data, some variables) 0x09c1
      -> automatic conversion
      -> variable range 0x7219 - 0x7302
      -> variable range 0x7ba8 - 0x7bc3
      -> move variables back to spaces
    * 0x7ca0 - 0x9fa5 (data) 0x2395 (ok)
    * code: one part needs automatic conversion
    * data types: construct proper structs
  + ok place self changing code in $7c00 - $7dff
  + ok place data in $7c00 - $7dff

- ok Sound On
  call 0x7203
    call 0x73da (copy variables)
    call 0x720c process data
    call 0x78a6 transfer data to sid
    set timer
    jump 0x73da (copy variables)

- ok Sound Data
  0x7219 - 0x7302: 0xea bytes (234)
  0x7ba8 - 0x7bc3: 0x1c bytes (28)
  0x9fa5 - 0xa0ff: 347 bytes (unclear if really necessary)

- ok d81 version
  + savegame not found should work
  + ok save correct drive in variable in the beginning: write in 6c33 asap: 0xba
  + ok no changing of drive
  + ok replace io functions
  + ok copying files to disk: append extra directory entries
  + ok replicate meow / ULTIMA V
  + redesign xyzzy, remove xyzzy question
    -> c128 does not work
  + ok uncompressed files: XYZZY, U5SIZ.O, M, SUBS.128,  TEMP.SUBS
  + ok more uncompressed files
    * ok 0x41/create1.txt  -> 2 occurence
    * ok 0x41/m9 -> basic programm, can be ignored
    * ok 0x41/meow -> excluded
    * ok 0x48/blank.prty + 0x41/blank.prty -> 1 occurences
    * ok 0x48/blank.party + 0x41/blank.prty -> 1 occurences
    * ok 0x42/prty.data -> 1 occurence: Program/enter.play.prg
    * ok 0x42/roster -> Keep/end.prg Program/enter.play.prg
    * ok 0x42/slist -> Program/enter.play.prg
    * ok 0x42/list -> 8 occurences: Britannia/main.out.prg Underworld/main.out.prg Underworld/startup.prg Program/enter.play.prg */main.twn.prg Dungeon/main.dng.prg
    * ok 0x42/tlist -> many occurences    
    * ok 0x44/story1.txt -> Dwelling/story.prg
    * ok 0x44/story2.txt -> Dwelling/story.prg
    * ok 0x44/story3.txt -> Dwelling/story.prg
    * ok 0x44/story4.txt -> Dwelling/story.prg
  + ok blocks start at track
    britannia: 41/0
    underworld: 41/16
    town: 59/0
    dwelling: 59/16
    castle: 27/0
    keep: 27/0
    dungeon: 16/0
  + ok own create d81 tool with
    set sector in use
    create additional dir entry
    set boot block
