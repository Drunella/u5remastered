subroutines with jump table at the beginning
size=8189
--------------------------------------------------------------------------
           
            0x00004c00      4c3868         jmp 0x6838       ; write text to screen
            0x00004c03      4c595a         jmp 0x5a59       ; screen operations
            0x00004c06      4c375a         jmp 0x5a37                  ; jump to new location
            0x00004c09      4c4f5a         jmp 0x5a4f                  ; jump to new location
            0x00004c0c      4c405a         jmp 0x5a40                  ; jump to new location
            0x00004c0f      4c145b         jmp 0x5b14       ; 
            0x00004c12      4caa5b         jmp 0x5baa                  ; jump to new location
            0x00004c15      4cb05b         jmp 0x5bb0       ; wait for key? enter disk?
            0x00004c18      4c3c5c         jmp 0x5c3c                  ; jump to new location
            0x00004c1b      4caf4c         jmp 0x4caf       ; jump target can be changed
            0x00004c1e      4c8b51         jmp 0x518b                  ; jump to new location
            0x00004c21      4c8451         jmp 0x5184                  ; jump to new location
            0x00004c24      4cb253         jmp 0x53b2       ;
            0x00004c27      4cb75e         jmp 0x5eb7                  ; jump to new location
            0x00004c2a      4ce46b         jmp 0x6be4       ; sound effect?
            0x00004c2d      4c3a52         jmp 0x523a       ;
            0x00004c30      4c9e5d         jmp 0x5d9e                  ; jump to new location
            0x00004c33      4c1169         jmp 0x6911                  ; jump to new location
            0x00004c36      4cc869         jmp 0x69c8                  ; jump to new location
            0x00004c39      4c5463         jmp 0x6354                  ; jump to new location
            0x00004c3c      4c6363         jmp 0x6363                  ; jump to new location
            0x00004c3f      4c885c         jmp 0x5c88                  ; jump to new location
            0x00004c42      4c1252         jmp 0x5212                  ; jump to new location
            0x00004c45      4c8f51         jmp 0x518f                  ; jump to new location
            0x00004c48      4c7263         jmp 0x6372                  ; jump to new location
            0x00004c4b      4c1261         jmp 0x6112       ; sound?
            0x00004c4e      4cdf5b         jmp 0x5bdf       ; get keyboard or joystick input 
            0x00004c51      4c831d         jmp 0x1d83       ;
            0x00004c54      4c1a63         jmp 0x631a                  ; jump to new location
            0x00004c57      4c3563         jmp 0x6335                  ; jump to new location
            0x00004c5a      4cfa5c         jmp 0x5cfa       ;
            0x00004c5d      4c9858         jmp 0x5898                  ; jump to new location
            0x00004c60      4c7469         jmp 0x6974                  ; jump to new location
            0x00004c63      4cde50         jmp 0x50de       ;
            0x00004c66      4ca258         jmp 0x58a2                  ; jump to new location
            0x00004c69      4ca458         jmp 0x58a4                  ; jump to new location
            0x00004c6c      4cea5e         jmp 0x5eea       ; 
            0x00004c6f      4c9b5f         jmp 0x5f9b                  ; jump to new location
            0x00004c72      4cff63         jmp 0x63ff                  ; jump to new location
            0x00004c75      4c0c64         jmp 0x640c                  ; jump to new location
            0x00004c78      4c1b64         jmp 0x641b                  ; jump to new location
            0x00004c7b      4c8265         jmp 0x6582                  ; jump to new location
            0x00004c7e      4c3d67         jmp 0x673d                  ; jump to new location
            0x00004c81      4cba66         jmp 0x66ba                  ; jump to new location
            0x00004c84      4cb459         jmp 0x59b4                  ; jump to new location
            0x00004c87      4c7e67         jmp 0x677e                  ; jump to new location
            0x00004c8a      4cb067         jmp 0x67b0                  ; jump to new location
            0x00004c8d      4c2b67         jmp 0x672b                  ; jump to new location
            0x00004c90      4c7c66         jmp 0x667c                  ; jump to new location
            0x00004c93      4cc568         jmp 0x68c5                  ; jump to new location
            0x00004c96      4c5c68         jmp 0x685c                  ; jump to new location
            0x00004c99      4cc066         jmp 0x66c0                  ; jump to new location
            0x00004c9c      4cf06b         jmp 0x6bf0       ; sound effect off
            0x00004c9f      4c2601         jmp 0x0126       ; RTS in stack
            0x00004ca2      4c2901         jmp 0x0129       ; RTS in stack
            0x00004ca5      4c2601         jmp 0x0126       ; RTS in stack
            0x00004ca8      4c0c5d         jmp 0x5d0c       ; 
            0x00004cab      4c0b5c         jmp 0x5c0b                  ; jump to new location

            0x00004cae      00             brk              ; variable

0x4c1b(can be changed):
  --------> 0x00004caf      8ef24c         stx 0x4cf2                  ; store index x in memory
  ||| |||   0x00004cb2      8cf44c         sty 0x4cf4                  ; store index y in memory
  ||| |||   0x00004cb5      48             pha                         ; push accumulator on stack
  ||| |||   0x00004cb6      460b           lsr 0x0b                    ; shift right one bit (memory or accumulator)
  ||| |||   0x00004cb8      a520           lda 0x20                    ; load accumulator with memory
  ||| |||   0x00004cba      c9d4           cmp #0xd4                   ; compare memory and accumulator
  |||,====< 0x00004cbc      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004cbe      660b           ror 0x0b                    ; rotate one bit right (memory or accumulator)
  |||`----> 0x00004cc0      a571           lda 0x71                    ; load accumulator with memory
  |||,====< 0x00004cc2      1033           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004cc4      a50e           lda 0x0e                    ; load accumulator with memory
  ========< 0x00004cc6      f02f           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004cc8      a50b           lda 0x0b                    ; load accumulator with memory
  ========< 0x00004cca      3010           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00004ccc      20b253         jsr 0x53b2                  ; jump to new location saving return address
  |||||||   0x00004ccf      20a966         jsr 0x66a9                  ; jump to new location saving return address
  |||||||   0x00004cd2      240a           bit 0x0a                    ; test bits in memory with accumulator
  ========< 0x00004cd4      300d           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00004cd6      207469         jsr 0x6974                  ; jump to new location saving return address
  |||||||   0x00004cd9      206459         jsr 0x5964                  ; jump to new location saving return address
  --------> 0x00004cdc      a50a           lda 0x0a                    ; load accumulator with memory
  ========< 0x00004cde      3003           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00004ce0      20064d         jsr 0x4d06                  ; jump to new location saving return address
  --------> 0x00004ce3      205d4d         jsr 0x4d5d                  ; jump to new location saving return address
  |||||||   0x00004ce6      20c24e         jsr 0x4ec2                  ; jump to new location saving return address
  |||||||   0x00004ce9      20de50         jsr 0x50de                  ; jump to new location saving return address
  |||||||   0x00004cec      204260         jsr 0x6042                  ; jump to new location saving return address
  |||||||   0x00004cef      4633           lsr 0x33                    ; shift right one bit (memory or accumulator)
  --------> 0x00004cf1      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00004cf3      a000           ldy #0x00                   ; load index y with memory
  |||||||   0x00004cf5      68             pla                         ; pull accumulator from stack
  |||||||   0x00004cf6      60             rts                         ; return from subroutine
  ---`----> 0x00004cf7      200c5d         jsr 0x5d0c                  ; jump to new location saving return address
  ||| |||   0x00004cfa      200c5d         jsr 0x5d0c                  ; jump to new location saving return address
  ||| |||   0x00004cfd      200c5d         jsr 0x5d0c                  ; jump to new location saving return address
  ||| |||   0x00004d00      200c5d         jsr 0x5d0c                  ; jump to new location saving return address
  ========< 0x00004d03      4cf14c         jmp 0x4cf1                  ; jump to new location
  ||| |||   0x00004d06      38             sec                         ; set carry flag
  ||| |||   0x00004d07      a502           lda 0x02                    ; load accumulator with memory
  ||| |||   0x00004d09      e905           sbc #0x05                   ; subtract memory from accumulator with borrow
  ||| |||   0x00004d0b      8562           sta 0x62                    ; store accumulator in memory
  ||| |||   0x00004d0d      38             sec                         ; set carry flag
  ||| |||   0x00004d0e      a503           lda 0x03                    ; load accumulator with memory
  ||| |||   0x00004d10      e905           sbc #0x05                   ; subtract memory from accumulator with borrow
  ||| |||   0x00004d12      8563           sta 0x63                    ; store accumulator in memory
  ||| |||   0x00004d14      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00004d16      8560           sta 0x60                    ; store accumulator in memory
  ||| |||   0x00004d18      8561           sta 0x61                    ; store accumulator in memory
  ||| |||   0x00004d1a      8566           sta 0x66                    ; store accumulator in memory
  ||| |||   0x00004d1c      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x00004d1d      a8             tay                         ; transfer accumulator to index y
  ---.----> 0x00004d1e      18             clc                         ; clear carry flag
  |||||||   0x00004d1f      a562           lda 0x62                    ; load accumulator with memory
  |||||||   0x00004d21      6560           adc 0x60                    ; add memory to accumulator with carry
  |||||||   0x00004d23      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00004d24      18             clc                         ; clear carry flag
  |||||||   0x00004d25      a563           lda 0x63                    ; load accumulator with memory
  |||||||   0x00004d27      6561           adc 0x61                    ; add memory to accumulator with carry
  |||||||   0x00004d29      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00004d2a      20af51         jsr 0x51af                  ; jump to new location saving return address
  |||||||   0x00004d2d      48             pha                         ; push accumulator on stack
  |||||||   0x00004d2e      205e51         jsr 0x515e                  ; jump to new location saving return address
  |||||||   0x00004d31      a666           ldx 0x66                    ; load index x with memory
  |||||||   0x00004d33      9d8049         sta 0x4980,x                ; store accumulator in memory
  |||||||   0x00004d36      68             pla                         ; pull accumulator from stack
  |||||||   0x00004d37      9d8048         sta 0x4880,x                ; store accumulator in memory
  |||||||   0x00004d3a      e666           inc 0x66                    ; increment memory by one
  |||||||   0x00004d3c      e660           inc 0x60                    ; increment memory by one
  |||||||   0x00004d3e      a560           lda 0x60                    ; load accumulator with memory
  |||||||   0x00004d40      c90b           cmp #0x0b                   ; compare memory and accumulator
  ========< 0x00004d42      90da           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00004d44      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00004d46      8560           sta 0x60                    ; store accumulator in memory
  |||||||   0x00004d48      e661           inc 0x61                    ; increment memory by one
  |||||||   0x00004d4a      a561           lda 0x61                    ; load accumulator with memory
  |||||||   0x00004d4c      c90b           cmp #0x0b                   ; compare memory and accumulator
  |||`====< 0x00004d4e      90ce           bcc 0x4ed108                ; branch on carry clear
  ||| |||   0x00004d50      60             rts                         ; return from subroutine
  |||.----> 0x00004d51      a078           ldy #0x78                   ; load index y with memory
  --------> 0x00004d53      b90044         lda 0x4400,y                ; load accumulator with memory
  |||||||   0x00004d56      990048         sta 0x4800,y                ; store accumulator in memory
  |||||||   0x00004d59      88             dey                         ; decrement index y by one
  ========< 0x00004d5a      10f7           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004d5c      60             rts                         ; return from subroutine
  |||||||   0x00004d5d      240a           bit 0x0a                    ; test bits in memory with accumulator
  |||`====< 0x00004d5f      30f0           bmi 0x4ed108                ; branch on result minus
  ||| |||   0x00004d61      a278           ldx #0x78                   ; load index x with memory
  ||| |||   0x00004d63      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00004d65      a40e           ldy 0x0e                    ; load index y with memory
  |||,====< 0x00004d67      100a           bpl 0x4ed108                ; branch on result plus
  --------> 0x00004d69      bd8048         lda 0x4880,x                ; load accumulator with memory
  |||||||   0x00004d6c      9d0048         sta 0x4800,x                ; store accumulator in memory
  |||||||   0x00004d6f      ca             dex                         ; decrement index x by one
  ========< 0x00004d70      10f7           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004d72      60             rts                         ; return from subroutine
  ---`----> 0x00004d73      9d0048         sta 0x4800,x                ; store accumulator in memory
  ||| |||   0x00004d76      ca             dex                         ; decrement index x by one
  ========< 0x00004d77      10fa           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00004d79      a078           ldy #0x78                   ; load index y with memory
  ||| |||   0x00004d7b      a90a           lda #0x0a                   ; load accumulator with memory
  ||| |||   0x00004d7d      38             sec                         ; set carry flag
  |||.----> 0x00004d7e      a20b           ldx #0x0b                   ; load index x with memory
  --------> 0x00004d80      99007f         sta 0x7f00,y                ; store accumulator in memory
  |||||||   0x00004d83      88             dey                         ; decrement index y by one
  |||||||   0x00004d84      ca             dex                         ; decrement index x by one
  ========< 0x00004d85      d0f9           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004d87      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  |||`====< 0x00004d89      b0f3           bcs 0x4ed108                ; branch on carry set
  ||| |||   0x00004d8b      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00004d8d      85b4           sta 0xb4                    ; store accumulator in memory
  ||| |||   0x00004d8f      a93c           lda #0x3c                   ; load accumulator with memory
  ||| |||   0x00004d91      85b6           sta 0xb6                    ; store accumulator in memory
  ||| |||   0x00004d93      adbc48         lda 0x48bc                  ; load accumulator with memory
  ||| |||   0x00004d96      8d3c48         sta 0x483c                  ; store accumulator in memory
  |||.----> 0x00004d99      a4b6           ldy 0xb6                    ; load index y with memory
  |||||||   0x00004d9b      b9007f         lda 0x7f00,y                ; load accumulator with memory
  |||||||   0x00004d9e      8586           sta 0x86                    ; store accumulator in memory
  |||||||   0x00004da0      b98049         lda 0x4980,y                ; load accumulator with memory
  |||||||   0x00004da3      8d384e         sta 0x4e38                  ; store accumulator in memory
  |||||||   0x00004da6      a207           ldx #0x07                   ; load index x with memory
  |||||||   0x00004da8      86b5           stx 0xb5                    ; store index x in memory
  --------> 0x00004daa      a6b5           ldx 0xb5                    ; load index x with memory
  |||||||   0x00004dac      18             clc                         ; clear carry flag
  |||||||   0x00004dad      a5b6           lda 0xb6                    ; load accumulator with memory
  |||||||   0x00004daf      7d394e         adc 0x4e39,x                ; add memory to accumulator with carry
  |||||||   0x00004db2      c979           cmp #0x79                   ; compare memory and accumulator
  ========< 0x00004db4      b062           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004db6      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00004db7      a586           lda 0x86                    ; load accumulator with memory
  |||||||   0x00004db9      38             sec                         ; set carry flag
  |||||||   0x00004dba      f9007f         sbc 0x7f00,y                ; subtract memory from accumulator with borrow
  |||||||   0x00004dbd      dd414e         cmp 0x4e41,x                ; compare memory and accumulator
  ========< 0x00004dc0      d056           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004dc2      b90048         lda 0x4800,y                ; load accumulator with memory
  ========< 0x00004dc5      f01a           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004dc7      c9ff           cmp #0xff                   ; compare memory and accumulator
  ========< 0x00004dc9      d04d           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004dcb      ad384e         lda 0x4e38                  ; load accumulator with memory
  ========< 0x00004dce      f048           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004dd0      b98048         lda 0x4880,y                ; load accumulator with memory
  |||||||   0x00004dd3      200651         jsr 0x5106                  ; jump to new location saving return address
  ========< 0x00004dd6      1040           bpl 0x4ed108                ; branch on result plus
  --------> 0x00004dd8      b98048         lda 0x4880,y                ; load accumulator with memory
  |||||||   0x00004ddb      990048         sta 0x4800,y                ; store accumulator in memory
  ========< 0x00004dde      4c184e         jmp 0x4e18                  ; jump to new location
  --------> 0x00004de1      a50e           lda 0x0e                    ; load accumulator with memory
  |||||||   0x00004de3      c901           cmp #0x01                   ; compare memory and accumulator
  ========< 0x00004de5      f017           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004de7      d9494e         cmp 0x4e49,y                ; compare memory and accumulator
  ========< 0x00004dea      b01d           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004dec      b98049         lda 0x4980,y                ; load accumulator with memory
  ========< 0x00004def      d018           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004df1      ad384e         lda 0x4e38                  ; load accumulator with memory
  ========< 0x00004df4      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004df6      b98048         lda 0x4880,y                ; load accumulator with memory
  |||||||   0x00004df9      200651         jsr 0x5106                  ; jump to new location saving return address
  ========< 0x00004dfc      30da           bmi 0x4ed108                ; branch on result minus
  --------> 0x00004dfe      a9ff           lda #0xff                   ; load accumulator with memory
  |||||||   0x00004e00      990048         sta 0x4800,y                ; store accumulator in memory
  |||||||   0x00004e03      b98048         lda 0x4880,y                ; load accumulator with memory
  ========< 0x00004e06      4c0f4e         jmp 0x4e0f                  ; jump to new location
  --------> 0x00004e09      b98048         lda 0x4880,y                ; load accumulator with memory
  |||||||   0x00004e0c      990048         sta 0x4800,y                ; store accumulator in memory
  --------> 0x00004e0f      200651         jsr 0x5106                  ; jump to new location saving return address
  ========< 0x00004e12      3004           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00004e14      98             tya                         ; transfer index y to accumulator
  |||||||   0x00004e15      48             pha                         ; push accumulator on stack
  |||||||   0x00004e16      e6b4           inc 0xb4                    ; increment memory by one
  --------> 0x00004e18      c6b5           dec 0xb5                    ; decrement memory by one
  ========< 0x00004e1a      108e           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004e1c      a5b4           lda 0xb4                    ; load accumulator with memory
  ========< 0x00004e1e      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004e20      68             pla                         ; pull accumulator from stack
  |||||||   0x00004e21      85b6           sta 0xb6                    ; store accumulator in memory
  |||||||   0x00004e23      c6b4           dec 0xb4                    ; decrement memory by one
  |||`====< 0x00004e25      4c994d         jmp 0x4d99                  ; jump to new location
  --------> 0x00004e28      a278           ldx #0x78                   ; load index x with memory
  ||| |||   0x00004e2a      a9ff           lda #0xff                   ; load accumulator with memory
  |||.----> 0x00004e2c      bc0048         ldy 0x4800,x                ; load index y with memory
  ========< 0x00004e2f      d003           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004e31      9d0048         sta 0x4800,x                ; store accumulator in memory
  --------> 0x00004e34      ca             dex                         ; decrement index x by one
  |||`====< 0x00004e35      10f5           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00004e37      60             rts                         ; return from subroutine
  ||| |||   0x00004e38      00             brk                         ; force break
  ||| |||   0x00004e39      f5f6           sbc 0xf6,x                  ; subtract memory from accumulator with borrow
  ||| |||   0x00004e3b      010c           ora (0x0c,x)                ; "or" memory with accumulator
  ||| |||   0x00004e3d      0b0a           anc #0x0a
  ||| |||   0x00004e3f      fff401         isb 0x01f4,x
  ||| |||   0x00004e42      0100           ora (0x00,x)                ; "or" memory with accumulator
  ||| |||   0x00004e44      ffffff         isb 0xffff,x
  ||| |||   0x00004e47      00             brk                         ; force break
  ||| |||   0x00004e48      0132           ora (0x32,x)                ; "or" memory with accumulator
  ||| |||   0x00004e4a      2922           and #0x22                   ; "and" memory with accumulator
  ||| |||   0x00004e4c      1d1a19         ora 0x191a,x                ; "or" memory with accumulator
  ||| |||   0x00004e4f      1a             nop                         ; no operation
  ||| |||   0x00004e50      1d2229         ora 0x2922,x                ; "or" memory with accumulator
  ||| |||   0x00004e53      32             hlt
  ||| |||   0x00004e54      2920           and #0x20                   ; "and" memory with accumulator
  ||| |||   0x00004e56      191411         ora 0x1114,y                ; "or" memory with accumulator
  |||,====< 0x00004e59      1011           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004e5b      1419           nop 0x19,x                  ; no operation
  |||||||   0x00004e5d      202922         jsr 0x2229                  ; jump to new location saving return address
  |||||||   0x00004e60      19120d         ora 0x0d12,y                ; "or" memory with accumulator
  |||||||   0x00004e63      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00004e64      090a           ora #0x0a                   ; "or" memory with accumulator
  |||||||   0x00004e66      0d1219         ora 0x1912                  ; "or" memory with accumulator
  |||||||   0x00004e69      22             hlt
  |||||||   0x00004e6a      1d140d         ora 0x0d14,x                ; "or" memory with accumulator
  ||| |||   0x00004e6d      08             php                         ; push processor status on stack
  ||| |||   0x00004e6e      0504           ora 0x04                    ; "or" memory with accumulator
  ||| |||   0x00004e70      0508           ora 0x08                    ; "or" memory with accumulator
  ||| |||   0x00004e72      0d141d         ora 0x1d14                  ; "or" memory with accumulator
  ||| |||   0x00004e75      1a             nop                         ; no operation
  ||| |||   0x00004e76      110a           ora (0x0a),y                ; "or" memory with accumulator
  ||| |||   0x00004e78      0502           ora 0x02                    ; "or" memory with accumulator
  ||| |||   0x00004e7a      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x00004e7c      050a           ora 0x0a                    ; "or" memory with accumulator
  ||| |||   0x00004e7e      111a           ora (0x1a),y                ; "or" memory with accumulator
  ||| |||   0x00004e80      191009         ora 0x0910,y                ; "or" memory with accumulator
  ||| |||   0x00004e83      0401           nop 0x01                    ; no operation
  ||| |||   0x00004e85      00             brk                         ; force break
  ||| |||   0x00004e86      0104           ora (0x04,x)                ; "or" memory with accumulator
  ||| |||   0x00004e88      0910           ora #0x10                   ; "or" memory with accumulator
  ||| |||   0x00004e8a      191a11         ora 0x111a,y                ; "or" memory with accumulator
  ||| |||   0x00004e8d      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00004e8e      0502           ora 0x02                    ; "or" memory with accumulator
  ||| |||   0x00004e90      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x00004e92      050a           ora 0x0a                    ; "or" memory with accumulator
  ||| |||   0x00004e94      111a           ora (0x1a),y                ; "or" memory with accumulator
  ||| |||   0x00004e96      1d140d         ora 0x0d14,x                ; "or" memory with accumulator
  ||| |||   0x00004e99      08             php                         ; push processor status on stack
  ||| |||   0x00004e9a      0504           ora 0x04                    ; "or" memory with accumulator
  ||| |||   0x00004e9c      0508           ora 0x08                    ; "or" memory with accumulator
  ||| |||   0x00004e9e      0d141d         ora 0x1d14                  ; "or" memory with accumulator
  ||| |||   0x00004ea1      22             hlt
  ||| |||   0x00004ea2      19120d         ora 0x0d12,y                ; "or" memory with accumulator
  ||| |||   0x00004ea5      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00004ea6      090a           ora #0x0a                   ; "or" memory with accumulator
  ||| |||   0x00004ea8      0d1219         ora 0x1912                  ; "or" memory with accumulator
  ||| |||   0x00004eab      22             hlt
  ||| |||   0x00004eac      2920           and #0x20                   ; "and" memory with accumulator
  ||| |||   0x00004eae      191411         ora 0x1114,y                ; "or" memory with accumulator
  |||,====< 0x00004eb1      1011           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004eb3      1419           nop 0x19,x                  ; no operation
  |||||||   0x00004eb5      202932         jsr 0x3229                  ; jump to new location saving return address
  |||||||   0x00004eb8      2922           and #0x22                   ; "and" memory with accumulator
  |||||||   0x00004eba      1d1a19         ora 0x191a,x                ; "or" memory with accumulator
  |||||||   0x00004ebd      1a             nop                         ; no operation
  |||||||   0x00004ebe      1d2229         ora 0x2922,x                ; "or" memory with accumulator
  |||||||   0x00004ec1      32             hlt
  |||||||   0x00004ec2      240a           bit 0x0a                    ; test bits in memory with accumulator
  ===`----> 0x00004ec4      3053           bmi 0x4ed108                ; branch on result minus
  ||| |||   0x00004ec6      a52d           lda 0x2d                    ; load accumulator with memory
  ||| |||   0x00004ec8      8d404a         sta 0x4a40                  ; store accumulator in memory
  ||| |||   0x00004ecb      a52e           lda 0x2e                    ; load accumulator with memory
  ||| |||   0x00004ecd      8d604a         sta 0x4a60                  ; store accumulator in memory
  ||| |||   0x00004ed0      a509           lda 0x09                    ; load accumulator with memory
  ||| |||   0x00004ed2      8d804a         sta 0x4a80                  ; store accumulator in memory
  ||| |||   0x00004ed5      a50c           lda 0x0c                    ; load accumulator with memory
  ||| |||   0x00004ed7      8d004a         sta 0x4a00                  ; store accumulator in memory
  ||| |||   0x00004eda      8d204a         sta 0x4a20                  ; store accumulator in memory
  ||| |||   0x00004edd      38             sec                         ; set carry flag
  ||| |||   0x00004ede      a52d           lda 0x2d                    ; load accumulator with memory
  ||| |||   0x00004ee0      e905           sbc #0x05                   ; subtract memory from accumulator with borrow
  ||| |||   0x00004ee2      8562           sta 0x62                    ; store accumulator in memory
  ||| |||   0x00004ee4      38             sec                         ; set carry flag
  ||| |||   0x00004ee5      a52e           lda 0x2e                    ; load accumulator with memory
  ||| |||   0x00004ee7      e905           sbc #0x05                   ; subtract memory from accumulator with borrow
  ||| |||   0x00004ee9      8563           sta 0x63                    ; store accumulator in memory
  ||| |||   0x00004eeb      a278           ldx #0x78                   ; load index x with memory
  |||.----> 0x00004eed      bd0048         lda 0x4800,x                ; load accumulator with memory
  |||||||   0x00004ef0      c9dd           cmp #0xdd                   ; compare memory and accumulator
  ========< 0x00004ef2      f017           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004ef4      c91c           cmp #0x1c                   ; compare memory and accumulator
  ========< 0x00004ef6      f005           beq 0x4ed108                ; branch on result zero
  --------> 0x00004ef8      ca             dex                         ; decrement index x by one
  |||`====< 0x00004ef9      10f2           bpl 0x4ed108                ; branch on result plus
  |||,====< 0x00004efb      301c           bmi 0x4ed108                ; branch on result minus
  --------> 0x00004efd      bd494e         lda 0x4e49,x                ; load accumulator with memory
  |||||||   0x00004f00      c905           cmp #0x05                   ; compare memory and accumulator
  ========< 0x00004f02      b0f4           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004f04      a9dd           lda #0xdd                   ; load accumulator with memory
  |||||||   0x00004f06      9d0048         sta 0x4800,x                ; store accumulator in memory
  ========< 0x00004f09      d0ed           bne 0x4ed108                ; branch on result not zero
  --------> 0x00004f0b      bd494e         lda 0x4e49,x                ; load accumulator with memory
  |||||||   0x00004f0e      c905           cmp #0x05                   ; compare memory and accumulator
  ========< 0x00004f10      90e6           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00004f12      a91c           lda #0x1c                   ; load accumulator with memory
  |||||||   0x00004f14      9d0048         sta 0x4800,x                ; store accumulator in memory
  ========< 0x00004f17      d0df           bne 0x4ed108                ; branch on result not zero
  ---`----> 0x00004f19      a21f           ldx #0x1f                   ; load index x with memory
  |||.----> 0x00004f1b      bd004a         lda 0x4a00,x                ; load accumulator with memory
  ========< 0x00004f1e      d003           bne 0x4ed108                ; branch on result not zero
  ========< 0x00004f20      4cc54f         jmp 0x4fc5                  ; jump to new location
  --------> 0x00004f23      240a           bit 0x0a                    ; test bits in memory with accumulator
  ========< 0x00004f25      100b           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00004f27      bd404a         lda 0x4a40,x                ; load accumulator with memory
  |||||||   0x00004f2a      8560           sta 0x60                    ; store accumulator in memory
  |||||||   0x00004f2c      bd604a         lda 0x4a60,x                ; load accumulator with memory
  |||||||   0x00004f2f      18             clc                         ; clear carry flag
  ========< 0x00004f30      901f           bcc 0x4ed108                ; branch on carry clear
  --------> 0x00004f32      bd804a         lda 0x4a80,x                ; load accumulator with memory
  |||||||   0x00004f35      c509           cmp 0x09                    ; compare memory and accumulator
  ========< 0x00004f37      f003           beq 0x4ed108                ; branch on result zero
  --------> 0x00004f39      4cc54f         jmp 0x4fc5                  ; jump to new location
  --------> 0x00004f3c      bd404a         lda 0x4a40,x                ; load accumulator with memory
  |||||||   0x00004f3f      e562           sbc 0x62                    ; subtract memory from accumulator with borrow
  |||||||   0x00004f41      c90b           cmp #0x0b                   ; compare memory and accumulator
  ========< 0x00004f43      b0f4           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004f45      8560           sta 0x60                    ; store accumulator in memory
  |||||||   0x00004f47      38             sec                         ; set carry flag
  |||||||   0x00004f48      bd604a         lda 0x4a60,x                ; load accumulator with memory
  |||||||   0x00004f4b      e563           sbc 0x63                    ; subtract memory from accumulator with borrow
  |||||||   0x00004f4d      c90b           cmp #0x0b                   ; compare memory and accumulator
  ========< 0x00004f4f      b074           bcs 0x4ed108                ; branch on carry set
  --------> 0x00004f51      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00004f52      b9fb50         lda 0x50fb,y                ; load accumulator with memory
  |||||||   0x00004f55      6560           adc 0x60                    ; add memory to accumulator with carry
  |||||||   0x00004f57      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00004f58      bd204a         lda 0x4a20,x                ; load accumulator with memory
  ========< 0x00004f5b      f068           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004f5d      c91d           cmp #0x1d                   ; compare memory and accumulator
  ========< 0x00004f5f      f05c           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004f61      b90048         lda 0x4800,y                ; load accumulator with memory
  |||||||   0x00004f64      c9ff           cmp #0xff                   ; compare memory and accumulator
  ========< 0x00004f66      f05d           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004f68      c987           cmp #0x87                   ; compare memory and accumulator
  ========< 0x00004f6a      f059           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004f6c      bd004a         lda 0x4a00,x                ; load accumulator with memory
  |||||||   0x00004f6f      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x00004f71      c9e8           cmp #0xe8                   ; compare memory and accumulator
  ========< 0x00004f73      f00b           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004f75      bd004a         lda 0x4a00,x                ; load accumulator with memory
  |||||||   0x00004f78      c920           cmp #0x20                   ; compare memory and accumulator
  ========< 0x00004f7a      b00e           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004f7c      c91e           cmp #0x1e                   ; compare memory and accumulator
  ========< 0x00004f7e      900a           bcc 0x4ed108                ; branch on carry clear
  --------> 0x00004f80      b90048         lda 0x4800,y                ; load accumulator with memory
  ========< 0x00004f83      f040           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004f85      bd004a         lda 0x4a00,x                ; load accumulator with memory
  ========< 0x00004f88      d033           bne 0x4ed108                ; branch on result not zero
  --------> 0x00004f8a      c95c           cmp #0x5c                   ; compare memory and accumulator
  ========< 0x00004f8c      d014           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004f8e      b90048         lda 0x4800,y                ; load accumulator with memory
  |||||||   0x00004f91      c992           cmp #0x92                   ; compare memory and accumulator
  ========< 0x00004f93      d005           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00004f95      bd204a         lda 0x4a20,x                ; load accumulator with memory
  ========< 0x00004f98      d023           bne 0x4ed108                ; branch on result not zero
  --------> 0x00004f9a      bd204a         lda 0x4a20,x                ; load accumulator with memory
  |||||||   0x00004f9d      38             sec                         ; set carry flag
  |||||||   0x00004f9e      e908           sbc #0x08                   ; subtract memory from accumulator with borrow
  ========< 0x00004fa0      d003           bne 0x4ed108                ; branch on result not zero
  --------> 0x00004fa2      bd204a         lda 0x4a20,x                ; load accumulator with memory
  --------> 0x00004fa5      c91c           cmp #0x1c                   ; compare memory and accumulator
  ========< 0x00004fa7      f027           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004fa9      c912           cmp #0x12                   ; compare memory and accumulator
  ========< 0x00004fab      9010           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00004fad      c916           cmp #0x16                   ; compare memory and accumulator
  ========< 0x00004faf      901f           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00004fb1      c940           cmp #0x40                   ; compare memory and accumulator
  ========< 0x00004fb3      b01b           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004fb5      c92c           cmp #0x2c                   ; compare memory and accumulator
  ========< 0x00004fb7      b004           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00004fb9      c928           cmp #0x28                   ; compare memory and accumulator
  ========< 0x00004fbb      b013           bcs 0x4ed108                ; branch on carry set
  --------> 0x00004fbd      990049         sta 0x4900,y                ; store accumulator in memory
  |||||||   0x00004fc0      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00004fc2      990048         sta 0x4800,y                ; store accumulator in memory
  --------> 0x00004fc5      ca             dex                         ; decrement index x by one
  ========< 0x00004fc6      3003           bmi 0x4ed108                ; branch on result minus
  |||`====< 0x00004fc8      4c1b4f         jmp 0x4f1b                  ; jump to new location
  --------> 0x00004fcb      60             rts                         ; return from subroutine
  ||| |||   0x00004fcc      00             brk                         ; force break
  ||| |||   0x00004fcd      00             brk                         ; force break
  ||| |||   0x00004fce      00             brk                         ; force break
  ||| |||   0x00004fcf      00             brk                         ; force break
  --------> 0x00004fd0      8ccd4f         sty 0x4fcd                  ; store index y in memory
  ||| |||   0x00004fd3      8ecc4f         stx 0x4fcc                  ; store index x in memory
  ||| |||   0x00004fd6      8dcf4f         sta 0x4fcf                  ; store accumulator in memory
  ||| |||   0x00004fd9      bd604a         lda 0x4a60,x                ; load accumulator with memory
  ||| |||   0x00004fdc      bc404a         ldy 0x4a40,x                ; load index y with memory
  ||| |||   0x00004fdf      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x00004fe0      20c850         jsr 0x50c8                  ; jump to new location saving return address
  ||| |||   0x00004fe3      8dce4f         sta 0x4fce                  ; store accumulator in memory
  ||| |||   0x00004fe6      c9ec           cmp #0xec                   ; compare memory and accumulator
  |||,====< 0x00004fe8      f055           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004fea      c90a           cmp #0x0a                   ; compare memory and accumulator
  ========< 0x00004fec      f051           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004fee      c957           cmp #0x57                   ; compare memory and accumulator
  ========< 0x00004ff0      f06b           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004ff2      c96a           cmp #0x6a                   ; compare memory and accumulator
  ========< 0x00004ff4      f076           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004ff6      c96b           cmp #0x6b                   ; compare memory and accumulator
  ========< 0x00004ff8      f072           beq 0x4ed108                ; branch on result zero
  |||||||   0x00004ffa      2ccf4f         bit 0x4fcf                  ; test bits in memory with accumulator
  ========< 0x00004ffd      3034           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00004fff      c984           cmp #0x84                   ; compare memory and accumulator
  ========< 0x00005001      f045           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005003      c985           cmp #0x85                   ; compare memory and accumulator
  ========< 0x00005005      f049           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005007      c9c8           cmp #0xc8                   ; compare memory and accumulator
  ========< 0x00005009      f04c           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000500b      c9c9           cmp #0xc9                   ; compare memory and accumulator
  ========< 0x0000500d      f04b           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000500f      c9ab           cmp #0xab                   ; compare memory and accumulator
  ========< 0x00005011      f04d           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005013      c99d           cmp #0x9d                   ; compare memory and accumulator
  ========< 0x00005015      f04e           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005017      c99e           cmp #0x9e                   ; compare memory and accumulator
  ========< 0x00005019      f04a           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000501b      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x0000501d      c990           cmp #0x90                   ; compare memory and accumulator
  ========< 0x0000501f      f05d           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005021      20c050         jsr 0x50c0                  ; jump to new location saving return address
  |||||||   0x00005024      c99d           cmp #0x9d                   ; compare memory and accumulator
  ========< 0x00005026      d00b           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005028      adcd4f         lda 0x4fcd                  ; load accumulator with memory
  |||||||   0x0000502b      e90b           sbc #0x0b                   ; subtract memory from accumulator with borrow
  |||||||   0x0000502d      a8             tay                         ; transfer accumulator to index y
  |||||||   0x0000502e      a99e           lda #0x9e                   ; load accumulator with memory
  |||||||   0x00005030      990048         sta 0x4800,y                ; store accumulator in memory
  --------> 0x00005033      adcf4f         lda 0x4fcf                  ; load accumulator with memory
  --------> 0x00005036      accd4f         ldy 0x4fcd                  ; load index y with memory
  |||||||   0x00005039      aecc4f         ldx 0x4fcc                  ; load index x with memory
  ========< 0x0000503c      4cbd4f         jmp 0x4fbd                  ; jump to new location
  ---`----> 0x0000503f      aecc4f         ldx 0x4fcc                  ; load index x with memory
  ||| |||   0x00005042      accd4f         ldy 0x4fcd                  ; load index y with memory
  ========< 0x00005045      4cc54f         jmp 0x4fc5                  ; jump to new location
  --------> 0x00005048      20d250         jsr 0x50d2                  ; jump to new location saving return address
  ||| |||   0x0000504b      18             clc                         ; clear carry flag
  ||| |||   0x0000504c      6960           adc #0x60                   ; add memory to accumulator with carry
  ========< 0x0000504e      d0e6           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005050      20d250         jsr 0x50d2                  ; jump to new location saving return address
  ||| |||   0x00005053      18             clc                         ; clear carry flag
  ||| |||   0x00005054      6964           adc #0x64                   ; add memory to accumulator with carry
  ||| |||   0x00005056      2ca917         bit 0x17a9                  ; test bits in memory with accumulator
  ||| |||   0x00005059      2ca918         bit 0x18a9                  ; test bits in memory with accumulator
  ||| |||   0x0000505c      2ca9bb         bit 0xbba9                  ; test bits in memory with accumulator
  ||| |||   0x0000505f      2ca91a         bit 0x1aa9                  ; test bits in memory with accumulator
  ========< 0x00005062      4c3650         jmp 0x5036                  ; jump to new location
  --------> 0x00005065      20d250         jsr 0x50d2                  ; jump to new location saving return address
  ||| |||   0x00005068      093c           ora #0x3c                   ; "or" memory with accumulator
  ========< 0x0000506a      d0ca           bne 0x4ed108                ; branch on result not zero
  --------> 0x0000506c      adcf4f         lda 0x4fcf                  ; load accumulator with memory
  ||| |||   0x0000506f      29fc           and #0xfc                   ; "and" memory with accumulator
  ||| |||   0x00005071      c928           cmp #0x28                   ; compare memory and accumulator
  |||,====< 0x00005073      f006           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005075      29f0           and #0xf0                   ; "and" memory with accumulator
  |||||||   0x00005077      c980           cmp #0x80                   ; compare memory and accumulator
  ========< 0x00005079      d0b8           bne 0x4ed108                ; branch on result not zero
  ===`----> 0x0000507b      4c3f50         jmp 0x503f                  ; jump to new location
  --------> 0x0000507e      adce4f         lda 0x4fce                  ; load accumulator with memory
  ||| |||   0x00005081      c990           cmp #0x90                   ; compare memory and accumulator
  |||,====< 0x00005083      f01e           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005085      c992           cmp #0x92                   ; compare memory and accumulator
  ========< 0x00005087      d02c           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005089      bd604a         lda 0x4a60,x                ; load accumulator with memory
  |||||||   0x0000508c      bc404a         ldy 0x4a40,x                ; load index y with memory
  |||||||   0x0000508f      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005090      e8             inx                         ; increment index x by one
  |||||||   0x00005091      20c850         jsr 0x50c8                  ; jump to new location saving return address
  |||||||   0x00005094      c99a           cmp #0x9a                   ; compare memory and accumulator
  ========< 0x00005096      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005098      c99c           cmp #0x9c                   ; compare memory and accumulator
  ========< 0x0000509a      d007           bne 0x4ed108                ; branch on result not zero
  --------> 0x0000509c      20d250         jsr 0x50d2                  ; jump to new location saving return address
  |||||||   0x0000509f      0934           ora #0x34                   ; "or" memory with accumulator
  ========< 0x000050a1      d093           bne 0x4ed108                ; branch on result not zero
  ---`----> 0x000050a3      20c050         jsr 0x50c0                  ; jump to new location saving return address
  ||| |||   0x000050a6      c99b           cmp #0x9b                   ; compare memory and accumulator
  |||,====< 0x000050a8      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x000050aa      c99c           cmp #0x9c                   ; compare memory and accumulator
  ========< 0x000050ac      d007           bne 0x4ed108                ; branch on result not zero
  |||`----> 0x000050ae      20d250         jsr 0x50d2                  ; jump to new location saving return address
  ||| |||   0x000050b1      0938           ora #0x38                   ; "or" memory with accumulator
  |||,====< 0x000050b3      d008           bne 0x4ed108                ; branch on result not zero
  --------> 0x000050b5      adce4f         lda 0x4fce                  ; load accumulator with memory
  |||||||   0x000050b8      2903           and #0x03                   ; "and" memory with accumulator
  |||||||   0x000050ba      18             clc                         ; clear carry flag
  |||||||   0x000050bb      6930           adc #0x30                   ; add memory to accumulator with carry
  ===`----> 0x000050bd      4c3650         jmp 0x5036                  ; jump to new location
  ||| |||   0x000050c0      bc404a         ldy 0x4a40,x                ; load index y with memory
  ||| |||   0x000050c3      bd604a         lda 0x4a60,x                ; load accumulator with memory
  ||| |||   0x000050c6      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x000050c7      ca             dex                         ; decrement index x by one
  ||| |||   0x000050c8      208f51         jsr 0x518f                  ; jump to new location saving return address
  ||| |||   0x000050cb      aecc4f         ldx 0x4fcc                  ; load index x with memory
  ||| |||   0x000050ce      accd4f         ldy 0x4fcd                  ; load index y with memory
  ||| |||   0x000050d1      60             rts                         ; return from subroutine
  ||| |||   0x000050d2      a520           lda 0x20                    ; load accumulator with memory
  ||| |||   0x000050d4      49d4           eor #0xd4                   ; "exclusive-or" memory with accumulator
  |||,====< 0x000050d6      f005           beq 0x4ed108                ; branch on result zero
  |||||||   0x000050d8      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000050db      2903           and #0x03                   ; "and" memory with accumulator
  |||`----> 0x000050dd      60             rts                         ; return from subroutine
  --------> 0x000050de      20801d         jsr 0x1d80                  ; jump to new location saving return address
  ||| |||   0x000050e1      ad15d0         lda 0xd015                  ; load accumulator with memory
  ||| |||   0x000050e4      29fd           and #0xfd                   ; "and" memory with accumulator
  ||| |||   0x000050e6      8d15d0         sta 0xd015                  ; store accumulator in memory
  ||| |||   0x000050e9      240a           bit 0x0a                    ; test bits in memory with accumulator
  |||,====< 0x000050eb      3001           bmi 0x4ed108                ; branch on result minus
  |||||||   0x000050ed      60             rts                         ; return from subroutine
  ===`----> 0x000050ee      4c0380         jmp 0x8003                  ; jump to new location
  ||| |||   0x000050f1      18             clc                         ; clear carry flag
  ||| |||   0x000050f2      a5a9           lda 0xa9                    ; load accumulator with memory
  ||| |||   0x000050f4      a4aa           ldy 0xaa                    ; load index y with memory
  ||| |||   0x000050f6      79fb50         adc 0x50fb,y                ; add memory to accumulator with carry
  ||| |||   0x000050f9      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x000050fa      60             rts                         ; return from subroutine
  ||| |||   0x000050fb      00             brk                         ; force break
  ||| |||   0x000050fc      0b16           anc #0x16
  ||| |||   0x000050fe      212c           and (0x2c,x)                ; "and" memory with accumulator
  ||| |||   0x00005100      3742           rla 0x42,x
  ||| |||   0x00005102      4d5863         eor 0x6358                  ; "exclusive-or" memory with accumulator
  ||| |||   0x00005105      6e240d         ror 0x0d24                  ; rotate one bit right (memory or accumulator)
  |||,====< 0x00005108      301a           bmi 0x4ed108                ; branch on result minus
  |||||||   0x0000510a      c998           cmp #0x98                   ; compare memory and accumulator
  ========< 0x0000510c      f010           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000510e      c94a           cmp #0x4a                   ; compare memory and accumulator
  ========< 0x00005110      f00c           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005112      c94b           cmp #0x4b                   ; compare memory and accumulator
  ========< 0x00005114      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005116      c9ba           cmp #0xba                   ; compare memory and accumulator
  ========< 0x00005118      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000511a      c9bb           cmp #0xbb                   ; compare memory and accumulator
  ========< 0x0000511c      d009           bne 0x4ed108                ; branch on result not zero
  --------> 0x0000511e      be494e         ldx 0x4e49,y                ; load index x with memory
  |||||||   0x00005121      ca             dex                         ; decrement index x by one
  --------> 0x00005122      f002           beq 0x4ed108                ; branch on result zero
  |||`----> 0x00005124      a9ff           lda #0xff                   ; load accumulator with memory
  --------> 0x00005126      60             rts                         ; return from subroutine
  --------> 0x00005127      48             pha                         ; push accumulator on stack
  ||| |||   0x00005128      2907           and #0x07                   ; "and" memory with accumulator
  ||| |||   0x0000512a      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x0000512b      bd1a65         lda 0x651a,x                ; load accumulator with memory
  ||| |||   0x0000512e      8d3a51         sta 0x513a                  ; store accumulator in memory
  ||| |||   0x00005131      68             pla                         ; pull accumulator from stack
  ||| |||   0x00005132      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ||| |||   0x00005133      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ||| |||   0x00005134      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ||| |||   0x00005135      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x00005136      bd3e51         lda 0x513e,x                ; load accumulator with memory
  ||| |||   0x00005139      29ff           and #0xff                   ; "and" memory with accumulator
  ========< 0x0000513b      4c2251         jmp 0x5122                  ; jump to new location
  ||| |||   0x0000513e      00             brk                         ; force break
  ||| |||   0x0000513f      6c0000         jmp (0x0000)                ; jump to new location
  ||| |||   0x00005142      00             brk                         ; force break
  ||| |||   0x00005143      00             brk                         ; force break
  ||| |||   0x00005144      00             brk                         ; force break
  ||| |||   0x00005145      00             brk                         ; force break
  ||| |||   0x00005146      00             brk                         ; force break
  ||| |||   0x00005147      3700           rla 0x00,x
  ||| |||   0x00005149      200000         jsr 0x0000                  ; jump to new location saving return address
  ||| |||   0x0000514c      00             brk                         ; force break
  ||| |||   0x0000514d      00             brk                         ; force break
  ||| |||   0x0000514e      00             brk                         ; force break
  ||| |||   0x0000514f      00             brk                         ; force break
  ||| |||   0x00005150      0180           ora (0x80,x)                ; "or" memory with accumulator
  ||| |||   0x00005152      00             brk                         ; force break
  ||| |||   0x00005153      00             brk                         ; force break
  ||| |||   0x00005154      00             brk                         ; force break
  ||| |||   0x00005155      f8             sed                         ; set decimal mode
  ||| |||   0x00005156      00             brk                         ; force break
  ||| |||   0x00005157      00             brk                         ; force break
  |||,====< 0x00005158      f000           beq 0x4ed108                ; branch on result zero
  |||`----> 0x0000515a      00             brk                         ; force break
  ||| |||   0x0000515b      00             brk                         ; force break
  ||| |||   0x0000515c      00             brk                         ; force break
  ||| |||   0x0000515d      83e0           sax (0xe0,x)
  ||| |||   0x0000515f      20b01f         jsr 0x1fb0                  ; jump to new location saving return address
  |||||||   0x00005162      c020           cpy #0x20                   ; compare memory and index y
  ========< 0x00005164      b01b           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005166      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00005167      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005168      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005169      85be           sta 0xbe                    ; store accumulator in memory
  |||||||   0x0000516b      98             tya                         ; transfer index y to accumulator
  |||||||   0x0000516c      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000516d      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000516e      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000516f      05be           ora 0xbe                    ; "or" memory with accumulator
  |||||||   0x00005171      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005172      98             tya                         ; transfer index y to accumulator
  |||||||   0x00005173      2907           and #0x07                   ; "and" memory with accumulator
  |||||||   0x00005175      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00005176      bd807e         lda 0x7e80,x                ; load accumulator with memory
  |||||||   0x00005179      399c6a         and 0x6a9c,y                ; "and" memory with accumulator
  ========< 0x0000517c      f005           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000517e      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005180      60             rts                         ; return from subroutine
  ---`----> 0x00005181      a900           lda #0x00                   ; load accumulator with memory
  --------> 0x00005183      60             rts                         ; return from subroutine
  --------> 0x00005184      a42d           ldy 0x2d                    ; load index y with memory
  ||| |||   0x00005186      a62e           ldx 0x2e                    ; load index x with memory
  |||,====< 0x00005188      4c8f51         jmp 0x518f                  ; jump to new location
  --------> 0x0000518b      a4a9           ldy 0xa9                    ; load index y with memory
  |||||||   0x0000518d      a6aa           ldx 0xaa                    ; load index x with memory
  ---`----> 0x0000518f      a50a           lda 0x0a                    ; load accumulator with memory
  |||,====< 0x00005191      f00c           beq 0x4ed108                ; branch on result zero
  ========< 0x00005193      101a           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00005195      98             tya                         ; transfer index y to accumulator
  |||||||   0x00005196      18             clc                         ; clear carry flag
  |||||||   0x00005197      7dfb50         adc 0x50fb,x                ; add memory to accumulator with carry
  |||||||   0x0000519a      a8             tay                         ; transfer accumulator to index y
  |||||||   0x0000519b      b90044         lda 0x4400,y                ; load accumulator with memory
  |||||||   0x0000519e      60             rts                         ; return from subroutine
  |||`----> 0x0000519f      38             sec                         ; set carry flag
  ||| |||   0x000051a0      98             tya                         ; transfer index y to accumulator
  ||| |||   0x000051a1      a404           ldy 0x04                    ; load index y with memory
  ||| |||   0x000051a3      f90252         sbc 0x5202,y                ; subtract memory from accumulator with borrow
  ||| |||   0x000051a6      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x000051a7      38             sec                         ; set carry flag
  ||| |||   0x000051a8      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x000051a9      a605           ldx 0x05                    ; load index x with memory
  ||| |||   0x000051ab      fd0252         sbc 0x5202,x                ; subtract memory from accumulator with borrow
  |||||||   0x000051ae      aa             tax                         ; transfer accumulator to index x
  --------> 0x000051af      e020           cpx #0x20                   ; compare memory and index x
  ========< 0x000051b1      b01b           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000051b3      c020           cpy #0x20                   ; compare memory and index y
  --------> 0x000051b5      b017           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000051b7      bdd251         lda 0x51d2,x                ; load accumulator with memory
  |||||||   0x000051ba      85fd           sta 0xfd                    ; store accumulator in memory
  |||||||   0x000051bc      bdf251         lda 0x51f2,x                ; load accumulator with memory
  --------> 0x000051bf      c010           cpy #0x10                   ; compare memory and index y
  ========< 0x000051c1      9006           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000051c3      69ef           adc #0xef                   ; add memory to accumulator with carry
  ========< 0x000051c5      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000051c7      e6fd           inc 0xfd                    ; increment memory by one
  --------> 0x000051c9      85fc           sta 0xfc                    ; store accumulator in memory
  |||||||   0x000051cb      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x000051cd      60             rts                         ; return from subroutine
  --------> 0x000051ce      adff47         lda 0x47ff                  ; load accumulator with memory
  |||||||   0x000051d1      60             rts                         ; return from subroutine
  |||||||   0x000051d2      4444           nop 0x44                    ; no operation
  |||||||   0x000051d4      4444           nop 0x44                    ; no operation
  |||||||   0x000051d6      4444           nop 0x44                    ; no operation
  |||||||   0x000051d8      4444           nop 0x44                    ; no operation
  |||||||   0x000051da      4444           nop 0x44                    ; no operation
  |||||||   0x000051dc      4444           nop 0x44                    ; no operation
  |||||||   0x000051de      4444           nop 0x44                    ; no operation
  |||||||   0x000051e0      4444           nop 0x44                    ; no operation
  |||||||   0x000051e2      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051e4      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051e6      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051e8      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051ea      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051ec      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051ee      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051f0      4646           lsr 0x46                    ; shift right one bit (memory or accumulator)
  |||||||   0x000051f2      00             brk                         ; force break
  ========< 0x000051f3      1020           bpl 0x4ed108                ; branch on result plus
  ========< 0x000051f5      3040           bmi 0x4ed108                ; branch on result minus
  ========< 0x000051f7      5060           bvc 0x4ed108                ; branch on overflow clear
  ========< 0x000051f9      7080           bvs 0x4ed108                ; branch on overflow set
  ========< 0x000051fb      90a0           bcc 0x4ed108                ; branch on carry clear
  ========< 0x000051fd      b0c0           bcs 0x4ed108                ; branch on carry set
  ========< 0x000051ff      d0e0           bne 0x4ed108                ; branch on result not zero
  ========< 0x00005201      f000           beq 0x4ed108                ; branch on result zero
  --------> 0x00005203      1020           bpl 0x4ed108                ; branch on result plus
  ========< 0x00005205      3040           bmi 0x4ed108                ; branch on result minus
  ========< 0x00005207      5060           bvc 0x4ed108                ; branch on overflow clear
  ========< 0x00005209      7080           bvs 0x4ed108                ; branch on overflow set
  |||`====< 0x0000520b      90a0           bcc 0x4ed108                ; branch on carry clear
  ========< 0x0000520d      b0c0           bcs 0x4ed108                ; branch on carry set
  ========< 0x0000520f      d0e0           bne 0x4ed108                ; branch on result not zero
  ========< 0x00005211      f0a2           beq 0x4ed108                ; branch on result zero
  ||| |||   0x00005213      1f240a         slo 0x0a24,x
  ========< 0x00005216      3007           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00005218      a509           lda 0x09                    ; load accumulator with memory
  |||||||   0x0000521a      dd804a         cmp 0x4a80,x                ; compare memory and accumulator
  ========< 0x0000521d      d014           bne 0x4ed108                ; branch on result not zero
  --------> 0x0000521f      a5a9           lda 0xa9                    ; load accumulator with memory
  |||||||   0x00005221      dd404a         cmp 0x4a40,x                ; compare memory and accumulator
  ========< 0x00005224      d00d           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005226      a5aa           lda 0xaa                    ; load accumulator with memory
  |||||||   0x00005228      dd604a         cmp 0x4a60,x                ; compare memory and accumulator
  ========< 0x0000522b      d006           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000522d      bd004a         lda 0x4a00,x                ; load accumulator with memory
  ========< 0x00005230      f001           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005232      60             rts                         ; return from subroutine
  --------> 0x00005233      ca             dex                         ; decrement index x by one
  |||`====< 0x00005234      10de           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00005236      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005238      60             rts                         ; return from subroutine
  ||| |||   0x00005239      00             brk                         ; force break
  --------> 0x0000523a      aa             tax                         ; transfer accumulator to index x
  |||,====< 0x0000523b      d003           bne 0x4ed108                ; branch on result not zero
  ========< 0x0000523d      4cb152         jmp 0x52b1                  ; jump to new location
  |||`----> 0x00005240      a620           ldx 0x20                    ; load index x with memory
  ||| |||   0x00005242      e0d1           cpx #0xd1                   ; compare memory and index x
  |||,====< 0x00005244      d00b           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005246      203563         jsr 0x6335                  ; jump to new location saving return address
  |||||||   0x00005249      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ========< 0x0000524a      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000524c      a901           lda #0x01                   ; load accumulator with memory
  --------> 0x0000524e      201a63         jsr 0x631a                  ; jump to new location saving return address
  |||`----> 0x00005251      a61e           ldx 0x1e                    ; load index x with memory
  ||| |||   0x00005253      8631           stx 0x31                    ; store index x in memory
  ||| |||   0x00005255      240b           bit 0x0b                    ; test bits in memory with accumulator
  |||,====< 0x00005257      3058           bmi 0x4ed108                ; branch on result minus
  --------> 0x00005259      204653         jsr 0x5346                  ; jump to new location saving return address
  |||||||   0x0000525c      f8             sed                         ; set decimal mode
  |||||||   0x0000525d      18             clc                         ; clear carry flag
  |||||||   0x0000525e      651f           adc 0x1f                    ; add memory to accumulator with carry
  |||||||   0x00005260      851f           sta 0x1f                    ; store accumulator in memory
  |||||||   0x00005262      c960           cmp #0x60                   ; compare memory and accumulator
  ========< 0x00005264      904b           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005266      38             sec                         ; set carry flag
  |||||||   0x00005267      e960           sbc #0x60                   ; subtract memory from accumulator with borrow
  --------> 0x00005269      851f           sta 0x1f                    ; store accumulator in memory
  |||||||   0x0000526b      c622           dec 0x22                    ; decrement memory by one
  ========< 0x0000526d      1002           bpl 0x4ed108                ; branch on result plus
  |||||||   0x0000526f      e622           inc 0x22                    ; increment memory by one
  --------> 0x00005271      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005273      18             clc                         ; clear carry flag
  |||||||   0x00005274      651e           adc 0x1e                    ; add memory to accumulator with carry
  |||||||   0x00005276      851e           sta 0x1e                    ; store accumulator in memory
  |||||||   0x00005278      4924           eor #0x24                   ; "exclusive-or" memory with accumulator
  ========< 0x0000527a      d035           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000527c      851e           sta 0x1e                    ; store accumulator in memory
  |||||||   0x0000527e      d8             cld                         ; clear decimal mode
  |||||||   0x0000527f      208c53         jsr 0x538c                  ; jump to new location saving return address
  |||||||   0x00005282      f8             sed                         ; set decimal mode
  |||||||   0x00005283      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005285      18             clc                         ; clear carry flag
  |||||||   0x00005286      651d           adc 0x1d                    ; add memory to accumulator with carry
  |||||||   0x00005288      851d           sta 0x1d                    ; store accumulator in memory
  |||||||   0x0000528a      c929           cmp #0x29                   ; compare memory and accumulator
  ========< 0x0000528c      9023           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000528e      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005290      851d           sta 0x1d                    ; store accumulator in memory
  |||||||   0x00005292      d8             cld                         ; clear decimal mode
  |||||||   0x00005293      206453         jsr 0x5364                  ; jump to new location saving return address
  |||||||   0x00005296      f8             sed                         ; set decimal mode
  |||||||   0x00005297      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005299      18             clc                         ; clear carry flag
  |||||||   0x0000529a      651c           adc 0x1c                    ; add memory to accumulator with carry
  |||||||   0x0000529c      851c           sta 0x1c                    ; store accumulator in memory
  |||||||   0x0000529e      c914           cmp #0x14                   ; compare memory and accumulator
  ========< 0x000052a0      900f           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000052a2      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x000052a4      851c           sta 0x1c                    ; store accumulator in memory
  |||||||   0x000052a6      18             clc                         ; clear carry flag
  |||||||   0x000052a7      651b           adc 0x1b                    ; add memory to accumulator with carry
  |||||||   0x000052a9      851b           sta 0x1b                    ; store accumulator in memory
  |||||||   0x000052ab      a51a           lda 0x1a                    ; load accumulator with memory
  |||||||   0x000052ad      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x000052af      851a           sta 0x1a                    ; store accumulator in memory
  ---`----> 0x000052b1      d8             cld                         ; clear decimal mode
  ||| |||   0x000052b2      a50e           lda 0x0e                    ; load accumulator with memory
  ||| |||   0x000052b4      c933           cmp #0x33                   ; compare memory and accumulator
  |||,====< 0x000052b6      b063           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000052b8      a50a           lda 0x0a                    ; load accumulator with memory
  |||||||   0x000052ba      c919           cmp #0x19                   ; compare memory and accumulator
  ========< 0x000052bc      f01b           beq 0x4ed108                ; branch on result zero
  |||||||   0x000052be      a509           lda 0x09                    ; load accumulator with memory
  ========< 0x000052c0      3017           bmi 0x4ed108                ; branch on result minus
  |||||||   0x000052c2      a51e           lda 0x1e                    ; load accumulator with memory
  |||||||   0x000052c4      c905           cmp #0x05                   ; compare memory and accumulator
  ========< 0x000052c6      9011           bcc 0x4ed108                ; branch on carry clear
  ========< 0x000052c8      f016           beq 0x4ed108                ; branch on result zero
  |||||||   0x000052ca      c919           cmp #0x19                   ; compare memory and accumulator
  ========< 0x000052cc      f022           beq 0x4ed108                ; branch on result zero
  ========< 0x000052ce      b009           bcs 0x4ed108                ; branch on carry set
  ========< 0x000052d0      d000           bne 0x4ed108                ; branch on result not zero
  --------> 0x000052d2      a932           lda #0x32                   ; load accumulator with memory
  |||||||   0x000052d4      850e           sta 0x0e                    ; store accumulator in memory
  ========< 0x000052d6      4c1b53         jmp 0x531b                  ; jump to new location
  --------> 0x000052d9      a902           lda #0x02                   ; load accumulator with memory
  |||||||   0x000052db      850e           sta 0x0e                    ; store accumulator in memory
  ========< 0x000052dd      4c0053         jmp 0x5300                  ; jump to new location
  --------> 0x000052e0      a51f           lda 0x1f                    ; load accumulator with memory
  --------> 0x000052e2      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000052e3      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000052e4      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000052e5      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000052e6      18             clc                         ; clear carry flag
  |||||||   0x000052e7      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000052e8      b9fa52         lda 0x52fa,y                ; load accumulator with memory
  |||||||   0x000052eb      850e           sta 0x0e                    ; store accumulator in memory
  ========< 0x000052ed      4c0053         jmp 0x5300                  ; jump to new location
  --------> 0x000052f0      a959           lda #0x59                   ; load accumulator with memory
  |||||||   0x000052f2      f8             sed                         ; set decimal mode
  |||||||   0x000052f3      38             sec                         ; set carry flag
  |||||||   0x000052f4      e51f           sbc 0x1f                    ; subtract memory from accumulator with borrow
  |||||||   0x000052f6      d8             cld                         ; clear decimal mode
  ========< 0x000052f7      4ce252         jmp 0x52e2                  ; jump to new location
  |||||||   0x000052fa      02             hlt
  |||||||   0x000052fb      050a           ora 0x0a                    ; "or" memory with accumulator
  |||||||   0x000052fd      1422           nop 0x22,x                  ; no operation
  |||||||   0x000052ff      31a5           and (0xa5),y                ; "and" memory with accumulator
  |||||||   0x00005301      11f0           ora (0xf0),y                ; "or" memory with accumulator
  |||||||   0x00005303      0ba9           anc #0xa9
  |||||||   0x00005305      12             hlt
  |||||||   0x00005306      c50e           cmp 0x0e                    ; compare memory and accumulator
  ========< 0x00005308      9011           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000530a      850e           sta 0x0e                    ; store accumulator in memory
  ========< 0x0000530c      4c1b53         jmp 0x531b                  ; jump to new location
  |||||||   0x0000530f      a510           lda 0x10                    ; load accumulator with memory
  ========< 0x00005311      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005313      a90a           lda #0x0a                   ; load accumulator with memory
  |||||||   0x00005315      c50e           cmp 0x0e                    ; compare memory and accumulator
  ========< 0x00005317      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005319      850e           sta 0x0e                    ; store accumulator in memory
  ---`----> 0x0000531b      a531           lda 0x31                    ; load accumulator with memory
  ||| |||   0x0000531d      c51e           cmp 0x1e                    ; compare memory and accumulator
  |||,====< 0x0000531f      f024           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005321      a50a           lda 0x0a                    ; load accumulator with memory
  |||||||   0x00005323      c921           cmp #0x21                   ; compare memory and accumulator
  ========< 0x00005325      b007           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005327      2409           bit 0x09                    ; test bits in memory with accumulator
  ========< 0x00005329      3003           bmi 0x4ed108                ; branch on result minus
  |||||||   0x0000532b      20831d         jsr 0x1d83                  ; jump to new location saving return address
  --------> 0x0000532e      a51e           lda 0x1e                    ; load accumulator with memory
  |||||||   0x00005330      203563         jsr 0x6335                  ; jump to new location saving return address
  |||||||   0x00005333      aa             tax                         ; transfer accumulator to index x
  ========< 0x00005334      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005336      a90c           lda #0x0c                   ; load accumulator with memory
  --------> 0x00005338      8d3952         sta 0x5239                  ; store accumulator in memory
  |||||||   0x0000533b      38             sec                         ; set carry flag
  |||||||   0x0000533c      e90c           sbc #0x0c                   ; subtract memory from accumulator with borrow
  ========< 0x0000533e      f005           beq 0x4ed108                ; branch on result zero
  ========< 0x00005340      9003           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005342      8d3952         sta 0x5239                  ; store accumulator in memory
  ---`----> 0x00005345      60             rts                         ; return from subroutine
  ||| |||   0x00005346      48             pha                         ; push accumulator on stack
  ||| |||   0x00005347      203563         jsr 0x6335                  ; jump to new location saving return address
  ||| |||   0x0000534a      85b4           sta 0xb4                    ; store accumulator in memory
  ||| |||   0x0000534c      a510           lda 0x10                    ; load accumulator with memory
  ||| |||   0x0000534e      38             sec                         ; set carry flag
  ||| |||   0x0000534f      e5b4           sbc 0xb4                    ; subtract memory from accumulator with borrow
  |||,====< 0x00005351      b002           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005353      a900           lda #0x00                   ; load accumulator with memory
  |||`----> 0x00005355      8510           sta 0x10                    ; store accumulator in memory
  ||| |||   0x00005357      a511           lda 0x11                    ; load accumulator with memory
  ||| |||   0x00005359      38             sec                         ; set carry flag
  ||| |||   0x0000535a      e5b4           sbc 0xb4                    ; subtract memory from accumulator with borrow
  |||,====< 0x0000535c      b002           bcs 0x4ed108                ; branch on carry set
  |||||||   0x0000535e      a900           lda #0x00                   ; load accumulator with memory
  |||`----> 0x00005360      8511           sta 0x11                    ; store accumulator in memory
  ||| |||   0x00005362      68             pla                         ; pull accumulator from stack
  ||| |||   0x00005363      60             rts                         ; return from subroutine
  ||| |||   0x00005364      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005366      8dfe11         sta 0x11fe                  ; store accumulator in memory
  ||| |||   0x00005369      8dfd13         sta 0x13fd                  ; store accumulator in memory
  ||| |||   0x0000536c      8dfe13         sta 0x13fe                  ; store accumulator in memory
  ||| |||   0x0000536f      8dff13         sta 0x13ff                  ; store accumulator in memory
  ||| |||   0x00005372      4608           lsr 0x08                    ; shift right one bit (memory or accumulator)
  ||| |||   0x00005374      a00f           ldy #0x0f                   ; load index y with memory
  |||.----> 0x00005376      98             tya                         ; transfer index y to accumulator
  |||||||   0x00005377      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005378      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005379      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x0000537a      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x0000537b      aa             tax                         ; transfer accumulator to index x
  |||||||   0x0000537c      bd8f10         lda 0x108f,x                ; load accumulator with memory
  |||||||   0x0000537f      6901           adc #0x01                   ; add memory to accumulator with carry
  |||||||   0x00005381      c919           cmp #0x19                   ; compare memory and accumulator
  ========< 0x00005383      b003           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005385      9d8f10         sta 0x108f,x                ; store accumulator in memory
  --------> 0x00005388      88             dey                         ; decrement index y by one
  |||`====< 0x00005389      d0eb           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x0000538b      60             rts                         ; return from subroutine
  ||| |||   0x0000538c      a202           ldx #0x02                   ; load index x with memory
  |||.----> 0x0000538e      bd8911         lda 0x1189,x                ; load accumulator with memory
  ========< 0x00005391      3019           bmi 0x4ed108                ; branch on result minus
  --------> 0x00005393      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x00005396      2907           and #0x07                   ; "and" memory with accumulator
  |||||||   0x00005398      18             clc                         ; clear carry flag
  |||||||   0x00005399      6901           adc #0x01                   ; add memory to accumulator with carry
  |||||||   0x0000539b      c50a           cmp 0x0a                    ; compare memory and accumulator
  ========< 0x0000539d      f0f4           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000539f      a002           ldy #0x02                   ; load index y with memory
  --------> 0x000053a1      d98911         cmp 0x1189,y                ; compare memory and accumulator
  ========< 0x000053a4      f0ed           beq 0x4ed108                ; branch on result zero
  |||||||   0x000053a6      88             dey                         ; decrement index y by one
  ========< 0x000053a7      10f8           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000053a9      9d8911         sta 0x1189,x                ; store accumulator in memory
  --------> 0x000053ac      ca             dex                         ; decrement index x by one
  |||`====< 0x000053ad      10df           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x000053af      e680           inc 0x80                    ; increment memory by one
  ||| |||   0x000053b1      60             rts                         ; return from subroutine
  --------> 0x000053b2      206a56         jsr 0x566a                  ; jump to new location saving return address
  ||| |||   0x000053b5      20066c         jsr 0x6c06                  ; jump to new location saving return address
  ||| |||   0x000053b8      202b57         jsr 0x572b                  ; jump to new location saving return address
  ||| |||   0x000053bb      20de57         jsr 0x57de                  ; jump to new location saving return address
  ||| |||   0x000053be      2433           bit 0x33                    ; test bits in memory with accumulator
  |||,====< 0x000053c0      3038           bmi 0x4ed108                ; branch on result minus
  |||||||   0x000053c2      a920           lda #0x20                   ; load accumulator with memory
  |||||||   0x000053c4      a2c0           ldx #0xc0                   ; load index x with memory
  |||||||   0x000053c6      208f55         jsr 0x558f                  ; jump to new location saving return address
  |||||||   0x000053c9      a940           lda #0x40                   ; load accumulator with memory
  |||||||   0x000053cb      208f55         jsr 0x558f                  ; jump to new location saving return address
  |||||||   0x000053ce      a960           lda #0x60                   ; load accumulator with memory
  |||||||   0x000053d0      208f55         jsr 0x558f                  ; jump to new location saving return address
  |||||||   0x000053d3      a9e0           lda #0xe0                   ; load accumulator with memory
  |||||||   0x000053d5      a2d1           ldx #0xd1                   ; load index x with memory
  |||||||   0x000053d7      208f55         jsr 0x558f                  ; jump to new location saving return address
  |||||||   0x000053da      a21f           ldx #0x1f                   ; load index x with memory
  --------> 0x000053dc      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000053df      9d00fd         sta 0xfd00,x                ; store accumulator in memory
  |||||||   0x000053e2      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000053e5      9d20fd         sta 0xfd20,x                ; store accumulator in memory
  |||||||   0x000053e8      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000053eb      9d40fd         sta 0xfd40,x                ; store accumulator in memory
  |||||||   0x000053ee      9d60fd         sta 0xfd60,x                ; store accumulator in memory
  |||||||   0x000053f1      ca             dex                         ; decrement index x by one
  ========< 0x000053f2      10e8           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000053f4      207054         jsr 0x5470                  ; jump to new location saving return address
  |||||||   0x000053f7      20fd53         jsr 0x53fd                  ; jump to new location saving return address
  ===`----> 0x000053fa      4c036c         jmp 0x6c03                  ; jump to new location
  ||| |||   0x000053fd      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  ||| |||   0x00005400      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||,====< 0x00005401      900c           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005403      ae90c2         ldx 0xc290                  ; load index x with memory
  |||||||   0x00005406      ac91c2         ldy 0xc291                  ; load index y with memory
  |||||||   0x00005409      8c90c2         sty 0xc290                  ; store index y in memory
  |||||||   0x0000540c      8e91c2         stx 0xc291                  ; store index x in memory
  |||`----> 0x0000540f      a920           lda #0x20                   ; load accumulator with memory
  ||| |||   0x00005411      a2e4           ldx #0xe4                   ; load index x with memory
  ||| |||   0x00005413      205154         jsr 0x5451                  ; jump to new location saving return address
  ||| |||   0x00005416      a960           lda #0x60                   ; load accumulator with memory
  ||| |||   0x00005418      a2e4           ldx #0xe4                   ; load index x with memory
  ||| |||   0x0000541a      205154         jsr 0x5451                  ; jump to new location saving return address
  ||| |||   0x0000541d      a9a0           lda #0xa0                   ; load accumulator with memory
  ||| |||   0x0000541f      a2e5           ldx #0xe5                   ; load index x with memory
  ||| |||   0x00005421      205154         jsr 0x5451                  ; jump to new location saving return address
  ||| |||   0x00005424      a9e0           lda #0xe0                   ; load accumulator with memory
  ||| |||   0x00005426      a2e5           ldx #0xe5                   ; load index x with memory
  ||| |||   0x00005428      205154         jsr 0x5451                  ; jump to new location saving return address
  ||| |||   0x0000542b      a9a0           lda #0xa0                   ; load accumulator with memory
  ||| |||   0x0000542d      a2c2           ldx #0xc2                   ; load index x with memory
  ||| |||   0x0000542f      203d54         jsr 0x543d                  ; jump to new location saving return address
  ||| |||   0x00005432      a9c0           lda #0xc0                   ; load accumulator with memory
  ||| |||   0x00005434      a2c7           ldx #0xc7                   ; load index x with memory
  ||| |||   0x00005436      203d54         jsr 0x543d                  ; jump to new location saving return address
  ||| |||   0x00005439      a940           lda #0x40                   ; load accumulator with memory
  ||| |||   0x0000543b      a2c2           ldx #0xc2                   ; load index x with memory
  ||| |||   0x0000543d      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x0000543f      86fd           stx 0xfd                    ; store index x in memory
  ||| |||   0x00005441      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  ||| |||   0x00005444      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||,====< 0x00005445      9028           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005447      a002           ldy #0x02                   ; load index y with memory
  |||||||   0x00005449      206254         jsr 0x5462                  ; jump to new location saving return address
  |||||||   0x0000544c      a00a           ldy #0x0a                   ; load index y with memory
  ========< 0x0000544e      4c6254         jmp 0x5462                  ; jump to new location
  |||||||   0x00005451      85fc           sta 0xfc                    ; store accumulator in memory
  |||||||   0x00005453      86fd           stx 0xfd                    ; store index x in memory
  |||||||   0x00005455      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x00005458      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ========< 0x00005459      9014           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000545b      a002           ldy #0x02                   ; load index y with memory
  |||||||   0x0000545d      206254         jsr 0x5462                  ; jump to new location saving return address
  |||||||   0x00005460      a00a           ldy #0x0a                   ; load index y with memory
  --------> 0x00005462      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x00005464      48             pha                         ; push accumulator on stack
  |||||||   0x00005465      c8             iny                         ; increment index y by one
  |||||||   0x00005466      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x00005468      88             dey                         ; decrement index y by one
  |||||||   0x00005469      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x0000546b      68             pla                         ; pull accumulator from stack
  |||||||   0x0000546c      c8             iny                         ; increment index y by one
  |||||||   0x0000546d      91fc           sta (0xfc),y                ; store accumulator in memory
  ---`----> 0x0000546f      60             rts                         ; return from subroutine
  ||| |||   0x00005470      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005472      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x00005474      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x00005476      a9cc           lda #0xcc                   ; load accumulator with memory
  ||| |||   0x00005478      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x0000547a      a9ce           lda #0xce                   ; load accumulator with memory
  ||| |||   0x0000547c      85ff           sta 0xff                    ; store accumulator in memory
  |||.----> 0x0000547e      203b55         jsr 0x553b                  ; jump to new location saving return address
  |||||||   0x00005481      a5ff           lda 0xff                    ; load accumulator with memory
  |||||||   0x00005483      c9d0           cmp #0xd0                   ; compare memory and accumulator
  |||`====< 0x00005485      90f7           bcc 0x4ed108                ; branch on carry clear
  ||| |||   0x00005487      a980           lda #0x80                   ; load accumulator with memory
  ||| |||   0x00005489      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x0000548b      a9c6           lda #0xc6                   ; load accumulator with memory
  ||| |||   0x0000548d      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x0000548f      a9da           lda #0xda                   ; load accumulator with memory
  ||| |||   0x00005491      85ff           sta 0xff                    ; store accumulator in memory
  ||| |||   0x00005493      203b55         jsr 0x553b                  ; jump to new location saving return address
  ||| |||   0x00005496      203b55         jsr 0x553b                  ; jump to new location saving return address
  ||| |||   0x00005499      203b55         jsr 0x553b                  ; jump to new location saving return address
  ||| |||   0x0000549c      203b55         jsr 0x553b                  ; jump to new location saving return address
  ||| |||   0x0000549f      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x000054a1      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x000054a3      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x000054a5      a9d8           lda #0xd8                   ; load accumulator with memory
  ||| |||   0x000054a7      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x000054a9      a9d6           lda #0xd6                   ; load accumulator with memory
  ||| |||   0x000054ab      85ff           sta 0xff                    ; store accumulator in memory
  ||| |||   0x000054ad      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054b0      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054b3      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054b6      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054b9      a940           lda #0x40                   ; load accumulator with memory
  ||| |||   0x000054bb      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x000054bd      a9c0           lda #0xc0                   ; load accumulator with memory
  ||| |||   0x000054bf      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x000054c1      a9d8           lda #0xd8                   ; load accumulator with memory
  ||| |||   0x000054c3      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x000054c5      a9db           lda #0xdb                   ; load accumulator with memory
  ||| |||   0x000054c7      85ff           sta 0xff                    ; store accumulator in memory
  ||| |||   0x000054c9      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054cc      a980           lda #0x80                   ; load accumulator with memory
  ||| |||   0x000054ce      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x000054d0      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x000054d2      a9d7           lda #0xd7                   ; load accumulator with memory
  ||| |||   0x000054d4      85ff           sta 0xff                    ; store accumulator in memory
  ||| |||   0x000054d6      a9d9           lda #0xd9                   ; load accumulator with memory
  ||| |||   0x000054d8      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x000054da      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054dd      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054e0      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054e3      204055         jsr 0x5540                  ; jump to new location saving return address
  ||| |||   0x000054e6      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x000054e8      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x000054ea      a980           lda #0x80                   ; load accumulator with memory
  ||| |||   0x000054ec      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x000054ee      a9da           lda #0xda                   ; load accumulator with memory
  ||| |||   0x000054f0      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x000054f2      a9dc           lda #0xdc                   ; load accumulator with memory
  ||| |||   0x000054f4      85ff           sta 0xff                    ; store accumulator in memory
  ||| |||   0x000054f6      203655         jsr 0x5536                  ; jump to new location saving return address
  ||| |||   0x000054f9      203655         jsr 0x5536                  ; jump to new location saving return address
  ||| |||   0x000054fc      203655         jsr 0x5536                  ; jump to new location saving return address
  ||| |||   0x000054ff      203655         jsr 0x5536                  ; jump to new location saving return address
  ||| |||   0x00005502      a220           ldx #0x20                   ; load index x with memory
  ||| |||   0x00005504      a0e1           ldy #0xe1                   ; load index y with memory
  ||| |||   0x00005506      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005508      201155         jsr 0x5511                  ; jump to new location saving return address
  ||| |||   0x0000550b      a260           ldx #0x60                   ; load index x with memory
  ||| |||   0x0000550d      a0f6           ldy #0xf6                   ; load index y with memory
  ||| |||   0x0000550f      a980           lda #0x80                   ; load accumulator with memory
  ||| |||   0x00005511      8e2555         stx 0x5525                  ; store index x in memory
  ||| |||   0x00005514      8d2d55         sta 0x552d                  ; store accumulator in memory
  ||| |||   0x00005517      8d3055         sta 0x5530                  ; store accumulator in memory
  ||| |||   0x0000551a      8c2e55         sty 0x552e                  ; store index y in memory
  ||| |||   0x0000551d      8c3155         sty 0x5531                  ; store index y in memory
  ||| |||   0x00005520      a21f           ldx #0x1f                   ; load index x with memory
  |||.----> 0x00005522      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00005524      bc60fd         ldy 0xfd60,x                ; load index y with memory
  ========< 0x00005527      3003           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00005529      bd00e0         lda 0xe000,x                ; load accumulator with memory
  --------> 0x0000552c      5d00e1         eor 0xe100,x                ; "exclusive-or" memory with accumulator
  |||||||   0x0000552f      9d00e1         sta 0xe100,x                ; store accumulator in memory
  |||||||   0x00005532      ca             dex                         ; decrement index x by one
  |||`====< 0x00005533      10ed           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00005535      60             rts                         ; return from subroutine
  ||| |||   0x00005536      208055         jsr 0x5580                  ; jump to new location saving return address
  |||,====< 0x00005539      3008           bmi 0x4ed108                ; branch on result minus
  |||||||   0x0000553b      205a55         jsr 0x555a                  ; jump to new location saving return address
  ========< 0x0000553e      3003           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00005540      207155         jsr 0x5571                  ; jump to new location saving return address
  ---`----> 0x00005543      a5fc           lda 0xfc                    ; load accumulator with memory
  ||| |||   0x00005545      18             clc                         ; clear carry flag
  ||| |||   0x00005546      6920           adc #0x20                   ; add memory to accumulator with carry
  ||| |||   0x00005548      85fc           sta 0xfc                    ; store accumulator in memory
  |||,====< 0x0000554a      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000554c      e6fd           inc 0xfd                    ; increment memory by one
  |||`----> 0x0000554e      a5fe           lda 0xfe                    ; load accumulator with memory
  ||| |||   0x00005550      18             clc                         ; clear carry flag
  ||| |||   0x00005551      6920           adc #0x20                   ; add memory to accumulator with carry
  ||| |||   0x00005553      85fe           sta 0xfe                    ; store accumulator in memory
  |||,====< 0x00005555      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005557      e6ff           inc 0xff                    ; increment memory by one
  |||`----> 0x00005559      60             rts                         ; return from subroutine
  ||| |||   0x0000555a      a01f           ldy #0x1f                   ; load index y with memory
  |||.----> 0x0000555c      b1fe           lda (0xfe),y                ; load accumulator with memory
  |||||||   0x0000555e      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
  |||||||   0x00005560      31fc           and (0xfc),y                ; "and" memory with accumulator
  |||||||   0x00005562      8566           sta 0x66                    ; store accumulator in memory
  |||||||   0x00005564      b1fe           lda (0xfe),y                ; load accumulator with memory
  |||||||   0x00005566      3960c0         and 0xc060,y                ; "and" memory with accumulator
  |||||||   0x00005569      0566           ora 0x66                    ; "or" memory with accumulator
  |||||||   0x0000556b      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x0000556d      88             dey                         ; decrement index y by one
  |||`====< 0x0000556e      10ec           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00005570      60             rts                         ; return from subroutine
  ||| |||   0x00005571      a01f           ldy #0x1f                   ; load index y with memory
  |||.----> 0x00005573      b940fd         lda 0xfd40,y                ; load accumulator with memory
  |||||||   0x00005576      31fc           and (0xfc),y                ; "and" memory with accumulator
  |||||||   0x00005578      51fe           eor (0xfe),y                ; "exclusive-or" memory with accumulator
  |||||||   0x0000557a      91fe           sta (0xfe),y                ; store accumulator in memory
  |||||||   0x0000557c      88             dey                         ; decrement index y by one
  |||`====< 0x0000557d      10f4           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x0000557f      60             rts                         ; return from subroutine
  ||| |||   0x00005580      a01f           ldy #0x1f                   ; load index y with memory
  |||.----> 0x00005582      b960c0         lda 0xc060,y                ; load accumulator with memory
  |||||||   0x00005585      29aa           and #0xaa                   ; "and" memory with accumulator
  |||||||   0x00005587      11fc           ora (0xfc),y                ; "or" memory with accumulator
  |||||||   0x00005589      91fe           sta (0xfe),y                ; store accumulator in memory
  |||||||   0x0000558b      88             dey                         ; decrement index y by one
  |||`====< 0x0000558c      10f4           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x0000558e      60             rts                         ; return from subroutine
  ||| |||   0x0000558f      85fe           sta 0xfe                    ; store accumulator in memory
  ||| |||   0x00005591      86ff           stx 0xff                    ; store index x in memory
  ||| |||   0x00005593      a01f           ldy #0x1f                   ; load index y with memory
  ||| |||   0x00005595      209a55         jsr 0x559a                  ; jump to new location saving return address
  ||| |||   0x00005598      a017           ldy #0x17                   ; load index y with memory
  ||| |||   0x0000559a      b1fe           lda (0xfe),y                ; load accumulator with memory
  ||| |||   0x0000559c      48             pha                         ; push accumulator on stack
  |||.----> 0x0000559d      8cc355         sty 0x55c3                  ; store index y in memory
  |||||||   0x000055a0      20b655         jsr 0x55b6                  ; jump to new location saving return address
  |||||||   0x000055a3      b1fe           lda (0xfe),y                ; load accumulator with memory
  |||||||   0x000055a5      acc355         ldy 0x55c3                  ; load index y with memory
  |||||||   0x000055a8      91fe           sta (0xfe),y                ; store accumulator in memory
  |||||||   0x000055aa      20b655         jsr 0x55b6                  ; jump to new location saving return address
  |||`====< 0x000055ad      10ee           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x000055af      68             pla                         ; pull accumulator from stack
  ||| |||   0x000055b0      acc355         ldy 0x55c3                  ; load index y with memory
  ||| |||   0x000055b3      91fe           sta (0xfe),y                ; store accumulator in memory
  ||| |||   0x000055b5      60             rts                         ; return from subroutine
  ||| |||   0x000055b6      98             tya                         ; transfer index y to accumulator
  ||| |||   0x000055b7      2907           and #0x07                   ; "and" memory with accumulator
  |||,====< 0x000055b9      f002           beq 0x4ed108                ; branch on result zero
  |||||||   0x000055bb      88             dey                         ; decrement index y by one
  |||||||   0x000055bc      60             rts                         ; return from subroutine
  |||`----> 0x000055bd      98             tya                         ; transfer index y to accumulator
  ||| |||   0x000055be      38             sec                         ; set carry flag
  ||| |||   0x000055bf      e909           sbc #0x09                   ; subtract memory from accumulator with borrow
  ||| |||   0x000055c1      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x000055c2      60             rts                         ; return from subroutine
  ||| |||   0x000055c3      00             brk                         ; force break
  ||| |||   0x000055c4      02             hlt
  ||| |||   0x000055c5      0304           slo (0x04,x)
  ||| |||   0x000055c7      0500           ora 0x00                    ; "or" memory with accumulator
  ||| |||   0x000055c9      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x000055cb      0304           slo (0x04,x)
  ||| |||   0x000055cd      00             brk                         ; force break
  ||| |||   0x000055ce      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x000055d0      0304           slo (0x04,x)
  ||| |||   0x000055d2      8700           sax 0x00
  ||| |||   0x000055d4      018f           ora (0x8f,x)                ; "or" memory with accumulator
  ||| |||   0x000055d6      02             hlt
  ||| |||   0x000055d7      0304           slo (0x04,x)
  ||| |||   0x000055d9      00             brk                         ; force break
  ||| |||   0x000055da      02             hlt
  ||| |||   0x000055db      8403           sty 0x03                    ; store index y in memory
  ||| |||   0x000055dd      8404           sty 0x04                    ; store index y in memory
  ||| |||   0x000055df      8405           sty 0x05                    ; store index y in memory
  ||| |||   0x000055e1      00             brk                         ; force break
  ||| |||   0x000055e2      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x000055e4      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x000055e6      0304           slo (0x04,x)
  ||| |||   0x000055e8      02             hlt
  ||| |||   0x000055e9      0304           slo (0x04,x)
  ||| |||   0x000055eb      00             brk                         ; force break
  ||| |||   0x000055ec      02             hlt
  ||| |||   0x000055ed      0304           slo (0x04,x)
  ||| |||   0x000055ef      0302           slo (0x02,x)
  ||| |||   0x000055f1      0500           ora 0x00                    ; "or" memory with accumulator
  ||| |||   0x000055f3      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x000055f5      0304           slo (0x04,x)
  ||| |||   0x000055f7      0304           slo (0x04,x)
  ||| |||   0x000055f9      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x000055fb      00             brk                         ; force break
  ||| |||   0x000055fc      018f           ora (0x8f,x)                ; "or" memory with accumulator
  ||| |||   0x000055fe      02             hlt
  ||| |||   0x000055ff      0304           slo (0x04,x)
  ||| |||   0x00005601      0700           slo 0x00
  ||| |||   0x00005603      02             hlt
  ||| |||   0x00005604      8203           nop #0x03                   ; no operation
  ||| |||   0x00005606      8204           nop #0x04                   ; no operation
  ||| |||   0x00005608      8206           nop #0x06                   ; no operation
  ||| |||   0x0000560a      0100           ora (0x00,x)                ; "or" memory with accumulator
  ||| |||   0x0000560c      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||| |||   0x0000560e      0305           slo (0x05,x)
  ||| |||   0x00005610      00             brk                         ; force break
  ||| |||   0x00005611      00             brk                         ; force break
  ||| |||   0x00005612      00             brk                         ; force break
  ||| |||   0x00005613      00             brk                         ; force break
  ||| |||   0x00005614      00             brk                         ; force break
  ||| |||   0x00005615      00             brk                         ; force break
  ||| |||   0x00005616      00             brk                         ; force break
  ||| |||   0x00005617      00             brk                         ; force break
  ||| |||   0x00005618      00             brk                         ; force break
  ||| |||   0x00005619      00             brk                         ; force break
  ||| |||   0x0000561a      00             brk                         ; force break
  ||| |||   0x0000561b      00             brk                         ; force break
  ||| |||   0x0000561c      00             brk                         ; force break
  ||| |||   0x0000561d      00             brk                         ; force break
  ||| |||   0x0000561e      00             brk                         ; force break
  ||| |||   0x0000561f      00             brk                         ; force break
  ||| |||   0x00005620      1600           asl 0x00,x                  ; shift left one bit (memory or accumulator)
  ||| |||   0x00005622      00             brk                         ; force break
  ||| |||   0x00005623      00             brk                         ; force break
  ||| |||   0x00005624      00             brk                         ; force break
  ||| |||   0x00005625      00             brk                         ; force break
  ||| |||   0x00005626      00             brk                         ; force break
  ||| |||   0x00005627      3f0005         rla 0x0500,x
  ||| |||   0x0000562a      1e0505         asl 0x0505,x                ; shift left one bit (memory or accumulator)
  ||| |||   0x0000562d      00             brk                         ; force break
  |||,====< 0x0000562e      1000           bpl 0x4ed108                ; branch on result plus
  |||`----> 0x00005630      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005631      00             brk                         ; force break
  ||| |||   0x00005632      48             pha                         ; push accumulator on stack
  ||| |||   0x00005633      00             brk                         ; force break
  ||| |||   0x00005634      0500           ora 0x00                    ; "or" memory with accumulator
  ||| |||   0x00005636      0500           ora 0x00                    ; "or" memory with accumulator
  ||| |||   0x00005638      0500           ora 0x00                    ; "or" memory with accumulator
  ||| |||   0x0000563a      0528           ora 0x28                    ; "or" memory with accumulator
  ||| |||   0x0000563c      00             brk                         ; force break
  ||| |||   0x0000563d      28             plp                         ; pull processor status from stack
  ||| |||   0x0000563e      00             brk                         ; force break
  ||| |||   0x0000563f      00             brk                         ; force break
  ||| |||   0x00005640      2f3800         rla 0x0038
  ||| |||   0x00005643      00             brk                         ; force break
  ||| |||   0x00005644      8d4d56         sta 0x564d                  ; store accumulator in memory
  ||| |||   0x00005647      b90042         lda 0x4200,y                ; load accumulator with memory
  ||| |||   0x0000564a      29f0           and #0xf0                   ; "and" memory with accumulator
  ||| |||   0x0000564c      0900           ora #0x00                   ; "or" memory with accumulator
  ||| |||   0x0000564e      990042         sta 0x4200,y                ; store accumulator in memory
  ||| |||   0x00005651      60             rts                         ; return from subroutine
  ||| |||   0x00005652      e8             inx                         ; increment index x by one
  ||| |||   0x00005653      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x00005654      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005655      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005656      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005657      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005658      8d5f56         sta 0x565f                  ; store accumulator in memory
  ||| |||   0x0000565b      206456         jsr 0x5664                  ; jump to new location saving return address
  ||| |||   0x0000565e      0900           ora #0x00                   ; "or" memory with accumulator
  ||| |||   0x00005660      990042         sta 0x4200,y                ; store accumulator in memory
  ||| |||   0x00005663      60             rts                         ; return from subroutine
  ||| |||   0x00005664      b90042         lda 0x4200,y                ; load accumulator with memory
  ||| |||   0x00005667      290f           and #0x0f                   ; "and" memory with accumulator
  ||| |||   0x00005669      60             rts                         ; return from subroutine
  ||| |||   0x0000566a      a01f           ldy #0x1f                   ; load index y with memory
  |||.----> 0x0000566c      206456         jsr 0x5664                  ; jump to new location saving return address
  ========< 0x0000566f      f00f           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005671      c90f           cmp #0x0f                   ; compare memory and accumulator
  ========< 0x00005673      d003           bne 0x4ed108                ; branch on result not zero
  ========< 0x00005675      4c1057         jmp 0x5710                  ; jump to new location
  --------> 0x00005678      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
  |||||||   0x0000567a      204456         jsr 0x5644                  ; jump to new location saving return address
  ========< 0x0000567d      4c1057         jmp 0x5710                  ; jump to new location
  --------> 0x00005680      be204a         ldx 0x4a20,y                ; load index x with memory
  ========< 0x00005683      d003           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005685      4c1057         jmp 0x5710                  ; jump to new location
  --------> 0x00005688      e01d           cpx #0x1d                   ; compare memory and index x
  ========< 0x0000568a      f0f9           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000568c      b9004a         lda 0x4a00,y                ; load accumulator with memory
  |||||||   0x0000568f      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x00005691      c9e8           cmp #0xe8                   ; compare memory and accumulator
  ========< 0x00005693      f07b           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005695      c9b4           cmp #0xb4                   ; compare memory and accumulator
  ========< 0x00005697      f077           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005699      aa             tax                         ; transfer accumulator to index x
  |||||||   0x0000569a      e0a8           cpx #0xa8                   ; compare memory and index x
  ========< 0x0000569c      f00a           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000569e      e05c           cpx #0x5c                   ; compare memory and index x
  ========< 0x000056a0      f006           beq 0x4ed108                ; branch on result zero
  |||||||   0x000056a2      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000056a5      6a             ror a                       ; rotate one bit right (memory or accumulator)
  ========< 0x000056a6      9068           bcc 0x4ed108                ; branch on carry clear
  --------> 0x000056a8      8a             txa                         ; transfer index x to accumulator
  |||||||   0x000056a9      e934           sbc #0x34                   ; subtract memory from accumulator with borrow
  ========< 0x000056ab      9063           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000056ad      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000056ae      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000056af      aa             tax                         ; transfer accumulator to index x
  |||||||   0x000056b0      18             clc                         ; clear carry flag
  |||||||   0x000056b1      bd1156         lda 0x5611,x                ; load accumulator with memory
  |||||||   0x000056b4      69c4           adc #0xc4                   ; add memory to accumulator with carry
  |||||||   0x000056b6      8dc956         sta 0x56c9                  ; store accumulator in memory
  |||||||   0x000056b9      a955           lda #0x55                   ; load accumulator with memory
  |||||||   0x000056bb      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x000056bd      8dca56         sta 0x56ca                  ; store accumulator in memory
  |||||||   0x000056c0      b90042         lda 0x4200,y                ; load accumulator with memory
  |||||||   0x000056c3      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000056c4      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000056c5      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000056c6      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000056c7      aa             tax                         ; transfer accumulator to index x
  --------> 0x000056c8      bdffff         lda 0xffff,x                ; load accumulator with memory
  ========< 0x000056cb      f051           beq 0x4ed108                ; branch on result zero
  |||||||   0x000056cd      4980           eor #0x80                   ; "exclusive-or" memory with accumulator
  ========< 0x000056cf      1039           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000056d1      c986           cmp #0x86                   ; compare memory and accumulator
  ========< 0x000056d3      f042           beq 0x4ed108                ; branch on result zero
  |||||||   0x000056d5      c987           cmp #0x87                   ; compare memory and accumulator
  ========< 0x000056d7      f04d           beq 0x4ed108                ; branch on result zero
  |||||||   0x000056d9      c985           cmp #0x85                   ; compare memory and accumulator
  ========< 0x000056db      9017           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000056dd      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000056e0      2903           and #0x03                   ; "and" memory with accumulator
  ========< 0x000056e2      d03c           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000056e4      b9004a         lda 0x4a00,y                ; load accumulator with memory
  |||||||   0x000056e7      99204a         sta 0x4a20,y                ; store accumulator in memory
  |||||||   0x000056ea      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x000056ec      c95c           cmp #0x5c                   ; compare memory and accumulator
  ========< 0x000056ee      f014           beq 0x4ed108                ; branch on result zero
  |||||||   0x000056f0      a906           lda #0x06                   ; load accumulator with memory
  ========< 0x000056f2      d016           bne 0x4ed108                ; branch on result not zero
  --------> 0x000056f4      e980           sbc #0x80                   ; subtract memory from accumulator with borrow
  |||||||   0x000056f6      18             clc                         ; clear carry flag
  |||||||   0x000056f7      8d0057         sta 0x5700                  ; store accumulator in memory
  |||||||   0x000056fa      b9004a         lda 0x4a00,y                ; load accumulator with memory
  |||||||   0x000056fd      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x000056ff      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x00005701      99204a         sta 0x4a20,y                ; store accumulator in memory
  --------> 0x00005704      205256         jsr 0x5652                  ; jump to new location saving return address
  ========< 0x00005707      4c1057         jmp 0x5710                  ; jump to new location
  --------> 0x0000570a      204456         jsr 0x5644                  ; jump to new location saving return address
  |||||||   0x0000570d      205256         jsr 0x5652                  ; jump to new location saving return address
  --------> 0x00005710      88             dey                         ; decrement index y by one
  ========< 0x00005711      3003           bmi 0x4ed108                ; branch on result minus
  |||`====< 0x00005713      4c6c56         jmp 0x566c                  ; jump to new location
  --------> 0x00005716      60             rts                         ; return from subroutine
  --------> 0x00005717      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  ||| |||   0x0000571a      2903           and #0x03                   ; "and" memory with accumulator
  |||,====< 0x0000571c      f002           beq 0x4ed108                ; branch on result zero
  --------> 0x0000571e      a2ff           ldx #0xff                   ; load index x with memory
  ---`----> 0x00005720      205256         jsr 0x5652                  ; jump to new location saving return address
  ========< 0x00005723      4cc856         jmp 0x56c8                  ; jump to new location
  --------> 0x00005726      a201           ldx #0x01                   ; load index x with memory
  ========< 0x00005728      d0f6           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x0000572a      00             brk                         ; force break
  ||| |||   0x0000572b      a980           lda #0x80                   ; load accumulator with memory
  ||| |||   0x0000572d      a2da           ldx #0xda                   ; load index x with memory
  ||| |||   0x0000572f      206d57         jsr 0x576d                  ; jump to new location saving return address
  ||| |||   0x00005732      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005734      a2db           ldx #0xdb                   ; load index x with memory
  ||| |||   0x00005736      206d57         jsr 0x576d                  ; jump to new location saving return address
  ||| |||   0x00005739      ee2a57         inc 0x572a                  ; increment memory by one
  ||| |||   0x0000573c      ad2a57         lda 0x572a                  ; load accumulator with memory
  ||| |||   0x0000573f      2903           and #0x03                   ; "and" memory with accumulator
  |||,====< 0x00005741      d00e           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005743      a940           lda #0x40                   ; load accumulator with memory
  |||||||   0x00005745      a2df           ldx #0xdf                   ; load index x with memory
  |||||||   0x00005747      20bc57         jsr 0x57bc                  ; jump to new location saving return address
  |||||||   0x0000574a      a980           lda #0x80                   ; load accumulator with memory
  |||||||   0x0000574c      a2df           ldx #0xdf                   ; load index x with memory
  |||||||   0x0000574e      20bc57         jsr 0x57bc                  ; jump to new location saving return address
  |||`----> 0x00005751      ad2a57         lda 0x572a                  ; load accumulator with memory
  ||| |||   0x00005754      6a             ror a                       ; rotate one bit right (memory or accumulator)
  |||,====< 0x00005755      b015           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005757      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00005759      a2d0           ldx #0xd0                   ; load index x with memory
  |||||||   0x0000575b      20bc57         jsr 0x57bc                  ; jump to new location saving return address
  |||||||   0x0000575e      a940           lda #0x40                   ; load accumulator with memory
  |||||||   0x00005760      a2d0           ldx #0xd0                   ; load index x with memory
  |||||||   0x00005762      20bc57         jsr 0x57bc                  ; jump to new location saving return address
  |||||||   0x00005765      a980           lda #0x80                   ; load accumulator with memory
  |||||||   0x00005767      a2dd           ldx #0xdd                   ; load index x with memory
  ========< 0x00005769      4c6d57         jmp 0x576d                  ; jump to new location
  |||`----> 0x0000576c      60             rts                         ; return from subroutine
  --------> 0x0000576d      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x0000576f      86fd           stx 0xfd                    ; store index x in memory
  ||| |||   0x00005771      a000           ldy #0x00                   ; load index y with memory
  |||.----> 0x00005773      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x00005775      48             pha                         ; push accumulator on stack
  |||||||   0x00005776      20ac57         jsr 0x57ac                  ; jump to new location saving return address
  |||||||   0x00005779      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x0000577b      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x0000577e      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x00005780      20a957         jsr 0x57a9                  ; jump to new location saving return address
  |||||||   0x00005783      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x00005785      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x00005788      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x0000578a      20a957         jsr 0x57a9                  ; jump to new location saving return address
  |||||||   0x0000578d      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x0000578f      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x00005792      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x00005794      20ac57         jsr 0x57ac                  ; jump to new location saving return address
  |||||||   0x00005797      68             pla                         ; pull accumulator from stack
  |||||||   0x00005798      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x0000579a      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x0000579d      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x000057a0      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x000057a3      c8             iny                         ; increment index y by one
  |||||||   0x000057a4      c020           cpy #0x20                   ; compare memory and index y
  |||`====< 0x000057a6      90cb           bcc 0x4ed108                ; branch on carry clear
  ||| |||   0x000057a8      60             rts                         ; return from subroutine
  ||| |||   0x000057a9      20ac57         jsr 0x57ac                  ; jump to new location saving return address
  ||| |||   0x000057ac      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x000057ad      98             tya                         ; transfer index y to accumulator
  ||| |||   0x000057ae      18             clc                         ; clear carry flag
  ||| |||   0x000057af      6920           adc #0x20                   ; add memory to accumulator with carry
  ||| |||   0x000057b1      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x000057b2      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x000057b3      60             rts                         ; return from subroutine
  ||| |||   0x000057b4      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x000057b5      98             tya                         ; transfer index y to accumulator
  ||| |||   0x000057b6      38             sec                         ; set carry flag
  ||| |||   0x000057b7      e920           sbc #0x20                   ; subtract memory from accumulator with borrow
  ||| |||   0x000057b9      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x000057ba      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x000057bb      60             rts                         ; return from subroutine
  ||| |||   0x000057bc      85fc           sta 0xfc                    ; store accumulator in memory
  ||| |||   0x000057be      86fd           stx 0xfd                    ; store index x in memory
  ||| |||   0x000057c0      a000           ldy #0x00                   ; load index y with memory
  |||.----> 0x000057c2      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x000057c4      48             pha                         ; push accumulator on stack
  |||||||   0x000057c5      20ac57         jsr 0x57ac                  ; jump to new location saving return address
  |||||||   0x000057c8      b1fc           lda (0xfc),y                ; load accumulator with memory
  |||||||   0x000057ca      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x000057cd      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x000057cf      20ac57         jsr 0x57ac                  ; jump to new location saving return address
  |||||||   0x000057d2      68             pla                         ; pull accumulator from stack
  |||||||   0x000057d3      91fc           sta (0xfc),y                ; store accumulator in memory
  |||||||   0x000057d5      20b457         jsr 0x57b4                  ; jump to new location saving return address
  |||||||   0x000057d8      c8             iny                         ; increment index y by one
  |||||||   0x000057d9      c020           cpy #0x20                   ; compare memory and index y
  |||`====< 0x000057db      90e5           bcc 0x4ed108                ; branch on carry clear
  ||| |||   0x000057dd      60             rts                         ; return from subroutine
  ||| |||   0x000057de      a51e           lda 0x1e                    ; load accumulator with memory
  ||| |||   0x000057e0      cd5a58         cmp 0x585a                  ; compare memory and accumulator
  |||,====< 0x000057e3      d008           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000057e5      a51f           lda 0x1f                    ; load accumulator with memory
  |||||||   0x000057e7      cd5b58         cmp 0x585b                  ; compare memory and accumulator
  ========< 0x000057ea      d001           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000057ec      60             rts                         ; return from subroutine
  ---`----> 0x000057ed      a51e           lda 0x1e                    ; load accumulator with memory
  ||| |||   0x000057ef      8d5a58         sta 0x585a                  ; store accumulator in memory
  ||| |||   0x000057f2      203563         jsr 0x6335                  ; jump to new location saving return address
  ||| |||   0x000057f5      c90c           cmp #0x0c                   ; compare memory and accumulator
  |||,====< 0x000057f7      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000057f9      e90c           sbc #0x0c                   ; subtract memory from accumulator with borrow
  |||`----> 0x000057fb      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x000057fc      bd5c58         lda 0x585c,x                ; load accumulator with memory
  ||| |||   0x000057ff      48             pha                         ; push accumulator on stack
  ||| |||   0x00005800      a51f           lda 0x1f                    ; load accumulator with memory
  ||| |||   0x00005802      8d5b58         sta 0x585b                  ; store accumulator in memory
  ||| |||   0x00005805      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ||| |||   0x00005806      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ||| |||   0x00005807      4a             lsr a                       ; shift right one bit (memory or accumulator)
  ||| |||   0x00005808      6900           adc #0x00                   ; add memory to accumulator with carry
  ||| |||   0x0000580a      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x0000580b      b95c58         lda 0x585c,y                ; load accumulator with memory
  ||| |||   0x0000580e      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x0000580f      68             pla                         ; pull accumulator from stack
  ||| |||   0x00005810      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x00005811      bd6858         lda 0x5868,x                ; load accumulator with memory
  ||| |||   0x00005814      196858         ora 0x5868,y                ; "or" memory with accumulator
  ||| |||   0x00005817      8d42df         sta 0xdf42                  ; store accumulator in memory
  ||| |||   0x0000581a      8d62df         sta 0xdf62                  ; store accumulator in memory
  ||| |||   0x0000581d      bd7058         lda 0x5870,x                ; load accumulator with memory
  ||| |||   0x00005820      197058         ora 0x5870,y                ; "or" memory with accumulator
  ||| |||   0x00005823      8d4adf         sta 0xdf4a                  ; store accumulator in memory
  ||| |||   0x00005826      8d6adf         sta 0xdf6a                  ; store accumulator in memory
  ||| |||   0x00005829      bd7858         lda 0x5878,x                ; load accumulator with memory
  ||| |||   0x0000582c      197858         ora 0x5878,y                ; "or" memory with accumulator
  ||| |||   0x0000582f      8d43df         sta 0xdf43                  ; store accumulator in memory
  ||| |||   0x00005832      8d63df         sta 0xdf63                  ; store accumulator in memory
  ||| |||   0x00005835      bd8058         lda 0x5880,x                ; load accumulator with memory
  ||| |||   0x00005838      198058         ora 0x5880,y                ; "or" memory with accumulator
  ||| |||   0x0000583b      8d4bdf         sta 0xdf4b                  ; store accumulator in memory
  ||| |||   0x0000583e      8d6bdf         sta 0xdf6b                  ; store accumulator in memory
  ||| |||   0x00005841      bd8858         lda 0x5888,x                ; load accumulator with memory
  ||| |||   0x00005844      198858         ora 0x5888,y                ; "or" memory with accumulator
  ||| |||   0x00005847      8d44df         sta 0xdf44                  ; store accumulator in memory
  ||| |||   0x0000584a      8d64df         sta 0xdf64                  ; store accumulator in memory
  ||| |||   0x0000584d      bd9058         lda 0x5890,x                ; load accumulator with memory
  ||| |||   0x00005850      199058         ora 0x5890,y                ; "or" memory with accumulator
  ||| |||   0x00005853      8d4cdf         sta 0xdf4c                  ; store accumulator in memory
  ||| |||   0x00005856      8d6cdf         sta 0xdf6c                  ; store accumulator in memory
  ||| |||   0x00005859      60             rts                         ; return from subroutine
  ||| |||   0x0000585a      00             brk                         ; force break
  ||| |||   0x0000585b      00             brk                         ; force break
  ||| |||   0x0000585c      00             brk                         ; force break
  ||| |||   0x0000585d      0101           ora (0x01,x)                ; "or" memory with accumulator
  ||| |||   0x0000585f      02             hlt
  ||| |||   0x00005860      0303           slo (0x03,x)
  ||| |||   0x00005862      0405           nop 0x05                    ; no operation
  ||| |||   0x00005864      0506           ora 0x06                    ; "or" memory with accumulator
  ||| |||   0x00005866      0707           slo 0x07
  ||| |||   0x00005868      18             clc                         ; clear carry flag
  ||| |||   0x00005869      18             clc                         ; clear carry flag
  ||| |||   0x0000586a      18             clc                         ; clear carry flag
  ||| |||   0x0000586b      18             clc                         ; clear carry flag
  ||| |||   0x0000586c      18             clc                         ; clear carry flag
  ||| |||   0x0000586d      18             clc                         ; clear carry flag
  ||| |||   0x0000586e      18             clc                         ; clear carry flag
  ||| |||   0x0000586f      198c4c         ora 0x4c8c,y                ; "or" memory with accumulator
  ||| |||   0x00005872      0c0c0c         nop 0x0c0c                  ; no operation
  ||| |||   0x00005875      0c0c0c         nop 0x0c0c                  ; no operation
  ||| |||   0x00005878      18             clc                         ; clear carry flag
  ||| |||   0x00005879      18             clc                         ; clear carry flag
  ||| |||   0x0000587a      18             clc                         ; clear carry flag
  ||| |||   0x0000587b      18             clc                         ; clear carry flag
  ||| |||   0x0000587c      18             clc                         ; clear carry flag
  ||| |||   0x0000587d      18             clc                         ; clear carry flag
  ||| |||   0x0000587e      19188c         ora 0x8c18,y                ; "or" memory with accumulator
  ||| |||   0x00005881      8ccc8c         sty 0x8ccc                  ; store index y in memory
  ||| |||   0x00005884      8c8c8c         sty 0x8c8c                  ; store index y in memory
  ||| |||   0x00005887      8c1818         sty 0x1818                  ; store index y in memory
  ||| |||   0x0000588a      18             clc                         ; clear carry flag
  ||| |||   0x0000588b      18             clc                         ; clear carry flag
  ||| |||   0x0000588c      18             clc                         ; clear carry flag
  ||| |||   0x0000588d      191818         ora 0x1818,y                ; "or" memory with accumulator
  ||| |||   0x00005890      0c0c0c         nop 0x0c0c                  ; no operation
  ||`=====< 0x00005893      4c8c0c         jmp 0x0c8c                  ; jump to new location
  ||  |||   0x00005896      0c0c20         nop 0x200c                  ; no operation
  ||  |||   0x00005899      705a           bvs 0x4ed108                ; branch on overflow set
  ||  |||   0x0000589b      20c24e         jsr 0x4ec2                  ; jump to new location saving return address
  || ,====< 0x0000589e      4c895a         jmp 0x5a89                  ; jump to new location
  || ||||   0x000058a1      c938           cmp #0x38                   ; compare memory and accumulator
  || ||||   0x000058a3      2418           bit 0x18                    ; test bits in memory with accumulator
  || ||||   0x000058a5      08             php                         ; push processor status on stack
  || ||||   0x000058a6      98             tya                         ; transfer index y to accumulator
  || ||||   0x000058a7      48             pha                         ; push accumulator on stack
  || ||||   0x000058a8      8edb58         stx 0x58db                  ; store index x in memory
  || ||||   0x000058ab      a900           lda #0x00                   ; load accumulator with memory
  || ||||   0x000058ad      0edb58         asl 0x58db                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058b0      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058b1      0edb58         asl 0x58db                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058b4      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058b5      0edb58         asl 0x58db                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058b8      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058b9      0edb58         asl 0x58db                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058bc      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058bd      0edb58         asl 0x58db                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058c0      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058c1      8ddc58         sta 0x58dc                  ; store accumulator in memory
  || ||||   0x000058c4      a2c0           ldx #0xc0                   ; load index x with memory
  || ||||   0x000058c6      68             pla                         ; pull accumulator from stack
  || ||||   0x000058c7      28             plp                         ; pull processor status from stack
  || ||||   0x000058c8      08             php                         ; push processor status on stack
  || ||||   0x000058c9      48             pha                         ; push accumulator on stack
  ||,=====< 0x000058ca      b002           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000058cc      a2e0           ldx #0xe0                   ; load index x with memory
  ||`-----> 0x000058ce      8a             txa                         ; transfer index x to accumulator
  || ||||   0x000058cf      0ddc58         ora 0x58dc                  ; "or" memory with accumulator
  || ||||   0x000058d2      8ddc58         sta 0x58dc                  ; store accumulator in memory
  || ||||   0x000058d5      20066c         jsr 0x6c06                  ; jump to new location saving return address
  || ||||   0x000058d8      a21f           ldx #0x1f                   ; load index x with memory
  ||.-----> 0x000058da      bdffff         lda 0xffff,x                ; load accumulator with memory
  |||||||   0x000058dd      9dc0e2         sta 0xe2c0,x                ; store accumulator in memory
  |||||||   0x000058e0      ca             dex                         ; decrement index x by one
  ||`=====< 0x000058e1      10f7           bpl 0x4ed108                ; branch on result plus
  || ||||   0x000058e3      20036c         jsr 0x6c03                  ; jump to new location saving return address
  || ||||   0x000058e6      20af4c         jsr 0x4caf                  ; jump to new location saving return address
  || ||||   0x000058e9      68             pla                         ; pull accumulator from stack
  || ||||   0x000058ea      aa             tax                         ; transfer accumulator to index x
  || ||||   0x000058eb      8e3859         stx 0x5938                  ; store index x in memory
  || ||||   0x000058ee      a900           lda #0x00                   ; load accumulator with memory
  || ||||   0x000058f0      0e3859         asl 0x5938                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058f3      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058f4      0e3859         asl 0x5938                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058f7      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058f8      0e3859         asl 0x5938                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058fb      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x000058fc      0e3859         asl 0x5938                  ; shift left one bit (memory or accumulator)
  || ||||   0x000058ff      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x00005900      0e3859         asl 0x5938                  ; shift left one bit (memory or accumulator)
  || ||||   0x00005903      2a             rol a                       ; rotate one bit left (memory or accumulator)
  || ||||   0x00005904      8d3959         sta 0x5939                  ; store accumulator in memory
  || ||||   0x00005907      a9e0           lda #0xe0                   ; load accumulator with memory
  || ||||   0x00005909      28             plp                         ; pull processor status from stack
  ||,=====< 0x0000590a      b002           bcs 0x4ed108                ; branch on carry set
  |||||||   0x0000590c      a9c0           lda #0xc0                   ; load accumulator with memory
  ||`-----> 0x0000590e      0d3959         ora 0x5939                  ; "or" memory with accumulator
  || ||||   0x00005911      8d3959         sta 0x5939                  ; store accumulator in memory
  || ||||   0x00005914      a900           lda #0x00                   ; load accumulator with memory
  || ||||   0x00005916      8d5e59         sta 0x595e                  ; store accumulator in memory
  ||.-----> 0x00005919      4ea158         lsr 0x58a1                  ; shift right one bit (memory or accumulator)
  |||||||   0x0000591c      ada158         lda 0x58a1                  ; load accumulator with memory
  ========< 0x0000591f      9005           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005921      49b8           eor #0xb8                   ; "exclusive-or" memory with accumulator
  |||||||   0x00005923      8da158         sta 0x58a1                  ; store accumulator in memory
  --------> 0x00005926      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00005927      291f           and #0x1f                   ; "and" memory with accumulator
  |||||||   0x00005929      aa             tax                         ; transfer accumulator to index x
  |||||||   0x0000592a      98             tya                         ; transfer index y to accumulator
  |||||||   0x0000592b      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000592c      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000592d      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000592e      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x0000592f      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005930      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00005931      20066c         jsr 0x6c06                  ; jump to new location saving return address
  |||||||   0x00005934      b99c6a         lda 0x6a9c,y                ; load accumulator with memory
  |||||||   0x00005937      3dffff         and 0xffff,x                ; "and" memory with accumulator
  ========< 0x0000593a      d00b           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000593c      b99c6a         lda 0x6a9c,y                ; load accumulator with memory
  |||||||   0x0000593f      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
  |||||||   0x00005941      3dc0e2         and 0xe2c0,x                ; "and" memory with accumulator
  ========< 0x00005944      4c4a59         jmp 0x594a                  ; jump to new location
  --------> 0x00005947      1dc0e2         ora 0xe2c0,x                ; "or" memory with accumulator
  --------> 0x0000594a      9dc0e2         sta 0xe2c0,x                ; store accumulator in memory
  |||||||   0x0000594d      ce5e59         dec 0x595e                  ; decrement memory by one
  |||||||   0x00005950      ad5e59         lda 0x595e                  ; load accumulator with memory
  |||||||   0x00005953      290f           and #0x0f                   ; "and" memory with accumulator
  ========< 0x00005955      d006           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005957      20af4c         jsr 0x4caf                  ; jump to new location saving return address
  |||||||   0x0000595a      20036c         jsr 0x6c03                  ; jump to new location saving return address
  --------> 0x0000595d      a900           lda #0x00                   ; load accumulator with memory
  ||`=====< 0x0000595f      d0b8           bne 0x4ed108                ; branch on result not zero
  ||,=====< 0x00005961      4c036c         jmp 0x6c03                  ; jump to new location
  |||||||   0x00005964      a61e           ldx 0x1e                    ; load index x with memory
  |||||||   0x00005966      e020           cpx #0x20                   ; compare memory and index x
  ========< 0x00005968      b004           bcs 0x4ed108                ; branch on carry set
  |||||||   0x0000596a      e005           cpx #0x05                   ; compare memory and index x
  ========< 0x0000596c      b021           bcs 0x4ed108                ; branch on carry set
  --------> 0x0000596e      20bc59         jsr 0x59bc                  ; jump to new location saving return address
  |||||||   0x00005971      a007           ldy #0x07                   ; load index y with memory
  --------> 0x00005973      98             tya                         ; transfer index y to accumulator
  |||||||   0x00005974      48             pha                         ; push accumulator on stack
  |||||||   0x00005975      20095a         jsr 0x5a09                  ; jump to new location saving return address
  ========< 0x00005978      900f           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000597a      b98012         lda 0x1280,y                ; load accumulator with memory
  |||||||   0x0000597d      be8812         ldx 0x1288,y                ; load index x with memory
  |||||||   0x00005980      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00005981      208f51         jsr 0x518f                  ; jump to new location saving return address
  |||||||   0x00005984      a9dc           lda #0xdc                   ; load accumulator with memory
  |||||||   0x00005986      20ff59         jsr 0x59ff                  ; jump to new location saving return address
  --------> 0x00005989      68             pla                         ; pull accumulator from stack
  |||||||   0x0000598a      a8             tay                         ; transfer accumulator to index y
  |||||||   0x0000598b      88             dey                         ; decrement index y by one
  ========< 0x0000598c      10e5           bpl 0x4ed108                ; branch on result plus
  |||||||   0x0000598e      60             rts                         ; return from subroutine
  --------> 0x0000598f      20b459         jsr 0x59b4                  ; jump to new location saving return address
  |||||||   0x00005992      a5a6           lda 0xa6                    ; load accumulator with memory
  ========< 0x00005994      d01d           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005996      a007           ldy #0x07                   ; load index y with memory
  --------> 0x00005998      98             tya                         ; transfer index y to accumulator
  |||||||   0x00005999      48             pha                         ; push accumulator on stack
  |||||||   0x0000599a      20095a         jsr 0x5a09                  ; jump to new location saving return address
  ========< 0x0000599d      900f           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000599f      b98012         lda 0x1280,y                ; load accumulator with memory
  |||||||   0x000059a2      be8812         ldx 0x1288,y                ; load index x with memory
  |||||||   0x000059a5      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000059a6      208f51         jsr 0x518f                  ; jump to new location saving return address
  |||||||   0x000059a9      a905           lda #0x05                   ; load accumulator with memory
  |||||||   0x000059ab      20ff59         jsr 0x59ff                  ; jump to new location saving return address
  --------> 0x000059ae      68             pla                         ; pull accumulator from stack
  |||||||   0x000059af      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000059b0      88             dey                         ; decrement index y by one
  ========< 0x000059b1      10e5           bpl 0x4ed108                ; branch on result plus
  --------> 0x000059b3      60             rts                         ; return from subroutine
  --------> 0x000059b4      a6a6           ldx 0xa6                    ; load index x with memory
  ========< 0x000059b6      f00c           beq 0x4ed108                ; branch on result zero
  |||||||   0x000059b8      c6a6           dec 0xa6                    ; decrement memory by one
  ========< 0x000059ba      1008           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000059bc      a6a6           ldx 0xa6                    ; load index x with memory
  |||||||   0x000059be      e010           cpx #0x10                   ; compare memory and index x
  ========< 0x000059c0      f002           beq 0x4ed108                ; branch on result zero
  |||||||   0x000059c2      e6a6           inc 0xa6                    ; increment memory by one
  --------> 0x000059c4      20066c         jsr 0x6c06                  ; jump to new location saving return address
  |||||||   0x000059c7      a21f           ldx #0x1f                   ; load index x with memory
  --------> 0x000059c9      bda0c0         lda 0xc0a0,x                ; load accumulator with memory
  |||||||   0x000059cc      9d80db         sta 0xdb80,x                ; store accumulator in memory
  |||||||   0x000059cf      ca             dex                         ; decrement index x by one
  ========< 0x000059d0      10f7           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000059d2      a017           ldy #0x17                   ; load index y with memory
  |||||||   0x000059d4      a2ff           ldx #0xff                   ; load index x with memory
  --------> 0x000059d6      e8             inx                         ; increment index x by one
  |||||||   0x000059d7      e4a6           cpx 0xa6                    ; compare memory and index x
  ========< 0x000059d9      f021           beq 0x4ed108                ; branch on result zero
  |||||||   0x000059db      c00f           cpy #0x0f                   ; compare memory and index y
  ========< 0x000059dd      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000059df      a007           ldy #0x07                   ; load index y with memory
  --------> 0x000059e1      a955           lda #0x55                   ; load accumulator with memory
  |||||||   0x000059e3      85fe           sta 0xfe                    ; store accumulator in memory
  |||||||   0x000059e5      a9d5           lda #0xd5                   ; load accumulator with memory
  |||||||   0x000059e7      e8             inx                         ; increment index x by one
  |||||||   0x000059e8      e4a6           cpx 0xa6                    ; compare memory and index x
  |||||||   0x000059ea      ca             dex                         ; decrement index x by one
  ========< 0x000059eb      9004           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000059ed      a9ff           lda #0xff                   ; load accumulator with memory
  |||||||   0x000059ef      85fe           sta 0xfe                    ; store accumulator in memory
  --------> 0x000059f1      9980db         sta 0xdb80,y                ; store accumulator in memory
  |||||||   0x000059f4      a5fe           lda 0xfe                    ; load accumulator with memory
  |||||||   0x000059f6      9988db         sta 0xdb88,y                ; store accumulator in memory
  |||||||   0x000059f9      88             dey                         ; decrement index y by one
  ========< 0x000059fa      10da           bpl 0x4ed108                ; branch on result plus
  ========< 0x000059fc      4c036c         jmp 0x6c03                  ; jump to new location
  |||||||   0x000059ff      d1fc           cmp (0xfc),y                ; compare memory and accumulator
  |||||||   0x00005a01      91fc           sta (0xfc),y                ; store accumulator in memory
  ========< 0x00005a03      f003           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005a05      201169         jsr 0x6911                  ; jump to new location saving return address
  --------> 0x00005a08      60             rts                         ; return from subroutine
  |||||||   0x00005a09      b99812         lda 0x1298,y                ; load accumulator with memory
  |||||||   0x00005a0c      c509           cmp 0x09                    ; compare memory and accumulator
  ========< 0x00005a0e      d023           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005a10      b99012         lda 0x1290,y                ; load accumulator with memory
  |||||||   0x00005a13      c50a           cmp 0x0a                    ; compare memory and accumulator
  ========< 0x00005a15      d01c           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005a17      aa             tax                         ; transfer accumulator to index x
  ========< 0x00005a18      d01b           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005a1a      b98012         lda 0x1280,y                ; load accumulator with memory
  |||||||   0x00005a1d      a604           ldx 0x04                    ; load index x with memory
  |||||||   0x00005a1f      fd0252         sbc 0x5202,x                ; subtract memory from accumulator with borrow
  |||||||   0x00005a22      c920           cmp #0x20                   ; compare memory and accumulator
  ========< 0x00005a24      b00d           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005a26      b98812         lda 0x1288,y                ; load accumulator with memory
  |||||||   0x00005a29      a605           ldx 0x05                    ; load index x with memory
  |||||||   0x00005a2b      38             sec                         ; set carry flag
  |||||||   0x00005a2c      fd0252         sbc 0x5202,x                ; subtract memory from accumulator with borrow
  |||||||   0x00005a2f      c920           cmp #0x20                   ; compare memory and accumulator
  ========< 0x00005a31      9002           bcc 0x4ed108                ; branch on carry clear
  --------> 0x00005a33      18             clc                         ; clear carry flag
  |||||||   0x00005a34      60             rts                         ; return from subroutine
  --------> 0x00005a35      38             sec                         ; set carry flag
  |||||||   0x00005a36      60             rts                         ; return from subroutine
  --------> 0x00005a37      20705a         jsr 0x5a70                  ; jump to new location saving return address
  |||||||   0x00005a3a      207a5a         jsr 0x5a7a                  ; jump to new location saving return address
  ========< 0x00005a3d      4c895a         jmp 0x5a89                  ; jump to new location
  --------> 0x00005a40      48             pha                         ; push accumulator on stack
  |||||||   0x00005a41      48             pha                         ; push accumulator on stack
  |||||||   0x00005a42      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005a43      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005a44      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005a45      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005a46      204f5a         jsr 0x5a4f                  ; jump to new location saving return address
  |||||||   0x00005a49      68             pla                         ; pull accumulator from stack
  |||||||   0x00005a4a      204f5a         jsr 0x5a4f                  ; jump to new location saving return address
  |||||||   0x00005a4d      68             pla                         ; pull accumulator from stack
  |||||||   0x00005a4e      60             rts                         ; return from subroutine
  --------> 0x00005a4f      290f           and #0x0f                   ; "and" memory with accumulator
  |||||||   0x00005a51      c90a           cmp #0x0a                   ; compare memory and accumulator
  ========< 0x00005a53      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005a55      6906           adc #0x06                   ; add memory to accumulator with carry
  --------> 0x00005a57      69b0           adc #0xb0                   ; add memory to accumulator with carry

0x4c03:
  --------> 0x00005a59      20705a         jsr 0x5a70                  ; jump to new location saving return address
  |||||||   0x00005a5c      c98d           cmp #0x8d                   ; compare memory and accumulator
  ========< 0x00005a5e      f01a           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005a60      a6c9           ldx 0xc9                    ; load index x with memory
  |||||||   0x00005a62      e028           cpx #0x28                   ; compare memory and index x
  ========< 0x00005a64      9003           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005a66      207a5a         jsr 0x5a7a                  ; jump to new location saving return address
  --------> 0x00005a69      20145b         jsr 0x5b14                  ; jump to new location saving return address
  |||||||   0x00005a6c      e6c9           inc 0xc9                    ; increment memory by one
  ========< 0x00005a6e      d019           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005a70      8e8a5a         stx 0x5a8a                  ; store index x in memory
  |||||||   0x00005a73      8c8c5a         sty 0x5a8c                  ; store index y in memory
  |||||||   0x00005a76      8d8e5a         sta 0x5a8e                  ; store accumulator in memory
  |||||||   0x00005a79      60             rts                         ; return from subroutine

  --------> 0x00005a7a      a918           lda #0x18                   ; load accumulator with memory
  |||||||   0x00005a7c      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00005a7e      e6ca           inc 0xca                    ; increment memory by one
  |||||||   0x00005a80      a5ca           lda 0xca                    ; load accumulator with memory
  |||||||   0x00005a82      c918           cmp #0x18                   ; compare memory and accumulator
  ========< 0x00005a84      9003           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005a86      20905a         jsr 0x5a90                  ; jump to new location saving return address
  ---`----> 0x00005a89      a200           ldx #0x00        ; value can be changed
  ||| |||   0x00005a8b      a000           ldy #0x00        ; value can be changed
  ||| |||   0x00005a8d      a900           lda #0x00        ; value can be changed
  ||| |||   0x00005a8f      60             rts                         ; return from subroutine

  ||| |||   0x00005a90      c6ca           dec 0xca                    ; decrement memory by one
  ||| |||   0x00005a92      a672           ldx 0x72                    ; load index x with memory
  ||| |||   0x00005a94      18             clc                         ; clear carry flag
  |||.----> 0x00005a95      bd0014         lda 0x1400,x                ; load accumulator with memory
  |||||||   0x00005a98      69c0           adc #0xc0                   ; add memory to accumulator with carry
  |||||||   0x00005a9a      8def5a         sta 0x5aef                  ; store accumulator in memory
  |||||||   0x00005a9d      bdc014         lda 0x14c0,x                ; load accumulator with memory
  |||||||   0x00005aa0      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x00005aa2      8df05a         sta 0x5af0                  ; store accumulator in memory
  |||||||   0x00005aa5      bd0814         lda 0x1408,x                ; load accumulator with memory
  |||||||   0x00005aa8      69c0           adc #0xc0                   ; add memory to accumulator with carry
  |||||||   0x00005aaa      8dec5a         sta 0x5aec                  ; store accumulator in memory
  |||||||   0x00005aad      bdc814         lda 0x14c8,x                ; load accumulator with memory
  |||||||   0x00005ab0      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x00005ab2      8ded5a         sta 0x5aed                  ; store accumulator in memory
  |||||||   0x00005ab5      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00005ab6      48             pha                         ; push accumulator on stack
  |||||||   0x00005ab7      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005ab8      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005ab9      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005aba      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005abb      bdd003         lda 0x03d0,x                ; load accumulator with memory
  |||||||   0x00005abe      18             clc                         ; clear carry flag
  |||||||   0x00005abf      6918           adc #0x18                   ; add memory to accumulator with carry
  |||||||   0x00005ac1      8de95a         sta 0x5ae9                  ; store accumulator in memory
  |||||||   0x00005ac4      bde803         lda 0x03e8,x                ; load accumulator with memory
  |||||||   0x00005ac7      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x00005ac9      8dea5a         sta 0x5aea                  ; store accumulator in memory
  |||||||   0x00005acc      bdd103         lda 0x03d1,x                ; load accumulator with memory
  |||||||   0x00005acf      18             clc                         ; clear carry flag
  |||||||   0x00005ad0      6918           adc #0x18                   ; add memory to accumulator with carry
  |||||||   0x00005ad2      8de65a         sta 0x5ae6                  ; store accumulator in memory
  |||||||   0x00005ad5      bde903         lda 0x03e9,x                ; load accumulator with memory
  |||||||   0x00005ad8      6900           adc #0x00                   ; add memory to accumulator with carry
  |||||||   0x00005ada      8de75a         sta 0x5ae7                  ; store accumulator in memory
  |||||||   0x00005add      68             pla                         ; pull accumulator from stack
  |||||||   0x00005ade      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005adf      a07f           ldy #0x7f                   ; load index y with memory
  --------> 0x00005ae1      c010           cpy #0x10                   ; compare memory and index y
  ========< 0x00005ae3      b006           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005ae5      b9ffff         lda 0xffff,y     ; value can be changed
  |||||||   0x00005ae8      99ffff         sta 0xffff,y     ; value can be changed
  --------> 0x00005aeb      b9ffff         lda 0xffff,y     ; value can be changed
  |||||||   0x00005aee      99ffff         sta 0xffff,y     ; value can be changed
  |||||||   0x00005af1      88             dey                         ; decrement index y by one
  ========< 0x00005af2      10ed           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00005af4      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00005af5      18             clc                         ; clear carry flag
  |||||||   0x00005af6      6908           adc #0x08                   ; add memory to accumulator with carry
  |||||||   0x00005af8      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005af9      e0b8           cpx #0xb8                   ; compare memory and index x
  |||`====< 0x00005afb      9098           bcc 0x4ed108                ; branch on carry clear
  ||| |||   0x00005afd      adec5a         lda 0x5aec                  ; load accumulator with memory
  ||| |||   0x00005b00      8d0e5b         sta 0x5b0e                  ; store accumulator in memory
  ||| |||   0x00005b03      aded5a         lda 0x5aed                  ; load accumulator with memory
  ||| |||   0x00005b06      8d0f5b         sta 0x5b0f                  ; store accumulator in memory
  ||| |||   0x00005b09      a07f           ldy #0x7f                   ; load index y with memory
  ||| |||   0x00005b0b      a900           lda #0x00                   ; load accumulator with memory
  |||.----> 0x00005b0d      99ffff         sta 0xffff,y                ; store accumulator in memory
  |||||||   0x00005b10      88             dey                         ; decrement index y by one
  |||`====< 0x00005b11      10fa           bpl 0x4ed108     ; value can be changed
  ||| |||   0x00005b13      60             rts                         ; return from subroutine

0x4c0f:
  --------> 0x00005b14      8ea85b         stx 0x5ba8                  ; store index x in memory
  ||| |||   0x00005b17      8ca95b         sty 0x5ba9                  ; store index y in memory
  ||| |||   0x00005b1a      c920           cmp #0x20                   ; compare memory and accumulator
  |||,====< 0x00005b1c      b00b           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005b1e      48             pha                         ; push accumulator on stack
  |||||||   0x00005b1f      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x00005b20      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005b21      bd985b         lda 0x5b98,x                ; load accumulator with memory
  |||||||   0x00005b24      8d885b         sta 0x5b88                  ; store accumulator in memory
  |||||||   0x00005b27      68             pla                         ; pull accumulator from stack
  |||||||   0x00005b28      aa             tax                         ; transfer accumulator to index x
  |||`----> 0x00005b29      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x00005b2a      a5ca           lda 0xca                    ; load accumulator with memory
  ||| |||   0x00005b2c      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b2d      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b2e      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b2f      a8             tay                         ; transfer accumulator to index y
  ||| |||   0x00005b30      b90014         lda 0x1400,y                ; load accumulator with memory
  ||| |||   0x00005b33      8d6f5b         sta 0x5b6f                  ; store accumulator in memory
  ||| |||   0x00005b36      b9c014         lda 0x14c0,y                ; load accumulator with memory
  ||| |||   0x00005b39      8d705b         sta 0x5b70                  ; store accumulator in memory
  ||| |||   0x00005b3c      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005b3e      8d6b5b         sta 0x5b6b                  ; store accumulator in memory
  ||| |||   0x00005b41      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x00005b42      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b43      2e6b5b         rol 0x5b6b                  ; rotate one bit left (memory or accumulator)
  ||| |||   0x00005b46      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b47      2e6b5b         rol 0x5b6b                  ; rotate one bit left (memory or accumulator)
  ||| |||   0x00005b4a      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b4b      2e6b5b         rol 0x5b6b                  ; rotate one bit left (memory or accumulator)
  ||| |||   0x00005b4e      18             clc                         ; clear carry flag
  ||| |||   0x00005b4f      6980           adc #0x80                   ; add memory to accumulator with carry
  ||| |||   0x00005b51      8d6a5b         sta 0x5b6a                  ; store accumulator in memory
  ||| |||   0x00005b54      ad6b5b         lda 0x5b6b                  ; load accumulator with memory
  ||| |||   0x00005b57      6915           adc #0x15                   ; add memory to accumulator with carry
  ||| |||   0x00005b59      8d6b5b         sta 0x5b6b                  ; store accumulator in memory
  ||| |||   0x00005b5c      a000           ldy #0x00                   ; load index y with memory
  ||| |||   0x00005b5e      a5c9           lda 0xc9                    ; load accumulator with memory
  ||| |||   0x00005b60      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b61      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005b62      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||,====< 0x00005b63      9003           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005b65      ee705b         inc 0x5b70                  ; increment memory by one
  |||`----> 0x00005b68      aa             tax                         ; transfer accumulator to index x
  |||.----> 0x00005b69      b9ffff         lda 0xffff,y                ; load accumulator with memory
  |||||||   0x00005b6c      4537           eor 0x37                    ; "exclusive-or" memory with accumulator
  |||||||   0x00005b6e      9dffff         sta 0xffff,x                ; store accumulator in memory
  |||||||   0x00005b71      e8             inx                         ; increment index x by one
  |||||||   0x00005b72      c8             iny                         ; increment index y by one
  |||||||   0x00005b73      c008           cpy #0x08                   ; compare memory and index y
  |||`====< 0x00005b75      d0f2           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x00005b77      a4ca           ldy 0xca                    ; load index y with memory
  ||| |||   0x00005b79      b9d003         lda 0x03d0,y                ; load accumulator with memory
  ||| |||   0x00005b7c      8d8a5b         sta 0x5b8a                  ; store accumulator in memory
  ||| |||   0x00005b7f      b9e803         lda 0x03e8,y                ; load accumulator with memory
  ||| |||   0x00005b82      8d8b5b         sta 0x5b8b                  ; store accumulator in memory
  ||| |||   0x00005b85      a6c9           ldx 0xc9                    ; load index x with memory
  ||| |||   0x00005b87      a910           lda #0x10                   ; load accumulator with memory
  ||| |||   0x00005b89      9dffff         sta 0xffff,x                ; store accumulator in memory
  ||| |||   0x00005b8c      a910           lda #0x10                   ; load accumulator with memory
  ||| |||   0x00005b8e      8d885b         sta 0x5b88                  ; store accumulator in memory
  ||| |||   0x00005b91      aea85b         ldx 0x5ba8                  ; load index x with memory
  ||| |||   0x00005b94      aca95b         ldy 0x5ba9                  ; load index y with memory
  ||| |||   0x00005b97      60             rts                         ; return from subroutine
  ||| |||   0x00005b98      6161           adc (0x61,x)                ; add memory to accumulator with carry
  ||| |||   0x00005b9a      6161           adc (0x61,x)                ; add memory to accumulator with carry
  ||| |||   0x00005b9c      6161           adc (0x61,x)                ; add memory to accumulator with carry
  ||| |||   0x00005b9e      6170           adc (0x70,x)                ; add memory to accumulator with carry
  ||| |||   0x00005ba0      60             rts                         ; return from subroutine
  ||| |||   0x00005ba1      60             rts                         ; return from subroutine
  ||| |||   0x00005ba2      60             rts                         ; return from subroutine
  ||| |||   0x00005ba3      60             rts                         ; return from subroutine
  |||,====< 0x00005ba4      1070           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00005ba6      60             rts                         ; return from subroutine
  |||||||   0x00005ba7      60             rts                         ; return from subroutine
  |||||||   0x00005ba8      00             brk              ; variable
  |||||||   0x00005ba9      00             brk              ; variable

  --------> 0x00005baa      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  ========< 0x00005bad      4c595a         jmp 0x5a59                  ; jump to new location

0x4c15: 
  --------> 0x00005bb0      8cb85b         sty 0x5bb8                  ; store index y in memory
  |||||||   0x00005bb3      20bb5b         jsr 0x5bbb                  ; jump to new location saving return address
  |||||||   0x00005bb6      08             php                         ; push processor status on stack
  |||||||   0x00005bb7      a000           ldy #0x00                   ; load index y with memory
  |||||||   0x00005bb9      28             plp                         ; pull processor status from stack
  |||||||   0x00005bba      60             rts                         ; return from subroutine
  --------> 0x00005bbb      20df5b         jsr 0x5bdf                  ; jump to new location saving return address
  ========< 0x00005bbe      3017           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00005bc0      20fa5c         jsr 0x5cfa                  ; jump to new location saving return address
  |||||||   0x00005bc3      a980           lda #0x80                   ; load accumulator with memory
  |||||||   0x00005bc5      20145b         jsr 0x5b14                  ; jump to new location saving return address
  |||||||   0x00005bc8      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x00005bcb      a524           lda 0x24                    ; load accumulator with memory
  |||||||   0x00005bcd      4980           eor #0x80                   ; "exclusive-or" memory with accumulator
  ========< 0x00005bcf      100d           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00005bd1      20af4c         jsr 0x4caf                  ; jump to new location saving return address
  ========< 0x00005bd4      4cbb5b         jmp 0x5bbb                  ; jump to new location
  --------> 0x00005bd7      48             pha                         ; push accumulator on stack
  |||||||   0x00005bd8      a9a0           lda #0xa0                   ; load accumulator with memory
  |||||||   0x00005bda      20145b         jsr 0x5b14                  ; jump to new location saving return address
  |||||||   0x00005bdd      68             pla                         ; pull accumulator from stack
  --------> 0x00005bde      60             rts                         ; return from subroutine

0x4c4e: get keyboard or joystick input
  --------> 0x00005bdf      adae4c         lda 0x4cae                  ; load accumulator with memory
  ========< 0x00005be2      d027           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005be4      ad00dc         lda 0xdc00       ; DC00 is joystick port a
  |||||||   0x00005be7      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005be8      2910           and #0x10                   ; "and" memory with accumulator
  ========< 0x00005bea      d016           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005bec      a9c1           lda #0xc1                   ; load accumulator with memory
  |||||||   0x00005bee      a40a           ldy 0x0a                    ; load index y with memory
  ========< 0x00005bf0      303c           bmi 0x4ed108                ; branch on result minus
  ========< 0x00005bf2      d004           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005bf4      a9c5           lda #0xc5                   ; load accumulator with memory
  ========< 0x00005bf6      d036           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005bf8      a9d4           lda #0xd4                   ; load accumulator with memory
  |||||||   0x00005bfa      c021           cpy #0x21                   ; compare memory and index y
  ========< 0x00005bfc      9030           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005bfe      a9cb           lda #0xcb                   ; load accumulator with memory
  ========< 0x00005c00      d02c           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005c02      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00005c03      290f           and #0x0f                   ; "and" memory with accumulator
  |||||||   0x00005c05      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005c06      bd2c5c         lda 0x5c2c,x                ; load accumulator with memory
  ========< 0x00005c09      d023           bne 0x4ed108                ; branch on result not zero
  -----`--> 0x00005c0b      20e4ff         jsr 0xffe4       ; GETIN. Read byte from default input. (If not keyboard, must call OPEN and CHKIN beforehands.)
  |||||,==< 0x00005c0e      f020           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005c10      c981           cmp #0x81                   ; compare memory and accumulator
  ========< 0x00005c12      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005c14      a9ff           lda #0xff                   ; load accumulator with memory
  ---`----> 0x00005c16      c90f           cmp #0x0f                   ; compare memory and accumulator
  |||,====< 0x00005c18      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005c1a      a913           lda #0x13                   ; load accumulator with memory
  |||`----> 0x00005c1c      c91b           cmp #0x1b                   ; compare memory and accumulator
  |||,====< 0x00005c1e      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005c20      a985           lda #0x85                   ; load accumulator with memory
  |||`----> 0x00005c22      c920           cmp #0x20                   ; compare memory and accumulator
  |||,====< 0x00005c24      9002           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005c26      0980           ora #0x80                   ; "or" memory with accumulator
  |||`----> 0x00005c28      c914           cmp #0x14                   ; compare memory and accumulator
  |||,====< 0x00005c2a      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005c2c      a988           lda #0x88                   ; load accumulator with memory
  ---`----> 0x00005c2e      a2ff           ldx #0xff                   ; load index x with memory
  ||| |`--> 0x00005c30      60             rts                         ; return from subroutine
  ||| | |   0x00005c31      afc0bb         
  ||| | |   0x00005c34      bfafc0         
  ||| | |   0x00005c37      ba             
  ||| | |   0x00005c38      bfafc0         
  ||| | |   0x00005c3b      00             

  ---.-.--> 0x00005c3c      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  |||||||   0x00005c3f      49b0           eor #0xb0                   ; "exclusive-or" memory with accumulator
  |||||||   0x00005c41      c90a           cmp #0x0a                   ; compare memory and accumulator
  |||`====< 0x00005c43      b0f7           bcs 0x4ed108                ; branch on carry set
  ||| |||   0x00005c45      8d7c5c         sta 0x5c7c                  ; store accumulator in memory
  ||| |||   0x00005c48      204f5a         jsr 0x5a4f                  ; jump to new location saving return address
  ---.----> 0x00005c4b      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  |||||||   0x00005c4e      c988           cmp #0x88                   ; compare memory and accumulator
  ========< 0x00005c50      d004           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005c52      c6c9           dec 0xc9                    ; decrement memory by one
  |||||`==< 0x00005c54      10e6           bpl 0x4ed108                ; branch on result plus
  --------> 0x00005c56      c90d           cmp #0x0d                   ; compare memory and accumulator
  |||||,==< 0x00005c58      f02a           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005c5a      49b0           eor #0xb0                   ; "exclusive-or" memory with accumulator
  |||||||   0x00005c5c      c90a           cmp #0x0a                   ; compare memory and accumulator
  ========< 0x00005c5e      b0eb           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005c60      8d825c         sta 0x5c82                  ; store accumulator in memory
  |||||||   0x00005c63      204f5a         jsr 0x5a4f                  ; jump to new location saving return address
  --------> 0x00005c66      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  |||||||   0x00005c69      c988           cmp #0x88                   ; compare memory and accumulator
  ========< 0x00005c6b      d00a           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005c6d      c6c9           dec 0xc9                    ; decrement memory by one
  |||||||   0x00005c6f      a9a0           lda #0xa0                   ; load accumulator with memory
  |||||||   0x00005c71      20145b         jsr 0x5b14                  ; jump to new location saving return address
  |||`====< 0x00005c74      4c4b5c         jmp 0x5c4b                  ; jump to new location
  --------> 0x00005c77      c90d           cmp #0x0d                   ; compare memory and accumulator
  ========< 0x00005c79      d0eb           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x00005c7b      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005c7d      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005c7e      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005c7f      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005c80      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |||   0x00005c81      09ff           ora #0xff                   ; "or" memory with accumulator
  ||| |||   0x00005c83      60             rts                         ; return from subroutine
  ||| |`--> 0x00005c84      ad7c5c         lda 0x5c7c                  ; load accumulator with memory
  ||| | |   0x00005c87      60             rts                         ; return from subroutine
  -----.--> 0x00005c88      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00005c8a      85a7           sta 0xa7                    ; store accumulator in memory
  ||| |||   0x00005c8c      85a8           sta 0xa8                    ; store accumulator in memory
  ||| |||   0x00005c8e      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  ||| |||   0x00005c91      c9a0           cmp #0xa0                   ; compare memory and accumulator
  |||,====< 0x00005c93      f022           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005c95      c9c0           cmp #0xc0                   ; compare memory and accumulator
  ========< 0x00005c97      f02a           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005c99      c991           cmp #0x91                   ; compare memory and accumulator
  ========< 0x00005c9b      f026           beq 0x4ed108                ; branch on result zero
  --------> 0x00005c9d      c9af           cmp #0xaf                   ; compare memory and accumulator
  ========< 0x00005c9f      f030           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005ca1      c911           cmp #0x11                   ; compare memory and accumulator
  ========< 0x00005ca3      f02c           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005ca5      c9ba           cmp #0xba                   ; compare memory and accumulator
  ========< 0x00005ca7      f043           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005ca9      c99d           cmp #0x9d                   ; compare memory and accumulator
  ========< 0x00005cab      f03f           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005cad      c9bb           cmp #0xbb                   ; compare memory and accumulator
  ========< 0x00005caf      f02e           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005cb1      c91d           cmp #0x1d                   ; compare memory and accumulator
  ========< 0x00005cb3      f02a           beq 0x4ed108                ; branch on result zero
  |||||`==< 0x00005cb5      d0d1           bne 0x4ed108                ; branch on result not zero
  |||`----> 0x00005cb7      203868         jsr 0x6838                  ; jump to new location saving return address
  ========< 0x00005cba      d0e1           bne 0x4ed108                ; branch on result not zero
  ||| | |   0x00005cbc      f3f3           isb (0xf3),y
  ||| | |   0x00005cbe      8d00a9         sta 0xa900                  ; store accumulator in memory
  ||| | |   0x00005cc1      00             brk                         ; force break
  ||| | |   0x00005cc2      60             rts                         ; return from subroutine
  --------> 0x00005cc3      203868         jsr 0x6838                  ; jump to new location saving return address
  ||| | |   0x00005cc6      ceeff2         dec 0xf2ef                  ; decrement memory by one
  ||| | |   0x00005cc9      f4e8           nop 0xe8,x                  ; no operation
  ||| | |   0x00005ccb      8d00c6         sta 0xc600                  ; store accumulator in memory
  ||| | |   0x00005cce      a8             tay                         ; transfer accumulator to index y
  ||| |,==< 0x00005ccf      d026           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005cd1      203868         jsr 0x6838                  ; jump to new location saving return address
  ||| |||   0x00005cd4      d3ef           dcp (0xef),y
  ||| |||   0x00005cd6      f5f4           sbc 0xf4,x                  ; subtract memory from accumulator with borrow
  ||| |||   0x00005cd8      e8             inx                         ; increment index x by one
  ||| |||   0x00005cd9      8d00e6         sta 0xe600                  ; store accumulator in memory
  ||| |||   0x00005cdc      a8             tay                         ; transfer accumulator to index y
  |||,====< 0x00005cdd      d018           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005cdf      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x00005ce2      c5e1           cmp 0xe1                    ; compare memory and accumulator
  |||||||   0x00005ce4      f3f4           isb (0xf4),y
  |||||||   0x00005ce6      8d00e6         sta 0xe600                  ; store accumulator in memory
  |||||||   0x00005ce9      a7d0           lax 0xd0
  |||||||   0x00005ceb      0b20           anc #0x20
  |||||||   0x00005ced      38             sec                         ; set carry flag
  |||||||   0x00005cee      68             pla                         ; pull accumulator from stack
  |||||||   0x00005cef      d7e5           dcp 0xe5,x
  |||||||   0x00005cf1      f3f4           isb (0xf4),y
  |||||||   0x00005cf3      8d00c6         sta 0xc600                  ; store accumulator in memory
  |||||||   0x00005cf6      a7a9           lax 0xa9
  ||| | |   0x00005cf8      0160           ora (0x60,x)                ; "or" memory with accumulator

0x4c5a:
  --------> 0x00005cfa      ae8719         ldx 0x1987                  ; load index x with memory
  ||| | |   0x00005cfd      a006           ldy #0x06                   ; load index y with memory
  ||| |.--> 0x00005cff      b98019         lda 0x1980,y                ; load accumulator with memory
  ||| |||   0x00005d02      998119         sta 0x1981,y                ; store accumulator in memory
  ||| |||   0x00005d05      88             dey                         ; decrement index y by one
  ||| |`==< 0x00005d06      10f7           bpl 0x4ed108                ; branch on result plus
  ||| | |   0x00005d08      8e8019         stx 0x1980                  ; store index x in memory
  ||| | |   0x00005d0b      60             rts                         ; return from subroutine

0x4ca8:
  ||| | `-> 0x00005d0c      a914           lda #0x14                   ; load accumulator with memory
  ||| |..-> 0x00005d0e      ce195d         dec 0x5d19                  ; decrement memory by one
  ||| |`==< 0x00005d11      d0fb           bne 0x4ed108                ; branch on result not zero
  ||| | |   0x00005d13      38             sec                         ; set carry flag
  ||| | |   0x00005d14      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  ||| | `=< 0x00005d16      d0f6           bne 0x4ed108                ; branch on result not zero
  ||| |     0x00005d18      60             rts                         ; return from subroutine
  ||| |     0x00005d19                                      ; variable

  ||| | .-> 0x00005d1a      20805e         jsr 0x5e80                  ; jump to new location saving return address
  ||| | |   0x00005d1d      68             pla                         ; pull accumulator from stack
  ||| | |   0x00005d1e      68             pla                         ; pull accumulator from stack
  ||| | |   0x00005d1f      a8             tay                         ; transfer accumulator to index y
  ||| | |   0x00005d20      60             rts                         ; return from subroutine
  ||| | |   0x00005d21      98             tya                         ; transfer index y to accumulator
  ||| | |   0x00005d22      48             pha                         ; push accumulator on stack
  ||| | |   0x00005d23      8d5a5d         sta 0x5d5a                  ; store accumulator in memory
  ||| | |   0x00005d26      c8             iny                         ; increment index y by one
  ||| | |   0x00005d27      84ca           sty 0xca                    ; store index y in memory
  ||| | |   0x00005d29      a018           ldy #0x18                   ; load index y with memory
  ||| | |   0x00005d2b      84c9           sty 0xc9                    ; store index y in memory
  ||| | |   0x00005d2d      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| | |   0x00005d2e      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| | |   0x00005d2f      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| | |   0x00005d30      48             pha                         ; push accumulator on stack
  ||| | |   0x00005d31      a8             tay                         ; transfer accumulator to index y
  ||| | |   0x00005d32      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| | |   0x00005d33      aa             tax                         ; transfer accumulator to index x
  ||| | |   0x00005d34      bd8010         lda 0x1080,x                ; load accumulator with memory
  ||| | `=< 0x00005d37      d0e1           bne 0x4ed108                ; branch on result not zero
  ||| | .-> 0x00005d39      b90010         lda 0x1000,y                ; load accumulator with memory
  ||| | |   0x00005d3c      48             pha                         ; push accumulator on stack
  ||| | |   0x00005d3d      0980           ora #0x80                   ; "or" memory with accumulator
  ||| | |   0x00005d3f      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| | |   0x00005d42      c8             iny                         ; increment index y by one
  ||| | |   0x00005d43      68             pla                         ; pull accumulator from stack
  ||| | `=< 0x00005d44      30f3           bmi 0x4ed108                ; branch on result minus
  ||| | .-> 0x00005d46      a5c9           lda 0xc9                    ; load accumulator with memory
  ||| | |   0x00005d48      c921           cmp #0x21                   ; compare memory and accumulator
  ||| |,==< 0x00005d4a      f006           beq 0x4ed108                ; branch on result zero
  ||| |||   0x00005d4c      208d5e         jsr 0x5e8d                  ; jump to new location saving return address
  ||| ||`=< 0x00005d4f      4c465d         jmp 0x5d46                  ; jump to new location
  ||| |`--> 0x00005d52      68             pla                         ; pull accumulator from stack
  ||| |     0x00005d53      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||| |     0x00005d54      a8             tay                         ; transfer accumulator to index y
  ||| |     0x00005d55      a9a0           lda #0xa0                   ; load accumulator with memory
  ||| |     0x00005d57      a62c           ldx 0x2c                    ; load index x with memory
  ||| |     0x00005d59      e000           cpx #0x00                   ; compare memory and index x
  ||| | ,=< 0x00005d5b      d002           bne 0x4ed108                ; branch on result not zero
  ||| | |   0x00005d5d      a937           lda #0x37                   ; load accumulator with memory
  ||| | `-> 0x00005d5f      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| |     0x00005d62      be8810         ldx 0x1088,y                ; load index x with memory
  ||| |     0x00005d65      b98910         lda 0x1089,y                ; load accumulator with memory
  ||| |     0x00005d68      20925e         jsr 0x5e92                  ; jump to new location saving return address
  ||| |     0x00005d6b      be8910         ldx 0x1089,y                ; load index x with memory
  ||| |     0x00005d6e      b98810         lda 0x1088,y                ; load accumulator with memory
  ||| |     0x00005d71      206c5e         jsr 0x5e6c                  ; jump to new location saving return address
  ||| |     0x00005d74      b98310         lda 0x1083,y                ; load accumulator with memory
  ||| |     0x00005d77      8d995d         sta 0x5d99                  ; store accumulator in memory
  ||| |     0x00005d7a      68             pla                         ; pull accumulator from stack
  ||| |     0x00005d7b      a8             tay                         ; transfer accumulator to index y
  ||| |     0x00005d7c      240a           bit 0x0a                    ; test bits in memory with accumulator
  ||| | ,=< 0x00005d7e      1018           bpl 0x4ed108                ; branch on result plus
  ||| | |   0x00005d80      a21f           ldx #0x1f                   ; load index x with memory
  ||| |.--> 0x00005d82      98             tya                         ; transfer index y to accumulator
  ||| |||   0x00005d83      ddc04a         cmp 0x4ac0,x                ; compare memory and accumulator
  |||,====< 0x00005d86      d00d           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005d88      bd2040         lda 0x4020,x                ; load accumulator with memory
  |||||||   0x00005d8b      29e1           and #0xe1                   ; "and" memory with accumulator
  |||||||   0x00005d8d      c981           cmp #0x81                   ; compare memory and accumulator
  ========< 0x00005d8f      d004           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005d91      a9c3           lda #0xc3                   ; load accumulator with memory
  ========< 0x00005d93      d005           bne 0x4ed108                ; branch on result not zero
  ---`----> 0x00005d95      ca             dex                         ; decrement index x by one
  ||| |`==< 0x00005d96      10ea           bpl 0x4ed108                ; branch on result plus
  ||| | `-> 0x00005d98      a900           lda #0x00                   ; load accumulator with memory
  --------> 0x00005d9a      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| |     0x00005d9d      60             rts                         ; return from subroutine
  -----..-> 0x00005d9e      a5c9           lda 0xc9                    ; load accumulator with memory
  ||| |||   0x00005da0      48             pha                         ; push accumulator on stack
  ||| |||   0x00005da1      a5ca           lda 0xca                    ; load accumulator with memory
  ||| |||   0x00005da3      48             pha                         ; push accumulator on stack
  ||| |||   0x00005da4      a005           ldy #0x05                   ; load index y with memory
  |||.----> 0x00005da6      20215d         jsr 0x5d21                  ; jump to new location saving return address
  |||||||   0x00005da9      88             dey                         ; decrement index y by one
  |||`====< 0x00005daa      10fa           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00005dac      a908           lda #0x08                   ; load accumulator with memory
  ||| |||   0x00005dae      85ca           sta 0xca                    ; store accumulator in memory
  ||| |||   0x00005db0      a918           lda #0x18                   ; load accumulator with memory
  ||| |||   0x00005db2      85c9           sta 0xc9                    ; store accumulator in memory
  ||| |||   0x00005db4      203868         jsr 0x6838                  ; jump to new location saving return address
  ||| |||   0x00005db7      c6ba           dec 0xba                    ; decrement memory by one
  ||| |||   0x00005db9      00             brk                         ; force break
  ||| |||   0x00005dba      ae8111         ldx 0x1181                  ; load index x with memory
  ||| |||   0x00005dbd      ad8011         lda 0x1180                  ; load accumulator with memory
  ||| |||   0x00005dc0      206c5e         jsr 0x5e6c                  ; jump to new location saving return address
  |||.----> 0x00005dc3      208d5e         jsr 0x5e8d                  ; jump to new location saving return address
  |||||||   0x00005dc6      a5c9           lda 0xc9                    ; load accumulator with memory
  |||||||   0x00005dc8      c920           cmp #0x20                   ; compare memory and accumulator
  |||`====< 0x00005dca      d0f7           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x00005dcc      240a           bit 0x0a                    ; test bits in memory with accumulator
  |||,====< 0x00005dce      301a           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00005dd0      a50c           lda 0x0c                    ; load accumulator with memory
  |||||||   0x00005dd2      29f8           and #0xf8                   ; "and" memory with accumulator
  |||||||   0x00005dd4      c920           cmp #0x20                   ; compare memory and accumulator
  ========< 0x00005dd6      d012           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005dd8      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x00005ddb      d3c8           dcp (0xc8),y
  |||||||   0x00005ddd      c9d0           cmp #0xd0                   ; compare memory and accumulator
  |||||||   0x00005ddf      ba             tsx                         ; transfer stack pointer to index x
  |||||||   0x00005de0      00             brk                         ; force break
  |||||||   0x00005de1      adc04a         lda 0x4ac0                  ; load accumulator with memory
  |||||||   0x00005de4      20765e         jsr 0x5e76                  ; jump to new location saving return address
  ========< 0x00005de7      4c035e         jmp 0x5e03                  ; jump to new location
  ---`----> 0x00005dea      ae8211         ldx 0x1182                  ; load index x with memory
  ||| |||   0x00005ded      ad8311         lda 0x1183                  ; load accumulator with memory
  ||| |||   0x00005df0      20925e         jsr 0x5e92                  ; jump to new location saving return address
  ||| |||   0x00005df3      203868         jsr 0x6838                  ; jump to new location saving return address
  ||| |||   0x00005df6      a0c7           ldy #0xc7                   ; load index y with memory
  ||| |||   0x00005df8      ba             tsx                         ; transfer stack pointer to index x
  ||| |||   0x00005df9      00             brk                         ; force break
  ||| |||   0x00005dfa      ae8311         ldx 0x1183                  ; load index x with memory
  ||| |||   0x00005dfd      ad8211         lda 0x1182                  ; load accumulator with memory
  ||| |||   0x00005e00      206c5e         jsr 0x5e6c                  ; jump to new location saving return address
  --------> 0x00005e03      20805e         jsr 0x5e80                  ; jump to new location saving return address
  ||| |||   0x00005e06      203868         jsr 0x6838                  ; jump to new location saving return address
  ||| |||   0x00005e09      8da0a0         sta 0xa0a0                  ; store accumulator in memory
  ||| |||   0x00005e0c      a000           ldy #0x00                   ; load index y with memory
  ||| |||   0x00005e0e      a51c           lda 0x1c                    ; load accumulator with memory
  ||| |||   0x00005e10      051d           ora 0x1d                    ; "or" memory with accumulator
  ||| |||   0x00005e12      29f0           and #0xf0                   ; "and" memory with accumulator
  |||,====< 0x00005e14      d003           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005e16      208d5e         jsr 0x5e8d                  ; jump to new location saving return address
  |||`----> 0x00005e19      a51c           lda 0x1c                    ; load accumulator with memory
  ||| |||   0x00005e1b      20765e         jsr 0x5e76                  ; jump to new location saving return address
  ||| |||   0x00005e1e      a9ad           lda #0xad                   ; load accumulator with memory
  ||| |||   0x00005e20      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| |||   0x00005e23      a51d           lda 0x1d                    ; load accumulator with memory
  ||| |||   0x00005e25      20765e         jsr 0x5e76                  ; jump to new location saving return address
  ||| |||   0x00005e28      a9ad           lda #0xad                   ; load accumulator with memory
  ||| |||   0x00005e2a      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| |||   0x00005e2d      a51a           lda 0x1a                    ; load accumulator with memory
  ||| |||   0x00005e2f      290f           and #0x0f                   ; "and" memory with accumulator
  ||| |||   0x00005e31      204f5a         jsr 0x5a4f                  ; jump to new location saving return address
  ||| |||   0x00005e34      a51b           lda 0x1b                    ; load accumulator with memory
  ||| |||   0x00005e36      20405a         jsr 0x5a40                  ; jump to new location saving return address
  ||| |||   0x00005e39      20805e         jsr 0x5e80                  ; jump to new location saving return address
  ||| |||   0x00005e3c      a907           lda #0x07                   ; load accumulator with memory
  ||| |||   0x00005e3e      85ca           sta 0xca                    ; store accumulator in memory
  ||| |||   0x00005e40      a91e           lda #0x1e                   ; load accumulator with memory
  ||| |||   0x00005e42      85c9           sta 0xc9                    ; store accumulator in memory
  ||| |||   0x00005e44      a520           lda 0x20                    ; load accumulator with memory
  |||,====< 0x00005e46      d00e           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005e48      a906           lda #0x06                   ; load accumulator with memory
  |||||||   0x00005e4a      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x00005e4d      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x00005e50      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ========< 0x00005e53      4c655e         jmp 0x5e65                  ; jump to new location
  |||`----> 0x00005e56      a91e           lda #0x1e                   ; load accumulator with memory
  ||| |||   0x00005e58      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| |||   0x00005e5b      a520           lda 0x20                    ; load accumulator with memory
  ||| |||   0x00005e5d      20595a         jsr 0x5a59                  ; jump to new location saving return address
  ||| |||   0x00005e60      a91c           lda #0x1c                   ; load accumulator with memory
  ||| |||   0x00005e62      20595a         jsr 0x5a59                  ; jump to new location saving return address
  --------> 0x00005e65      68             pla                         ; pull accumulator from stack
  ||| |||   0x00005e66      85ca           sta 0xca                    ; store accumulator in memory
  ||| |||   0x00005e68      68             pla                         ; pull accumulator from stack
  ||| |||   0x00005e69      85c9           sta 0xc9                    ; store accumulator in memory
  ||| |||   0x00005e6b      60             rts                         ; return from subroutine
  |||,====< 0x00005e6c      f007           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005e6e      20765e         jsr 0x5e76                  ; jump to new location saving return address
  |||||||   0x00005e71      8a             txa                         ; transfer index x to accumulator
  ========< 0x00005e72      4c405a         jmp 0x5a40                  ; jump to new location
  |||`----> 0x00005e75      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x00005e76      c90a           cmp #0x0a                   ; compare memory and accumulator
  |||,====< 0x00005e78      b003           bcs 0x4ed108                ; branch on carry set
  ========< 0x00005e7a      4c4f5a         jmp 0x5a4f                  ; jump to new location
  ===`----> 0x00005e7d      4c405a         jmp 0x5a40                  ; jump to new location
  |||.----> 0x00005e80      a5c9           lda 0xc9                    ; load accumulator with memory
  |||||||   0x00005e82      c927           cmp #0x27                   ; compare memory and accumulator
  ========< 0x00005e84      f006           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005e86      208d5e         jsr 0x5e8d                  ; jump to new location saving return address
  |||`====< 0x00005e89      4c805e         jmp 0x5e80                  ; jump to new location
  --------> 0x00005e8c      60             rts                         ; return from subroutine
  ||| |||   0x00005e8d      a9a0           lda #0xa0                   ; load accumulator with memory
  ========< 0x00005e8f      4c595a         jmp 0x5a59                  ; jump to new location
  ||| |||   0x00005e92      86fc           stx 0xfc                    ; store index x in memory
  ||| |||   0x00005e94      85fd           sta 0xfd                    ; store accumulator in memory
  ||| |||   0x00005e96      a200           ldx #0x00                   ; load index x with memory
  ||| |||   0x00005e98      a5fc           lda 0xfc                    ; load accumulator with memory
  ||| |||   0x00005e9a      29f0           and #0xf0                   ; "and" memory with accumulator
  |||,====< 0x00005e9c      d00f           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005e9e      e8             inx                         ; increment index x by one
  |||||||   0x00005e9f      a5fc           lda 0xfc                    ; load accumulator with memory
  |||||||   0x00005ea1      290f           and #0x0f                   ; "and" memory with accumulator
  ========< 0x00005ea3      d008           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005ea5      e8             inx                         ; increment index x by one
  |||||||   0x00005ea6      a5fd           lda 0xfd                    ; load accumulator with memory
  |||||||   0x00005ea8      29f0           and #0xf0                   ; "and" memory with accumulator
  ========< 0x00005eaa      d001           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005eac      e8             inx                         ; increment index x by one
  ---`----> 0x00005ead      ca             dex                         ; decrement index x by one
  |||,====< 0x00005eae      3006           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00005eb0      208d5e         jsr 0x5e8d                  ; jump to new location saving return address
  ========< 0x00005eb3      4cad5e         jmp 0x5ead                  ; jump to new location
  |||`----> 0x00005eb6      60             rts                         ; return from subroutine
  --------> 0x00005eb7      8a             txa                         ; transfer index x to accumulator
  ||| |||   0x00005eb8      48             pha                         ; push accumulator on stack
  ||| |||   0x00005eb9      18             clc                         ; clear carry flag
  ||| |||   0x00005eba      a20e           ldx #0x0e                   ; load index x with memory
  ||| |||   0x00005ebc      ade75e         lda 0x5ee7                  ; load accumulator with memory
  |||.----> 0x00005ebf      7dd85e         adc 0x5ed8,x                ; add memory to accumulator with carry
  |||||||   0x00005ec2      9dd85e         sta 0x5ed8,x                ; store accumulator in memory
  |||||||   0x00005ec5      ca             dex                         ; decrement index x by one
  |||`====< 0x00005ec6      10f7           bpl 0x4ed108                ; branch on result plus
  ||| |||   0x00005ec8      a20f           ldx #0x0f                   ; load index x with memory
  |||.----> 0x00005eca      fed85e         inc 0x5ed8,x                ; increment memory by one
  ========< 0x00005ecd      d003           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005ecf      ca             dex                         ; decrement index x by one
  |||`====< 0x00005ed0      10f8           bpl 0x4ed108                ; branch on result plus
  --------> 0x00005ed2      68             pla                         ; pull accumulator from stack
  ||| |||   0x00005ed3      aa             tax                         ; transfer accumulator to index x
  ||| |||   0x00005ed4      add85e         lda 0x5ed8                  ; load accumulator with memory
  ||| |||   0x00005ed7      60             rts                         ; return from subroutine
  ||| |||   0x00005ed8      6476           nop 0x76                    ; no operation
  ||| |||   0x00005eda      8554           sta 0x54                    ; store accumulator in memory
  ||| |||   0x00005edc      f65c           inc 0x5c,x                  ; increment memory by one
  ||| |||   0x00005ede      761f           ror 0x1f,x                  ; rotate one bit right (memory or accumulator)
  ||| |||   0x00005ee0      e712           isb 0x12
  ||| |||   0x00005ee2      a76b           lax 0x6b
  ||| |||   0x00005ee4      93c46e         sha 0x6ec4,x
  ||| |||   0x00005ee7      1b6476         slo 0x7664,y

0x4c6c:
  --------> 0x00005eea      4ee95e         lsr 0x5ee9                  ; shift right one bit (memory or accumulator)
  ||| |||   0x00005eed      6ee85e         ror 0x5ee8                  ; rotate one bit right (memory or accumulator)
  |||,====< 0x00005ef0      9008           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x00005ef2      ade95e         lda 0x5ee9                  ; load accumulator with memory
  |||||||   0x00005ef5      49b4           eor #0xb4                   ; "exclusive-or" memory with accumulator
  |||||||   0x00005ef7      8de95e         sta 0x5ee9                  ; store accumulator in memory
  |||`----> 0x00005efa      2ce95e         bit 0x5ee9                  ; test bits in memory with accumulator
  ||| |||   0x00005efd      ade85e         lda 0x5ee8                  ; load accumulator with memory
  ||| |||   0x00005f00      60             rts                         ; return from subroutine
  ||| |||   0x00005f01      00             brk                   ; variable
  ||| |||   0x00005f02      00             brk                   ; variable
  ||| |||   0x00005f03      00             brk                   ; variable

  |||.----> 0x00005f04      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005f06      ae015f         ldx 0x5f01                  ; load index x with memory
  |||||||   0x00005f09      202b67         jsr 0x672b                  ; jump to new location saving return address
  |||||||   0x00005f0c      ac025f         ldy 0x5f02                  ; load index y with memory
  |||||||   0x00005f0f      b98310         lda 0x1083,y                ; load accumulator with memory
  |||||||   0x00005f12      c9c4           cmp #0xc4                   ; compare memory and accumulator
  |||||||   0x00005f14      60             rts                         ; return from subroutine
  |||||||   0x00005f15      ac025f         ldy 0x5f02                  ; load index y with memory
  |||||||   0x00005f18      b98010         lda 0x1080,y                ; load accumulator with memory
  |||||||   0x00005f1b      60             rts                         ; return from subroutine
  |||||||   0x00005f1c      ac025f         ldy 0x5f02                  ; load index y with memory
  |||||||   0x00005f1f      b98310         lda 0x1083,y                ; load accumulator with memory
  |||||||   0x00005f22      c9d0           cmp #0xd0                   ; compare memory and accumulator
  ========< 0x00005f24      d014           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005f26      20155f         jsr 0x5f15                  ; jump to new location saving return address
  |||`====< 0x00005f29      d0d9           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x00005f2b      20045f         jsr 0x5f04                  ; jump to new location saving return address
  |||,====< 0x00005f2e      d00b           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005f30      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x00005f33      c4e9           cpy 0xe9                    ; compare memory and index y
  |||||||   0x00005f35      e5e4           sbc 0xe4                    ; subtract memory from accumulator with borrow
  |||||||   0x00005f37      a18d           lda (0x8d,x)                ; load accumulator with memory
  |||||||   0x00005f39      00             brk                         ; force break
  --------> 0x00005f3a      60             rts                         ; return from subroutine
  |||`----> 0x00005f3b      60             rts                         ; return from subroutine
  ||| |||   0x00005f3c      ac025f         ldy 0x5f02                  ; load index y with memory
  ||| |||   0x00005f3f      b98310         lda 0x1083,y                ; load accumulator with memory
  ||| |||   0x00005f42      c9c4           cmp #0xc4                   ; compare memory and accumulator
  |||,====< 0x00005f44      f044           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005f46      ad035f         lda 0x5f03                  ; load accumulator with memory
  ========< 0x00005f49      f026           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005f4b      f8             sed                         ; set decimal mode
  |||||||   0x00005f4c      ad8111         lda 0x1181                  ; load accumulator with memory
  ========< 0x00005f4f      d016           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005f51      ad8011         lda 0x1180                  ; load accumulator with memory
  |||||||   0x00005f54      38             sec                         ; set carry flag
  |||||||   0x00005f55      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  |||||||   0x00005f57      8d8011         sta 0x1180                  ; store accumulator in memory
  ========< 0x00005f5a      b00b           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00005f5c      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00005f5e      8d8011         sta 0x1180                  ; store accumulator in memory
  ========< 0x00005f61      4c705f         jmp 0x5f70                  ; jump to new location
  |||||||   0x00005f64      8d8011         sta 0x1180                  ; store accumulator in memory
  --------> 0x00005f67      ad8111         lda 0x1181                  ; load accumulator with memory
  |||||||   0x00005f6a      38             sec                         ; set carry flag
  |||||||   0x00005f6b      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  |||||||   0x00005f6d      8d8111         sta 0x1181                  ; store accumulator in memory
  --------> 0x00005f70      d8             cld                         ; clear decimal mode
  --------> 0x00005f71      ad8011         lda 0x1180                  ; load accumulator with memory
  ========< 0x00005f74      d014           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005f76      ad8111         lda 0x1181                  ; load accumulator with memory
  ========< 0x00005f79      d00f           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005f7b      20045f         jsr 0x5f04                  ; jump to new location saving return address
  ========< 0x00005f7e      d00b           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005f80      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x00005f83      c4e9           cpy 0xe9                    ; compare memory and index y
  |||||||   0x00005f85      e5e4           sbc 0xe4                    ; subtract memory from accumulator with borrow
  |||||||   0x00005f87      a18d           lda (0x8d,x)                ; load accumulator with memory
  |||||||   0x00005f89      00             brk                         ; force break
  ---`----> 0x00005f8a      60             rts                         ; return from subroutine
  --------> 0x00005f8b      203868         jsr 0x6838                  ; jump to new location saving return address
  ||| |||   0x00005f8e      d3f4           dcp (0xf4),y
  ||| |||   0x00005f90      e1f2           sbc (0xf2,x)                ; subtract memory from accumulator with borrow
  ||| |||   0x00005f92      f6e9           inc 0xe9,x                  ; increment memory by one
  ||| |||   0x00005f94      eee7a1         inc 0xa1e7                  ; increment memory by one
  ||| |||   0x00005f97      8d0060         sta 0x6000                  ; store accumulator in memory
  ||| |||   0x00005f9a      60             rts                         ; return from subroutine
  --------> 0x00005f9b      a200           ldx #0x00                   ; load index x with memory
  ||| |||   0x00005f9d      8e1260         stx 0x6012                  ; store index x in memory
  |||.----> 0x00005fa0      8ed65f         stx 0x5fd6                  ; store index x in memory
  |||||||   0x00005fa3      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00005fa4      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005fa5      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005fa6      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005fa7      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00005fa8      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00005fa9      bd8010         lda 0x1080,x                ; load accumulator with memory
  ========< 0x00005fac      d027           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005fae      bd8310         lda 0x1083,x                ; load accumulator with memory
  |||||||   0x00005fb1      c9c4           cmp #0xc4                   ; compare memory and accumulator
  ========< 0x00005fb3      d00d           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005fb5      a52c           lda 0x2c                    ; load accumulator with memory
  |||||||   0x00005fb7      cdd65f         cmp 0x5fd6                  ; compare memory and accumulator
  ========< 0x00005fba      d019           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005fbc      e680           inc 0x80                    ; increment memory by one
  |||||||   0x00005fbe      662c           ror 0x2c                    ; rotate one bit right (memory or accumulator)
  ========< 0x00005fc0      d013           bne 0x4ed108                ; branch on result not zero
  --------> 0x00005fc2      c9d3           cmp #0xd3                   ; compare memory and accumulator
  ========< 0x00005fc4      f00f           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005fc6      ee1260         inc 0x6012                  ; increment memory by one
  |||||||   0x00005fc9      c9d0           cmp #0xd0                   ; compare memory and accumulator
  ========< 0x00005fcb      d008           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005fcd      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00005fcf      aed65f         ldx 0x5fd6                  ; load index x with memory
  |||||||   0x00005fd2      202b67         jsr 0x672b                  ; jump to new location saving return address
  --------> 0x00005fd5      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00005fd7      e8             inx                         ; increment index x by one
  |||||||   0x00005fd8      e006           cpx #0x06                   ; compare memory and index x
  |||`====< 0x00005fda      d0c4           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x00005fdc      a61e           ldx 0x1e                    ; load index x with memory
  ||| |||   0x00005fde      e428           cpx 0x28                    ; compare memory and index x
  |||,====< 0x00005fe0      f045           beq 0x4ed108                ; branch on result zero
  |||||||   0x00005fe2      8628           stx 0x28                    ; store index x in memory
  |||||||   0x00005fe4      ad8011         lda 0x1180                  ; load accumulator with memory
  |||||||   0x00005fe7      0d8111         ora 0x1181                  ; "or" memory with accumulator
  ========< 0x00005fea      d014           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00005fec      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x00005fef      8dd3f4         sta 0xf4d3                  ; store accumulator in memory
  |||||||   0x00005ff2      e1f2           sbc (0xf2,x)                ; subtract memory from accumulator with borrow
  |||||||   0x00005ff4      f6e9           inc 0xe9,x                  ; increment memory by one
  |||||||   0x00005ff6      eee7a1         inc 0xa1e7                  ; increment memory by one
  |||||||   0x00005ff9      8d0020         sta 0x2000                  ; store accumulator in memory
  |||||||   0x00005ffc      7e67a2         ror 0xa267,x                ; rotate one bit right (memory or accumulator)
  |||||||   0x00005fff      ffe006         isb 0x06e0,x
  ========< 0x00006002      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006004      e012           cpx #0x12                   ; compare memory and index x
  ========< 0x00006006      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006008      e018           cpx #0x18                   ; compare memory and index x
  ========< 0x0000600a      d01b           bne 0x4ed108                ; branch on result not zero
  --------> 0x0000600c      ad8111         lda 0x1181                  ; load accumulator with memory
  |||||||   0x0000600f      f8             sed                         ; set decimal mode
  |||||||   0x00006010      38             sec                         ; set carry flag
  |||||||   0x00006011      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
  |||||||   0x00006013      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00006014      ad8011         lda 0x1180                  ; load accumulator with memory
  |||||||   0x00006017      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
  |||||||   0x00006019      d8             cld                         ; clear decimal mode
  ========< 0x0000601a      b003           bcs 0x4ed108                ; branch on carry set
  |||||||   0x0000601c      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x0000601e      aa             tax                         ; transfer accumulator to index x
  --------> 0x0000601f      8d8011         sta 0x1180                  ; store accumulator in memory
  |||||||   0x00006022      8e8111         stx 0x1181                  ; store index x in memory
  |||||||   0x00006025      e680           inc 0x80                    ; increment memory by one
  ---`----> 0x00006027      e62f           inc 0x2f                    ; increment memory by one
  |||,====< 0x00006029      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000602b      c62f           dec 0x2f                    ; decrement memory by one
  |||`----> 0x0000602d      a521           lda 0x21                    ; load accumulator with memory
  |||,====< 0x0000602f      f00e           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006031      c9ff           cmp #0xff                   ; compare memory and accumulator
  ========< 0x00006033      f00a           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006035      c621           dec 0x21                    ; decrement memory by one
  ========< 0x00006037      d006           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006039      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x0000603b      8520           sta 0x20                    ; store accumulator in memory
  |||||||   0x0000603d      e680           inc 0x80                    ; increment memory by one
  ---`----> 0x0000603f      4c216c         jmp 0x6c21                  ; jump to new location
  ||| |||   0x00006042      2c3952         bit 0x5239                  ; test bits in memory with accumulator
  |||,====< 0x00006045      300a           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00006047      ad2a57         lda 0x572a                  ; load accumulator with memory
  |||||||   0x0000604a      2903           and #0x03                   ; "and" memory with accumulator
  ========< 0x0000604c      d003           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000604e      ce3952         dec 0x5239                  ; decrement memory by one
  ---`----> 0x00006051      a900           lda #0x00                   ; load accumulator with memory
  ||| |||   0x00006053      8576           sta 0x76                    ; store accumulator in memory
  ||| |||   0x00006055      a9ff           lda #0xff                   ; load accumulator with memory
  ||| |||   0x00006057      8577           sta 0x77                    ; store accumulator in memory
  ||| |||   0x00006059      a520           lda 0x20                    ; load accumulator with memory
  ||| |||   0x0000605b      c9d4           cmp #0xd4                   ; compare memory and accumulator
  |||,====< 0x0000605d      f04e           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000605f      a280           ldx #0x80                   ; load index x with memory
  |||||||   0x00006061      a048           ldy #0x48                   ; load index y with memory
  |||||||   0x00006063      240a           bit 0x0a                    ; test bits in memory with accumulator
  ========< 0x00006065      1004           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00006067      a200           ldx #0x00                   ; load index x with memory
  |||||||   0x00006069      a048           ldy #0x48                   ; load index y with memory
  --------> 0x0000606b      8e7460         stx 0x6074                  ; store index x in memory
  |||||||   0x0000606e      8c7560         sty 0x6075                  ; store index y in memory
  |||||||   0x00006071      a278           ldx #0x78                   ; load index x with memory
  --------> 0x00006073      bd8048         lda 0x4880,x                ; load accumulator with memory
  |||||||   0x00006076      a001           ldy #0x01                   ; load index y with memory
  |||||||   0x00006078      29fe           and #0xfe                   ; "and" memory with accumulator
  |||||||   0x0000607a      c9fa           cmp #0xfa                   ; compare memory and accumulator
  ========< 0x0000607c      f033           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000607e      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x00006080      c9d4           cmp #0xd4                   ; compare memory and accumulator
  ========< 0x00006082      f02e           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006084      c9d8           cmp #0xd8                   ; compare memory and accumulator
  ========< 0x00006086      f027           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006088      bd0048         lda 0x4800,x                ; load accumulator with memory
  ========< 0x0000608b      d009           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000608d      bd0049         lda 0x4900,x                ; load accumulator with memory
  |||||||   0x00006090      29fc           and #0xfc                   ; "and" memory with accumulator
  |||||||   0x00006092      c95c           cmp #0x5c                   ; compare memory and accumulator
  ========< 0x00006094      f018           beq 0x4ed108                ; branch on result zero
  --------> 0x00006096      ca             dex                         ; decrement index x by one
  ========< 0x00006097      10da           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00006099      a576           lda 0x76                    ; load accumulator with memory
  ========< 0x0000609b      f010           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000609d      c901           cmp #0x01                   ; compare memory and accumulator
  ========< 0x0000609f      f01e           beq 0x4ed108                ; branch on result zero
  |||||||   0x000060a1      c902           cmp #0x02                   ; compare memory and accumulator
  ========< 0x000060a3      f024           beq 0x4ed108                ; branch on result zero
  |||||||   0x000060a5      c904           cmp #0x04                   ; compare memory and accumulator
  ========< 0x000060a7      f03a           beq 0x4ed108                ; branch on result zero
  |||||||   0x000060a9      c905           cmp #0x05                   ; compare memory and accumulator
  ========< 0x000060ab      f03e           beq 0x4ed108                ; branch on result zero
  ---`----> 0x000060ad      60             rts                         ; return from subroutine
  --------> 0x000060ae      c8             iny                         ; increment index y by one
  --------> 0x000060af      c8             iny                         ; increment index y by one
  ||| |||   0x000060b0      c8             iny                         ; increment index y by one
  --------> 0x000060b1      c8             iny                         ; increment index y by one
  --------> 0x000060b2      bd494e         lda 0x4e49,x                ; load accumulator with memory
  ||| |||   0x000060b5      c577           cmp 0x77                    ; compare memory and accumulator
  ========< 0x000060b7      b0dd           bcs 0x4ed108                ; branch on carry set
  ||| |||   0x000060b9      8476           sty 0x76                    ; store index y in memory
  ||| |||   0x000060bb      8577           sta 0x77                    ; store accumulator in memory
  ========< 0x000060bd      90d7           bcc 0x4ed108                ; branch on carry clear
  --------> 0x000060bf      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  ||| |||   0x000060c2      2907           and #0x07                   ; "and" memory with accumulator
  ||| |||   0x000060c4      0908           ora #0x08                   ; "or" memory with accumulator
  ||| |||   0x000060c6      aa             tax                         ; transfer accumulator to index x
  |||,====< 0x000060c7      d014           bne 0x4ed108                ; branch on result not zero
  --------> 0x000060c9      2c3952         bit 0x5239                  ; test bits in memory with accumulator
  ========< 0x000060cc      1037           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000060ce      a20c           ldx #0x0c                   ; load index x with memory
  |||||||   0x000060d0      ad2a57         lda 0x572a                  ; load accumulator with memory
  |||||||   0x000060d3      2907           and #0x07                   ; "and" memory with accumulator
  ========< 0x000060d5      f006           beq 0x4ed108                ; branch on result zero
  |||||||   0x000060d7      a210           ldx #0x10                   ; load index x with memory
  |||||||   0x000060d9      2903           and #0x03                   ; "and" memory with accumulator
  ========< 0x000060db      d0d0           bne 0x4ed108                ; branch on result not zero
  ---`----> 0x000060dd      a008           ldy #0x08                   ; load index y with memory
  ||| |||   0x000060df      a901           lda #0x01                   ; load accumulator with memory
  |||,====< 0x000060e1      d02f           bne 0x4ed108                ; branch on result not zero
  --------> 0x000060e3      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x000060e6      2907           and #0x07                   ; "and" memory with accumulator
  |||||||   0x000060e8      aa             tax                         ; transfer accumulator to index x
  ========< 0x000060e9      10f2           bpl 0x4ed108                ; branch on result plus
  --------> 0x000060eb      eeff6b         inc 0x6bff                  ; increment memory by one
  |||||||   0x000060ee      acff6b         ldy 0x6bff                  ; load index y with memory
  |||||||   0x000060f1      c035           cpy #0x35                   ; compare memory and index y
  ========< 0x000060f3      9005           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000060f5      a000           ldy #0x00                   ; load index y with memory
  |||||||   0x000060f7      8cff6b         sty 0x6bff                  ; store index y in memory
  --------> 0x000060fa      bee562         ldx 0x62e5,y                ; load index x with memory
  ========< 0x000060fd      f0ae           beq 0x4ed108                ; branch on result zero
  |||||||   0x000060ff      a004           ldy #0x04                   ; load index y with memory
  |||||||   0x00006101      a902           lda #0x02                   ; load accumulator with memory
  ========< 0x00006103      d00d           bne 0x4ed108                ; branch on result not zero
  --------> 0x00006105      ad2a57         lda 0x572a                  ; load accumulator with memory
  |||||||   0x00006108      2903           and #0x03                   ; "and" memory with accumulator
  ========< 0x0000610a      d0a1           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000610c      a2c0           ldx #0xc0                   ; load index x with memory
  |||||||   0x0000610e      a003           ldy #0x03                   ; load index y with memory
  |||||||   0x00006110      a905           lda #0x05                   ; load accumulator with memory

0x4c4b: (sound?)
  ---`----> 0x00006112      2478           bit 0x78                    ; test bits in memory with accumulator
  |||,====< 0x00006114      1055           bpl 0x4ed108                ; branch on result plus
  |||||||   0x00006116      8c2d61         sty 0x612d                  ; store index y in memory
  |||||||   0x00006119      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x0000611a      a8             tay                         ; transfer accumulator to index y
  |||||||   0x0000611b      b92e61         lda 0x612e,y                ; load accumulator with memory
  |||||||   0x0000611e      8d2b61         sta 0x612b                  ; store accumulator in memory
  |||||||   0x00006121      b92f61         lda 0x612f,y                ; load accumulator with memory
  |||||||   0x00006124      8d2c61         sta 0x612c                  ; store accumulator in memory
  |||||||   0x00006127      ac2d61         ldy 0x612d                  ; load index y with memory
  ========< 0x0000612a      4cffff         jmp 0xffff                  ; jump to new location

  |||||||   0x0000612d      00             brk                         ; force break
  |||||||   0x0000612e      0b62           anc #0x62
  |||||||   0x00006130      6c6189         jmp (0x8961)                ; jump to new location
  |||||||   0x00006133      610f           adc (0x0f,x)                ; add memory to accumulator with carry
  |||||||   0x00006135      62             hlt
  |||||||   0x00006136      28             plp                         ; pull processor status from stack
  |||||||   0x00006137      62             hlt
  |||||||   0x00006138      8661           stx 0x61                    ; store index x in memory
  |||||||   0x0000613a      5661           lsr 0x61,x                  ; shift right one bit (memory or accumulator)
  |||||||   0x0000613c      4662           lsr 0x62                    ; shift right one bit (memory or accumulator)
  |||||||   0x0000613e      3662           rol 0x62,x                  ; rotate one bit left (memory or accumulator)
  |||||||   0x00006140      2962           and #0x62                   ; "and" memory with accumulator
  |||||||   0x00006142      6362           rra (0x62,x)
  |||||||   0x00006144      7462           nop 0x62,x                  ; no operation
  |||||||   0x00006146      8462           sty 0x62                    ; store index y in memory
  |||||||   0x00006148      9462           sty 0x62,x                  ; store index y in memory
  |||||||   0x0000614a      a662           ldx 0x62                    ; load index x with memory
  |||||||   0x0000614c      b8             clv                         ; clear overflow flag
  |||||||   0x0000614d      62             hlt
  |||||||   0x0000614e      c962           cmp #0x62                   ; compare memory and accumulator
  |||||||   0x00006150      b8             clv                         ; clear overflow flag
  |||||||   0x00006151      62             hlt
  |||||||   0x00006152      5661           lsr 0x61,x                  ; shift right one bit (memory or accumulator)
  |||||||   0x00006154      5661           lsr 0x61,x                  ; shift right one bit (memory or accumulator)
  |||||||   0x00006156      a250           ldx #0x50                   ; load index x with memory
  --------> 0x00006158      a003           ldy #0x03                   ; load index y with memory
  --------> 0x0000615a      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x0000615d      8a             txa                         ; transfer index x to accumulator
  |||||||   0x0000615e      38             sec                         ; set carry flag
  --------> 0x0000615f      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  ========< 0x00006161      d0fc           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006163      88             dey                         ; decrement index y by one
  ========< 0x00006164      d0f4           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006166      ca             dex                         ; decrement index x by one
  |||||||   0x00006167      e030           cpx #0x30                   ; compare memory and index x
  ========< 0x00006169      d0ed           bne 0x4ed108                ; branch on result not zero
  |||`----> 0x0000616b      60             rts                         ; return from subroutine
  ||| |||   0x0000616c      8e4462         stx 0x6244                  ; store index x in memory
  ||| |||   0x0000616f      e8             inx                         ; increment index x by one
  ||| |||   0x00006170      48             pha                         ; push accumulator on stack
  ||| |||   0x00006171      a900           lda #0x00                   ; load accumulator with memory
  ---.----> 0x00006173      48             pha                         ; push accumulator on stack
  |||||||   0x00006174      68             pla                         ; pull accumulator from stack
  |||||||   0x00006175      ca             dex                         ; decrement index x by one
  ========< 0x00006176      d0fb           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006178      490f           eor #0x0f                   ; "exclusive-or" memory with accumulator
  |||||||   0x0000617a      8d18d4         sta 0xd418                  ; store accumulator in memory
  |||||||   0x0000617d      ae4462         ldx 0x6244                  ; load index x with memory
  |||||||   0x00006180      e8             inx                         ; increment index x by one
  |||||||   0x00006181      88             dey                         ; decrement index y by one
  |||`====< 0x00006182      d0ef           bne 0x4ed108                ; branch on result not zero
  ||| |||   0x00006184      68             pla                         ; pull accumulator from stack
  ||| |||   0x00006185      60             rts                         ; return from subroutine


  |||,====< 0x00006186      4c007b         jmp 0x7b00                  ; jump to new location
  |||||||   0x00006189      8e4462         stx 0x6244                  ; store index x in memory
  |||||||   0x0000618c      8c4562         sty 0x6245                  ; store index y in memory
  |||||||   0x0000618f      8e0962         stx 0x6209                  ; store index x in memory
  |||||||   0x00006192      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00006194      8d0862         sta 0x6208                  ; store accumulator in memory
  --------> 0x00006197      202601         jsr 0x0126                  ; jump to new location saving return address
  |||||||   0x0000619a      ad4562         lda 0x6245                  ; load accumulator with memory
  |||||||   0x0000619d      8d0a62         sta 0x620a                  ; store accumulator in memory
  |||||||   0x000061a0      ad0962         lda 0x6209                  ; load accumulator with memory
  |||||||   0x000061a3      18             clc                         ; clear carry flag
  |||||||   0x000061a4      6d0862         adc 0x6208                  ; add memory to accumulator with carry
  |||||||   0x000061a7      8d0762         sta 0x6207                  ; store accumulator in memory
  |||||||   0x000061aa      ad0862         lda 0x6208                  ; load accumulator with memory
  |||||||   0x000061ad      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000061ae      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000061af      8db961         sta 0x61b9                  ; store accumulator in memory
  --------> 0x000061b2      ae0762         ldx 0x6207                  ; load index x with memory
  --------> 0x000061b5      ca             dex                         ; decrement index x by one
  ========< 0x000061b6      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000061b8      490f           eor #0x0f                   ; "exclusive-or" memory with accumulator
  |||||||   0x000061ba      8d18d4         sta 0xd418                  ; store accumulator in memory
  |||||||   0x000061bd      ce0a62         dec 0x620a                  ; decrement memory by one
  ========< 0x000061c0      d0f0           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000061c2      ce0962         dec 0x6209                  ; decrement memory by one
  |||||||   0x000061c5      ee0862         inc 0x6208                  ; increment memory by one
  |||||||   0x000061c8      ad0862         lda 0x6208                  ; load accumulator with memory
  |||||||   0x000061cb      c91b           cmp #0x1b                   ; compare memory and accumulator
  ========< 0x000061cd      d0c8           bne 0x4ed108                ; branch on result not zero
  --------> 0x000061cf      ad4562         lda 0x6245                  ; load accumulator with memory
  |||||||   0x000061d2      8d0a62         sta 0x620a                  ; store accumulator in memory
  |||||||   0x000061d5      ad0962         lda 0x6209                  ; load accumulator with memory
  |||||||   0x000061d8      18             clc                         ; clear carry flag
  |||||||   0x000061d9      6d0862         adc 0x6208                  ; add memory to accumulator with carry
  |||||||   0x000061dc      8d0762         sta 0x6207                  ; store accumulator in memory
  |||||||   0x000061df      ad0862         lda 0x6208                  ; load accumulator with memory
  |||||||   0x000061e2      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000061e3      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||||||   0x000061e4      8dee61         sta 0x61ee                  ; store accumulator in memory
  --------> 0x000061e7      ae0762         ldx 0x6207                  ; load index x with memory
  --------> 0x000061ea      ca             dex                         ; decrement index x by one
  ========< 0x000061eb      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000061ed      490f           eor #0x0f                   ; "exclusive-or" memory with accumulator
  |||||||   0x000061ef      8d18d4         sta 0xd418                  ; store accumulator in memory
  |||||||   0x000061f2      ce0a62         dec 0x620a                  ; decrement memory by one
  ========< 0x000061f5      d0f0           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000061f7      ce0862         dec 0x6208                  ; decrement memory by one
  |||||||   0x000061fa      ee0962         inc 0x6209                  ; increment memory by one
  |||||||   0x000061fd      ad0862         lda 0x6208                  ; load accumulator with memory
  |||||||   0x00006200      c900           cmp #0x00                   ; compare memory and accumulator
  ========< 0x00006202      d0cb           bne 0x4ed108                ; branch on result not zero
  ||||`===< 0x00006204      4c2901         jmp 0x0129                  ; jump to new location
  |||| ||   0x00006207      00             brk                         ; force break
  |||| ||   0x00006208      00             brk                         ; force break
  |||| ||   0x00006209      00             brk                         ; force break
  |||| ||   0x0000620a      00             brk                         ; force break
  |||| ||   0x0000620b      a200           ldx #0x00                   ; load index x with memory
  |||| ||   0x0000620d      a008           ldy #0x08                   ; load index y with memory
  |||| ||   0x0000620f      8e4462         stx 0x6244                  ; store index x in memory
  ||||.---> 0x00006212      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x00006215      291f           and #0x1f                   ; "and" memory with accumulator
  |||||||   0x00006217      6d4462         adc 0x6244                  ; add memory to accumulator with carry
  |||||||   0x0000621a      aa             tax                         ; transfer accumulator to index x
  --------> 0x0000621b      48             pha                         ; push accumulator on stack
  |||||||   0x0000621c      68             pla                         ; pull accumulator from stack
  |||||||   0x0000621d      48             pha                         ; push accumulator on stack
  |||||||   0x0000621e      68             pla                         ; pull accumulator from stack
  |||||||   0x0000621f      ca             dex                         ; decrement index x by one
  ========< 0x00006220      d0f9           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006222      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x00006225      88             dey                         ; decrement index y by one
  ||||`===< 0x00006226      d0ea           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x00006228      60             rts                         ; return from subroutine
  |||| ||   0x00006229      a032           ldy #0x32                   ; load index y with memory
  ----.---> 0x0000622b      ea             nop                         ; no operation
  |||||||   0x0000622c      ea             nop                         ; no operation
  |||||||   0x0000622d      ca             dex                         ; decrement index x by one
  ========< 0x0000622e      d0fb           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006230      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x00006233      88             dey                         ; decrement index y by one
  ||||`===< 0x00006234      d0f5           bne 0x4ed108                ; branch on result not zero

local 0x6236: (wait and sound?)
  |||| ||   0x00006236      a032           ldy #0x32                   ; load index y with memory
  ----.---> 0x00006238      48             pha                         ; push accumulator on stack
  |||||||   0x00006239      68             pla                         ; pull accumulator from stack
  |||||||   0x0000623a      ca             dex                         ; decrement index x by one
  ========< 0x0000623b      d0fb           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000623d      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x00006240      88             dey                         ; decrement index y by one
  ||||`===< 0x00006241      d0f5           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x00006243      60             rts                         ; return from subroutine
  |||| ||   0x00006244      00             brk                   ; variable
  |||| ||   0x00006245      00             brk                   ; variable

local 0x6246: (wait 0x20*0x255)
  |||| ||   0x00006246      205362         jsr 0x6253                  ; jump to new location saving return address
  |||| ||   0x00006249      a2ff           ldx #0xff                   ; load index x with memory
  ||||.---> 0x0000624b      a020           ldy #0x20                   ; load index y with memory
  --------> 0x0000624d      88             dey                         ; decrement index y by one
  ========< 0x0000624e      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006250      ca             dex                         ; decrement index x by one
  ||||`===< 0x00006251      d0f8           bne 0x4ed108                ; branch on result not zero

local 0x6253: (wait and call 0x6bf0)
  |||| ||   0x00006253      a008           ldy #0x08                   ; load index y with memory
  ||||.---> 0x00006255      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  |||||||   0x00006258      aa             tax                         ; transfer accumulator to index x
  --------> 0x00006259      ca             dex                         ; decrement index x by one
  ========< 0x0000625a      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000625c      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x0000625f      88             dey                         ; decrement index y by one
  ||||`===< 0x00006260      d0f3           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x00006262      60             rts                         ; return from subroutine

local:
  |||| ||   0x00006263      a200           ldx #0x00                   ; load index x with memory
  |||| ||   0x00006265      86be           stx 0xbe                    ; store index x in memory
  ----.---> 0x00006267      e8             inx                         ; increment index x by one
  ========< 0x00006268      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000626a      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x0000626d      c6be           dec 0xbe                    ; decrement memory by one
  |||||||   0x0000626f      a6be           ldx 0xbe                    ; load index x with memory
  ||||`===< 0x00006271      d0f4           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x00006273      60             rts                         ; return from subroutine
  |||| ||   0x00006274      a9ff           lda #0xff                   ; load accumulator with memory
  |||| ||   0x00006276      aa             tax                         ; transfer accumulator to index x
  |||| ||   0x00006277      a8             tay                         ; transfer accumulator to index y
  ----.---> 0x00006278      ca             dex                         ; decrement index x by one
  ========< 0x00006279      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000627b      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x0000627e      88             dey                         ; decrement index y by one
  |||||||   0x0000627f      98             tya                         ; transfer index y to accumulator
  |||||||   0x00006280      aa             tax                         ; transfer accumulator to index x
  ||||`===< 0x00006281      30f5           bmi 0x4ed108                ; branch on result minus
  |||| ||   0x00006283      60             rts                         ; return from subroutine
  |||| ||   0x00006284      a980           lda #0x80                   ; load accumulator with memory
  |||| ||   0x00006286      aa             tax                         ; transfer accumulator to index x
  |||| ||   0x00006287      a8             tay                         ; transfer accumulator to index y
  ----.---> 0x00006288      ca             dex                         ; decrement index x by one
  ========< 0x00006289      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000628b      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x0000628e      c8             iny                         ; increment index y by one
  |||||||   0x0000628f      98             tya                         ; transfer index y to accumulator
  |||||||   0x00006290      aa             tax                         ; transfer accumulator to index x
  ||||`===< 0x00006291      30f5           bmi 0x4ed108                ; branch on result minus
  |||| ||   0x00006293      60             rts                         ; return from subroutine
  |||| ||   0x00006294      a0af           ldy #0xaf                   ; load index y with memory
  ||||.---> 0x00006296      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x00006299      297f           and #0x7f                   ; "and" memory with accumulator
  |||||||   0x0000629b      aa             tax                         ; transfer accumulator to index x
  --------> 0x0000629c      ca             dex                         ; decrement index x by one
  ========< 0x0000629d      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000629f      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x000062a2      88             dey                         ; decrement index y by one
  ||||`===< 0x000062a3      d0f1           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x000062a5      60             rts                         ; return from subroutine
  |||| ||   0x000062a6      a0af           ldy #0xaf                   ; load index y with memory
  ||||.---> 0x000062a8      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x000062ab      0980           ora #0x80                   ; "or" memory with accumulator
  |||||||   0x000062ad      aa             tax                         ; transfer accumulator to index x
  --------> 0x000062ae      ca             dex                         ; decrement index x by one
  ========< 0x000062af      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000062b1      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x000062b4      88             dey                         ; decrement index y by one
  ||||`===< 0x000062b5      d0f1           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x000062b7      60             rts                         ; return from subroutine
  |||| ||   0x000062b8      a27f           ldx #0x7f                   ; load index x with memory
  |||| ||   0x000062ba      86be           stx 0xbe                    ; store index x in memory
  ----.---> 0x000062bc      ca             dex                         ; decrement index x by one
  ========< 0x000062bd      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000062bf      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x000062c2      c6be           dec 0xbe                    ; decrement memory by one
  |||||||   0x000062c4      a6be           ldx 0xbe                    ; load index x with memory
  ||||`===< 0x000062c6      d0f4           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x000062c8      60             rts                         ; return from subroutine
  |||| ||   0x000062c9      86bf           stx 0xbf                    ; store index x in memory
  ||||.---> 0x000062cb      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x000062ce      a228           ldx #0x28                   ; load index x with memory
  --------> 0x000062d0      a8             tay                         ; transfer accumulator to index y
  --------> 0x000062d1      88             dey                         ; decrement index y by one
  ========< 0x000062d2      d0fd           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000062d4      48             pha                         ; push accumulator on stack
  |||||||   0x000062d5      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
  |||||||   0x000062d8      68             pla                         ; pull accumulator from stack
  |||||||   0x000062d9      ca             dex                         ; decrement index x by one
  ========< 0x000062da      d0f4           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000062dc      c6bf           dec 0xbf                    ; decrement memory by one
  ||||`===< 0x000062de      d0eb           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x000062e0      60             rts                         ; return from subroutine
  |||| ||   0x000062e1      00             brk                         ; force break
  |||| ||   0x000062e2      00             brk                         ; force break
  |||| ||   0x000062e3      00             brk                         ; force break
  |||| ||   0x000062e4      00             brk                         ; force break
  |||| ||   0x000062e5      a47a           ldy 0x7a                    ; load index y with memory
  |||| ||   0x000062e7      7a             nop                         ; no operation
  |||| ||   0x000062e8      00             brk                         ; force break
  |||| ||   0x000062e9      00             brk                         ; force break
  |||| ||   0x000062ea      a46c           ldy 0x6c                    ; load index y with memory
  |||| ||   0x000062ec      6c0000         jmp (0x0000)                ; jump to new location
  |||| ||   0x000062ef      7a             nop                         ; no operation
  ||||,===< 0x000062f0      5060           bvc 0x4ed108                ; branch on overflow clear
  ========< 0x000062f2      505a           bvc 0x4ed108                ; branch on overflow clear
  |||||||   0x000062f4      7a             nop                         ; no operation
  |||||||   0x000062f5      60             rts                         ; return from subroutine
  |||||||   0x000062f6      6ca47a         jmp (0x7aa4)                ; jump to new location
  |||||||   0x000062f9      00             brk                         ; force break
  |||||||   0x000062fa      00             brk                         ; force break
  |||||||   0x000062fb      00             brk                         ; force break
  |||||||   0x000062fc      a46c           ldy 0x6c                    ; load index y with memory
  |||||||   0x000062fe      00             brk                         ; force break
  |||||||   0x000062ff      00             brk                         ; force break
  |||||||   0x00006300      00             brk                         ; force break
  |||||||   0x00006301      7a             nop                         ; no operation
  ========< 0x00006302      5060           bvc 0x4ed108                ; branch on overflow clear
  |||||||   0x00006304      6c607a         jmp (0x7a60)                ; jump to new location
  |||||||   0x00006307      00             brk                         ; force break
  |||||||   0x00006308      00             brk                         ; force break
  |||||||   0x00006309      00             brk                         ; force break
  |||||||   0x0000630a      6c5454         jmp (0x5454)                ; jump to new location
  ========< 0x0000630d      506c           bvc 0x4ed108                ; branch on overflow clear
  |||||||   0x0000630f      60             rts                         ; return from subroutine
  |||||||   0x00006310      5450           nop 0x50,x                  ; no operation
  |||||||   0x00006312      6c7a60         jmp (0x607a)                ; jump to new location
  |||||||   0x00006315      6c7a80         jmp (0x807a)                ; jump to new location
  |||||||   0x00006318      92             hlt
  |||||||   0x00006319      a48e           ldy 0x8e                    ; load index y with memory
  | |||||   0x0000631b      3163           and (0x63),y                ; "and" memory with accumulator
  | |||||   0x0000631d      aa             tax                         ; transfer accumulator to index x
  |,======< 0x0000631e      f010           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006320      e063           cpx #0x63                   ; compare memory and index x
  ========< 0x00006322      b00a           bcs 0x4ed108                ; branch on carry set
  |||||||   0x00006324      f8             sed                         ; set decimal mode
  |||||||   0x00006325      a900           lda #0x00                   ; load accumulator with memory
  --------> 0x00006327      6901           adc #0x01                   ; add memory to accumulator with carry
  |||||||   0x00006329      ca             dex                         ; decrement index x by one
  ========< 0x0000632a      d0fb           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000632c      d8             cld                         ; clear decimal mode
  |||||||   0x0000632d      2ca999         bit 0x99a9                  ; test bits in memory with accumulator
  -`------> 0x00006330      a200           ldx #0x00                   ; load index x with memory
  | |||||   0x00006332      c900           cmp #0x00                   ; compare memory and accumulator
  | |||||   0x00006334      60             rts                         ; return from subroutine
  --------> 0x00006335      8e3163         stx 0x6331                  ; store index x in memory
  | |||||   0x00006338      c900           cmp #0x00                   ; compare memory and accumulator
  ========< 0x0000633a      f0f4           beq 0x4ed108                ; branch on result zero
  | |||||   0x0000633c      a200           ldx #0x00                   ; load index x with memory
  | |||||   0x0000633e      f8             sed                         ; set decimal mode
  |.------> 0x0000633f      e8             inx                         ; increment index x by one
  |||||||   0x00006340      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
  |`======< 0x00006342      d0fb           bne 0x4ed108                ; branch on result not zero
  | |||||   0x00006344      8a             txa                         ; transfer index x to accumulator
  | |||||   0x00006345      d8             cld                         ; clear decimal mode
  ========< 0x00006346      d0e8           bne 0x4ed108                ; branch on result not zero
  | |||||   0x00006348      c900           cmp #0x00                   ; compare memory and accumulator
  |,======< 0x0000634a      f007           beq 0x4ed108                ; branch on result zero
  ========< 0x0000634c      3003           bmi 0x4ed108                ; branch on result minus
  --------> 0x0000634e      a901           lda #0x01                   ; load accumulator with memory
  |||||||   0x00006350      60             rts                         ; return from subroutine
  --------> 0x00006351      a9ff           lda #0xff                   ; load accumulator with memory
  |`------> 0x00006353      60             rts                         ; return from subroutine
  --------> 0x00006354      18             clc                         ; clear carry flag
  | || ||   0x00006355      a52d           lda 0x2d                    ; load accumulator with memory
  | || ||   0x00006357      65a7           adc 0xa7                    ; add memory to accumulator with carry
  | || ||   0x00006359      85a9           sta 0xa9                    ; store accumulator in memory
  | || ||   0x0000635b      18             clc                         ; clear carry flag
  | || ||   0x0000635c      a52e           lda 0x2e                    ; load accumulator with memory
  | || ||   0x0000635e      65a8           adc 0xa8                    ; add memory to accumulator with carry
  | || ||   0x00006360      85aa           sta 0xaa                    ; store accumulator in memory
  | || ||   0x00006362      60             rts                         ; return from subroutine
  --------> 0x00006363      18             clc                         ; clear carry flag
  --------> 0x00006364      a5a9           lda 0xa9                    ; load accumulator with memory
  | || ||   0x00006366      65a7           adc 0xa7                    ; add memory to accumulator with carry
  | || ||   0x00006368      85a9           sta 0xa9                    ; store accumulator in memory
  | || ||   0x0000636a      18             clc                         ; clear carry flag
  | || ||   0x0000636b      a5aa           lda 0xaa                    ; load accumulator with memory
  | || ||   0x0000636d      65a8           adc 0xa8                    ; add memory to accumulator with carry
  | || ||   0x0000636f      85aa           sta 0xaa                    ; store accumulator in memory
  | || ||   0x00006371      60             rts                         ; return from subroutine
  --------> 0x00006372      a000           ldy #0x00                   ; load index y with memory
  | || ||   0x00006374      a200           ldx #0x00                   ; load index x with memory
  | || ||   0x00006376      20ba63         jsr 0x63ba                  ; jump to new location saving return address
  | || ||   0x00006379      a001           ldy #0x01                   ; load index y with memory
  --------> 0x0000637b      a20f           ldx #0x0f                   ; load index x with memory
  | || ||   0x0000637d      20b863         jsr 0x63b8                  ; jump to new location saving return address
  | || ||   0x00006380      a080           ldy #0x80                   ; load index y with memory
  | || ||   0x00006382      a2ff           ldx #0xff                   ; load index x with memory
  | || ||   0x00006384      20b863         jsr 0x63b8                  ; jump to new location saving return address
  | || ||   0x00006387      a010           ldy #0x10                   ; load index y with memory
  | || ||   0x00006389      a211           ldx #0x11                   ; load index x with memory
  | || ||   0x0000638b      20b863         jsr 0x63b8                  ; jump to new location saving return address
  | || ||   0x0000638e      a030           ldy #0x30                   ; load index y with memory
  | || ||   0x00006390      a27f           ldx #0x7f                   ; load index x with memory
  | || ||   0x00006392      20b863         jsr 0x63b8                  ; jump to new location saving return address
  | || ||   0x00006395      a001           ldy #0x01                   ; load index y with memory
  | || ||   0x00006397      a20f           ldx #0x0f                   ; load index x with memory
  | || ||   0x00006399      20ba63         jsr 0x63ba                  ; jump to new location saving return address
  | || ||   0x0000639c      a080           ldy #0x80                   ; load index y with memory
  | || ||   0x0000639e      a2ff           ldx #0xff                   ; load index x with memory
  | || ||   0x000063a0      20ba63         jsr 0x63ba                  ; jump to new location saving return address
  | || ||   0x000063a3      a010           ldy #0x10                   ; load index y with memory
  | || ||   0x000063a5      a211           ldx #0x11                   ; load index x with memory
  | || ||   0x000063a7      20ba63         jsr 0x63ba                  ; jump to new location saving return address
  | || ||   0x000063aa      a030           ldy #0x30                   ; load index y with memory
  | || ||   0x000063ac      a27f           ldx #0x7f                   ; load index x with memory
  | || ||   0x000063ae      20ba63         jsr 0x63ba                  ; jump to new location saving return address
  | || ||   0x000063b1      a000           ldy #0x00                   ; load index y with memory
  | || ||   0x000063b3      a2ff           ldx #0xff                   ; load index x with memory
  | || ||   0x000063b5      20ba63         jsr 0x63ba                  ; jump to new location saving return address
  | || ||   0x000063b8      18             clc                         ; clear carry flag
  | || ||   0x000063b9      2438           bit 0x38                    ; test bits in memory with accumulator
  | || ||   0x000063bb      6ece63         ror 0x63ce                  ; rotate one bit right (memory or accumulator)
  | || ||   0x000063be      8ef563         stx 0x63f5                  ; store index x in memory
  | ||.---> 0x000063c1      a217           ldx #0x17                   ; load index x with memory
  |.------> 0x000063c3      98             tya                         ; transfer index y to accumulator
  |||||||   0x000063c4      c9b5           cmp #0xb5                   ; compare memory and accumulator
  ========< 0x000063c6      f029           beq 0x4ed108                ; branch on result zero
  |||||||   0x000063c8      dd004a         cmp 0x4a00,x                ; compare memory and accumulator
  ========< 0x000063cb      d024           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000063cd      a9ff           lda #0xff                   ; load accumulator with memory
  ========< 0x000063cf      302b           bmi 0x4ed108                ; branch on result minus
  |||||||   0x000063d1      a52d           lda 0x2d                    ; load accumulator with memory
  |||||||   0x000063d3      38             sec                         ; set carry flag
  |||||||   0x000063d4      fd404a         sbc 0x4a40,x                ; subtract memory from accumulator with borrow
  ========< 0x000063d7      b004           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000063d9      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
  |||||||   0x000063db      6901           adc #0x01                   ; add memory to accumulator with carry
  --------> 0x000063dd      c906           cmp #0x06                   ; compare memory and accumulator
  ========< 0x000063df      9010           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000063e1      a52e           lda 0x2e                    ; load accumulator with memory
  |||||||   0x000063e3      38             sec                         ; set carry flag
  |||||||   0x000063e4      fd604a         sbc 0x4a60,x                ; subtract memory from accumulator with borrow
  ========< 0x000063e7      b004           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000063e9      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
  |||||||   0x000063eb      6901           adc #0x01                   ; add memory to accumulator with carry
  --------> 0x000063ed      c906           cmp #0x06                   ; compare memory and accumulator
  ========< 0x000063ef      b00b           bcs 0x4ed108                ; branch on carry set
  --------> 0x000063f1      ca             dex                         ; decrement index x by one
  |`======< 0x000063f2      d0cf           bne 0x4ed108                ; branch on result not zero
  | |||||   0x000063f4      c0ff           cpy #0xff                   ; compare memory and index y
  |,======< 0x000063f6      f006           beq 0x4ed108                ; branch on result zero
  |||||||   0x000063f8      c8             iny                         ; increment index y by one
  ||||`===< 0x000063f9      4cc163         jmp 0x63c1                  ; jump to new location
  --------> 0x000063fc      68             pla                         ; pull accumulator from stack
  |||| ||   0x000063fd      68             pla                         ; pull accumulator from stack
  |`------> 0x000063fe      60             rts                         ; return from subroutine
  ----.---> 0x000063ff      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  | |||||   0x00006402      291f           and #0x1f                   ; "and" memory with accumulator
  | |||||   0x00006404      18             clc                         ; clear carry flag
  | |||||   0x00006405      6901           adc #0x01                   ; add memory to accumulator with carry
  | |||||   0x00006407      c91f           cmp #0x1f                   ; compare memory and accumulator
  | ||`===< 0x00006409      b0f4           bcs 0x4ed108                ; branch on carry set
  | || ||   0x0000640b      60             rts                         ; return from subroutine
  --------> 0x0000640c      8a             txa                         ; transfer index x to accumulator
  | || ||   0x0000640d      8d1364         sta 0x6413                  ; store accumulator in memory
  | || ||   0x00006410      38             sec                         ; set carry flag
  | || ||   0x00006411      98             tya                         ; transfer index y to accumulator
  | || ||   0x00006412      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
  | || ||   0x00006414      18             clc                         ; clear carry flag
  | || ||   0x00006415      691e           adc #0x1e                   ; add memory to accumulator with carry
  | || ||   0x00006417      4a             lsr a                       ; shift right one bit (memory or accumulator)
  | || ||   0x00006418      6900           adc #0x00                   ; add memory to accumulator with carry
  | || ||   0x0000641a      60             rts                         ; return from subroutine
  --------> 0x0000641b      86fc           stx 0xfc                    ; store index x in memory
  | || ||   0x0000641d      85fd           sta 0xfd                    ; store accumulator in memory
  | || ||   0x0000641f      4a             lsr a                       ; shift right one bit (memory or accumulator)
  | || ||   0x00006420      4a             lsr a                       ; shift right one bit (memory or accumulator)
  | || ||   0x00006421      aa             tax                         ; transfer accumulator to index x
  | || ||   0x00006422      bd4265         lda 0x6542,x                ; load accumulator with memory
  | || ||   0x00006425      0a             asl a                       ; shift left one bit (memory or accumulator)
  | ||,===< 0x00006426      b009           bcs 0x4ed108                ; branch on carry set
  | |||||   0x00006428      a8             tay                         ; transfer accumulator to index y
  | |||||   0x00006429      b93464         lda 0x6434,y                ; load accumulator with memory
  | |||||   0x0000642c      48             pha                         ; push accumulator on stack
  | |||||   0x0000642d      b93364         lda 0x6433,y                ; load accumulator with memory
  | |||||   0x00006430      48             pha                         ; push accumulator on stack
  | ||`---> 0x00006431      18             clc                         ; clear carry flag
  | || ||   0x00006432      60             rts                         ; return from subroutine
  | || ||   0x00006433      48             pha                         ; push accumulator on stack
  | || ||   0x00006434      6474           nop 0x74                    ; no operation
  | || ||   0x00006436      6497           nop 0x97                    ; no operation
  | || ||   0x00006438      6486           nop 0x86                    ; no operation
  | || ||   0x0000643a      64a8           nop 0xa8                    ; no operation
  | || ||   0x0000643c      64af           nop 0xaf                    ; no operation
  | || ||   0x0000643e      64fe           nop 0xfe                    ; no operation
  | || ||   0x00006440      640b           nop 0x0b                    ; no operation
  | || ||   0x00006442      650e           adc 0x0e                    ; add memory to accumulator with carry
  | || ||   0x00006444      6508           adc 0x08                    ; add memory to accumulator with carry
  | || ||   0x00006446      6511           adc 0x11                    ; add memory to accumulator with carry
  | || ||   0x00006448      65a5           adc 0xa5                    ; add memory to accumulator with carry
  | || ||   0x0000644a      fd4ac9         sbc 0xc94a,x                ; subtract memory from accumulator with borrow
  | || ||   0x0000644d      0ef00f         asl 0x0ff0                  ; shift left one bit (memory or accumulator)
  | || ||   0x00006450      29f8           and #0xf8                   ; "and" memory with accumulator
  | || ||   0x00006452      c920           cmp #0x20                   ; compare memory and accumulator
  | ||,===< 0x00006454      f009           beq 0x4ed108                ; branch on result zero
  | |||||   0x00006456      a5fc           lda 0xfc                    ; load accumulator with memory
  | |||||   0x00006458      29fc           and #0xfc                   ; "and" memory with accumulator
  | |||||   0x0000645a      c990           cmp #0x90                   ; compare memory and accumulator
  | |||||   0x0000645c      18             clc                         ; clear carry flag
  |,======< 0x0000645d      f015           beq 0x4ed108                ; branch on result zero
  ||||`---> 0x0000645f      a5fc           lda 0xfc                    ; load accumulator with memory
  |||| ||   0x00006461      2907           and #0x07                   ; "and" memory with accumulator
  |||| ||   0x00006463      aa             tax                         ; transfer accumulator to index x
  |||| ||   0x00006464      a5fc           lda 0xfc                    ; load accumulator with memory
  |||| ||   0x00006466      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||| ||   0x00006467      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||| ||   0x00006468      4a             lsr a                       ; shift right one bit (memory or accumulator)
  |||| ||   0x00006469      a8             tay                         ; transfer accumulator to index y
  |||| ||   0x0000646a      b92265         lda 0x6522,y                ; load accumulator with memory
  |||| ||   0x0000646d      3d1a65         and 0x651a,x                ; "and" memory with accumulator
  |||| ||   0x00006470      18             clc                         ; clear carry flag
  ||||,===< 0x00006471      d001           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006473      38             sec                         ; set carry flag
  |`--`---> 0x00006474      60             rts                         ; return from subroutine
  | || ||   0x00006475      a5fc           lda 0xfc                    ; load accumulator with memory
  | || ||   0x00006477      c904           cmp #0x04                   ; compare memory and accumulator
  | ||,===< 0x00006479      900a           bcc 0x4ed108                ; branch on carry clear
  | |||||   0x0000647b      c960           cmp #0x60                   ; compare memory and accumulator
  |,======< 0x0000647d      9004           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x0000647f      c970           cmp #0x70                   ; compare memory and accumulator
  ========< 0x00006481      9002           bcc 0x4ed108                ; branch on carry clear
  |`------> 0x00006483      18             clc                         ; clear carry flag
  | |||||   0x00006484      60             rts                         ; return from subroutine
  -.--`---> 0x00006485      38             sec                         ; set carry flag
  ||||.---> 0x00006486      60             rts                         ; return from subroutine
  |||||||   0x00006487      204964         jsr 0x6449                  ; jump to new location saving return address
  ||||`===< 0x0000648a      90fa           bcc 0x4ed108                ; branch on carry clear
  |||| ||   0x0000648c      a5fc           lda 0xfc                    ; load accumulator with memory
  |||| ||   0x0000648e      c98f           cmp #0x8f                   ; compare memory and accumulator
  ||||,===< 0x00006490      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006492      c904           cmp #0x04                   ; compare memory and accumulator
  ========< 0x00006494      d0ef           bne 0x4ed108                ; branch on result not zero
  ||||`---> 0x00006496      18             clc                         ; clear carry flag
  |||| ||   0x00006497      60             rts                         ; return from subroutine
  |||| ||   0x00006498      a5fc           lda 0xfc                    ; load accumulator with memory
  |||| ||   0x0000649a      29f0           and #0xf0                   ; "and" memory with accumulator
  |||| ||   0x0000649c      c960           cmp #0x60                   ; compare memory and accumulator
  ||||,===< 0x0000649e      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x000064a0      204964         jsr 0x6449                  ; jump to new location saving return address
  ========< 0x000064a3      b003           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000064a5      207564         jsr 0x6475                  ; jump to new location saving return address
  ----`---> 0x000064a8      60             rts                         ; return from subroutine
  |||| ||   0x000064a9      207564         jsr 0x6475                  ; jump to new location saving return address
  |`======< 0x000064ac      90d7           bcc 0x4ed108                ; branch on carry clear
  | || ||   0x000064ae      18             clc                         ; clear carry flag
  | || ||   0x000064af      60             rts                         ; return from subroutine
  | || ||   0x000064b0      a5fc           lda 0xfc                    ; load accumulator with memory
  | || ||   0x000064b2      29fc           and #0xfc                   ; "and" memory with accumulator
  | || ||   0x000064b4      c934           cmp #0x34                   ; compare memory and accumulator
  | ||,===< 0x000064b6      f034           beq 0x4ed108                ; branch on result zero
  | |||||   0x000064b8      207564         jsr 0x6475                  ; jump to new location saving return address
  |,======< 0x000064bb      9016           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000064bd      a5fc           lda 0xfc                    ; load accumulator with memory
  |||||||   0x000064bf      4960           eor #0x60                   ; "exclusive-or" memory with accumulator
  |||||||   0x000064c1      c910           cmp #0x10                   ; compare memory and accumulator
  ========< 0x000064c3      b00e           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000064c5      aa             tax                         ; transfer accumulator to index x
  |||||||   0x000064c6      a5fd           lda 0xfd                    ; load accumulator with memory
  |||||||   0x000064c8      2903           and #0x03                   ; "and" memory with accumulator
  |||||||   0x000064ca      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000064cb      b9e864         lda 0x64e8,y                ; load accumulator with memory
  |||||||   0x000064ce      3dd864         and 0x64d8,x                ; "and" memory with accumulator
  |||||||   0x000064d1      c901           cmp #0x01                   ; compare memory and accumulator
  -`------> 0x000064d3      60             rts                         ; return from subroutine
  | |||||   0x000064d4      0603           asl 0x03                    ; shift left one bit (memory or accumulator)
  | |||||   0x000064d6      090c           ora #0x0c                   ; "or" memory with accumulator
  | |||||   0x000064d8      0a             asl a                       ; shift left one bit (memory or accumulator)
  | |||||   0x000064d9      0503           ora 0x03                    ; "or" memory with accumulator
  | |||||   0x000064db      090c           ora #0x0c                   ; "or" memory with accumulator
  | |||||   0x000064dd      060b           asl 0x0b                    ; shift left one bit (memory or accumulator)
  | |||||   0x000064df      0d0e07         ora 0x070e                  ; "or" memory with accumulator
  | |||||   0x000064e2      0a             asl a                       ; shift left one bit (memory or accumulator)
  | |||||   0x000064e3      0508           ora 0x08                    ; "or" memory with accumulator
  | |||||   0x000064e5      0402           nop 0x02                    ; no operation
  | |||||   0x000064e7      0108           ora (0x08,x)                ; "or" memory with accumulator
  | |||||   0x000064e9      0402           nop 0x02                    ; no operation
  | |||||   0x000064eb      01a5           ora (0xa5,x)                ; "or" memory with accumulator
  | || ||   0x000064ed      fd2903         sbc 0x0329,x                ; subtract memory from accumulator with borrow
  | || ||   0x000064f0      a8             tay                         ; transfer accumulator to index y
  | || ||   0x000064f1      a5fc           lda 0xfc                    ; load accumulator with memory
  | || ||   0x000064f3      2903           and #0x03                   ; "and" memory with accumulator
  | || ||   0x000064f5      aa             tax                         ; transfer accumulator to index x
  | || ||   0x000064f6      b9e864         lda 0x64e8,y                ; load accumulator with memory
  | || ||   0x000064f9      3dd464         and 0x64d4,x                ; "and" memory with accumulator
  | || ||   0x000064fc      c901           cmp #0x01                   ; compare memory and accumulator
  | || ||   0x000064fe      60             rts                         ; return from subroutine
  | || ||   0x000064ff      a6fc           ldx 0xfc                    ; load index x with memory
  | || ||   0x00006501      ca             dex                         ; decrement index x by one
  | ||,===< 0x00006502      f003           beq 0x4ed108                ; branch on result zero
  | |||||   0x00006504      ca             dex                         ; decrement index x by one
  |,======< 0x00006505      d001           bne 0x4ed108                ; branch on result not zero
  ||||`---> 0x00006507      38             sec                         ; set carry flag
  |`------> 0x00006508      60             rts                         ; return from subroutine
  | || ||   0x00006509      a901           lda #0x01                   ; load accumulator with memory
  | || ||   0x0000650b      2ca904         bit 0x04a9                  ; test bits in memory with accumulator
  | || ||   0x0000650e      2ca905         bit 0x05a9                  ; test bits in memory with accumulator
  | || ||   0x00006511      2ca907         bit 0x07a9                  ; test bits in memory with accumulator
  | || ||   0x00006514      45fc           eor 0xfc                    ; "exclusive-or" memory with accumulator
  | ||,===< 0x00006516      d001           bne 0x4ed108                ; branch on result not zero
  | |||||   0x00006518      38             sec                         ; set carry flag
  | ||`---> 0x00006519      60             rts                         ; return from subroutine
  | || ||   0x0000651a      8040           nop #0x40                   ; no operation
  | || ||   0x0000651c      201008         jsr 0x0810                  ; jump to new location saving return address
  | || ||   0x0000651f      0402           nop 0x02                    ; no operation
  | || ||   0x00006521      0170           ora (0x70,x)                ; "or" memory with accumulator
  | || ||   0x00006523      0c0028         nop 0x2800                  ; no operation
  | || ||   0x00006526      01f3           ora (0xf3,x)                ; "or" memory with accumulator
  | || ||   0x00006528      00             brk                         ; force break
  | || ||   0x00006529      bd723f         lda 0x3f72,x                ; load accumulator with memory
  | || ||   0x0000652c      ffffff         isb 0xffff,x
  | || ||   0x0000652f      cfffff         dcp 0xffff
  | || ||   0x00006532      fcf60f         nop 0x0ff6,x                ; no operation
  | || ||   0x00006535      ffffc7         isb 0xc7ff,x
  | || ||   0x00006538      fff7f0         isb 0xf0f7,x
  | |||||   0x0000653b      3ffff3         rla 0xf3ff,x
  | |||||   0x0000653e      ffffff         isb 0xffff,x
  | |||||   0x00006541      fe0000         inc 0x0000,x                ; increment memory by one
  | |||||   0x00006544      00             brk                         ; force break
  | |||||   0x00006545      00             brk                         ; force break
  | |||||   0x00006546      0302           slo (0x02,x)
  | |||||   0x00006548      00             brk                         ; force break
  | |||||   0x00006549      00             brk                         ; force break
  | |||||   0x0000654a      0606           asl 0x06                    ; shift left one bit (memory or accumulator)
  | |||||   0x0000654c      0506           ora 0x06                    ; "or" memory with accumulator
  | |||||   0x0000654e      00             brk                         ; force break
  | |||||   0x0000654f      00             brk                         ; force break
  | |||||   0x00006550      00             brk                         ; force break
  | |||||   0x00006551      00             brk                         ; force break
  | |||||   0x00006552      00             brk                         ; force break
  | |||||   0x00006553      00             brk                         ; force break
  | |||||   0x00006554      00             brk                         ; force break
  | |||||   0x00006555      00             brk                         ; force break
  | |||||   0x00006556      00             brk                         ; force break
  | |||||   0x00006557      00             brk                         ; force break
  | |||||   0x00006558      00             brk                         ; force break
  | |||||   0x00006559      00             brk                         ; force break
  | |||||   0x0000655a      00             brk                         ; force break
  | |||||   0x0000655b      00             brk                         ; force break
  | |||||   0x0000655c      00             brk                         ; force break
  | |||||   0x0000655d      00             brk                         ; force break
  | |||||   0x0000655e      00             brk                         ; force break
  | |||||   0x0000655f      02             hlt
  | |||||   0x00006560      00             brk                         ; force break
  | |||||   0x00006561      02             hlt
  | |||||   0x00006562      0101           ora (0x01,x)                ; "or" memory with accumulator
  | |||||   0x00006564      0101           ora (0x01,x)                ; "or" memory with accumulator
  | |||||   0x00006566      00             brk                         ; force break
  | |||||   0x00006567      02             hlt
  | |||||   0x00006568      00             brk                         ; force break
  | |||||   0x00006569      0400           nop 0x00                    ; no operation
  | |||||   0x0000656b      00             brk                         ; force break
  | |||||   0x0000656c      00             brk                         ; force break
  | |||||   0x0000656d      00             brk                         ; force break
  | |||||   0x0000656e      02             hlt
  | |||||   0x0000656f      00             brk                         ; force break
  | |||||   0x00006570      00             brk                         ; force break
  | |||||   0x00006571      00             brk                         ; force break
  | |||||   0x00006572      00             brk                         ; force break
  | |||||   0x00006573      00             brk                         ; force break
  | |||||   0x00006574      00             brk                         ; force break
  | |||||   0x00006575      00             brk                         ; force break
  | |||||   0x00006576      00             brk                         ; force break
  | |||||   0x00006577      00             brk                         ; force break
  | |||||   0x00006578      02             hlt
  | |||||   0x00006579      02             hlt
  | |||||   0x0000657a      0a             asl a                       ; shift left one bit (memory or accumulator)
  | ||`---> 0x0000657b      00             brk                         ; force break
  | || ||   0x0000657c      ff0902         isb 0x0209,x
  | || ||   0x0000657f      08             php                         ; push processor status on stack
  | || ||   0x00006580      0704           slo 0x04
  --------> 0x00006582      a000           ldy #0x00                   ; load index y with memory
  | || ||   0x00006584      8c7866         sty 0x6678                  ; store index y in memory
  | || ||   0x00006587      a5c9           lda 0xc9                    ; load accumulator with memory
  | || ||   0x00006589      8dab65         sta 0x65ab                  ; store accumulator in memory
  | || ||   0x0000658c      a5ca           lda 0xca                    ; load accumulator with memory
  | || ||   0x0000658e      8daf65         sta 0x65af                  ; store accumulator in memory
  | || ||   0x00006591      a900           lda #0x00                   ; load accumulator with memory
  | || ||   0x00006593      85ca           sta 0xca                    ; store accumulator in memory
  | || ||   0x00006595      a91b           lda #0x1b                   ; load accumulator with memory
  | || ||   0x00006597      85c9           sta 0xc9                    ; store accumulator in memory
  | || ||   0x00006599      a91e           lda #0x1e                   ; load accumulator with memory
  | || ||   0x0000659b      20595a         jsr 0x5a59                  ; jump to new location saving return address
  | || ||   0x0000659e      203868         jsr 0x6838                  ; jump to new location saving return address
  | || ||   0x000065a1      d3e5           dcp (0xe5),y
  | || ||   0x000065a3      ece5e3         cpx 0xe3e5                  ; compare memory and index x
  | || ||   0x000065a6      f4ba           nop 0xba,x                  ; no operation
  | || ||   0x000065a8      1c00a9         nop 0xa900,x                ; no operation
  | || ||   0x000065ab      00             brk                         ; force break
  | || ||   0x000065ac      85c9           sta 0xc9                    ; store accumulator in memory
  | || ||   0x000065ae      a900           lda #0x00                   ; load accumulator with memory
  | || ||   0x000065b0      85ca           sta 0xca                    ; store accumulator in memory
  | ||.---> 0x000065b2      207966         jsr 0x6679                  ; jump to new location saving return address
  | |||||   0x000065b5      ad7866         lda 0x6678                  ; load accumulator with memory
  | |||||   0x000065b8      8d2866         sta 0x6628                  ; store accumulator in memory
  -.------> 0x000065bb      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  |||||||   0x000065be      c9b1           cmp #0xb1                   ; compare memory and accumulator
  ========< 0x000065c0      901b           bcc 0x4ed108                ; branch on carry clear
  |||||||   0x000065c2      c9b7           cmp #0xb7                   ; compare memory and accumulator
  ========< 0x000065c4      b017           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000065c6      e9b0           sbc #0xb0                   ; subtract memory from accumulator with borrow
  |||||||   0x000065c8      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000065c9      cc7866         cpy 0x6678                  ; compare memory and index y
  ========< 0x000065cc      f00f           beq 0x4ed108                ; branch on result zero
  |||||||   0x000065ce      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000065cf      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000065d0      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000065d1      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000065d2      aa             tax                         ; transfer accumulator to index x
  |||||||   0x000065d3      bd8010         lda 0x1080,x                ; load accumulator with memory
  ========< 0x000065d6      d0e3           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000065d8      8c7866         sty 0x6678                  ; store index y in memory
  ========< 0x000065db      104a           bpl 0x4ed108                ; branch on result plus
  --------> 0x000065dd      a0ff           ldy #0xff                   ; load index y with memory
  --------> 0x000065df      c8             iny                         ; increment index y by one
  |||||||   0x000065e0      be5766         ldx 0x6657,y                ; load index x with memory
  ========< 0x000065e3      f0d6           beq 0x4ed108                ; branch on result zero
  |||||||   0x000065e5      d95766         cmp 0x6657,y                ; compare memory and accumulator
  ========< 0x000065e8      d0f5           bne 0x4ed108                ; branch on result not zero
  |||||||   0x000065ea      b96866         lda 0x6668,y                ; load accumulator with memory
  |||||||   0x000065ed      c9f5           cmp #0xf5                   ; compare memory and accumulator
  ========< 0x000065ef      f03e           beq 0x4ed108                ; branch on result zero
  |||||||   0x000065f1      c9e4           cmp #0xe4                   ; compare memory and accumulator
  ========< 0x000065f3      f049           beq 0x4ed108                ; branch on result zero
  |||||||   0x000065f5      c9f8           cmp #0xf8                   ; compare memory and accumulator
  ========< 0x000065f7      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x000065f9      ad7866         lda 0x6678                  ; load accumulator with memory
  |||||||   0x000065fc      2ca9ff         bit 0xffa9                  ; test bits in memory with accumulator
  |||||||   0x000065ff      857b           sta 0x7b                    ; store accumulator in memory
  |||||||   0x00006601      48             pha                         ; push accumulator on stack
  |||||||   0x00006602      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00006604      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00006606      a91b           lda #0x1b                   ; load accumulator with memory
  |||||||   0x00006608      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x0000660a      207966         jsr 0x6679                  ; jump to new location saving return address
  |||||||   0x0000660d      a209           ldx #0x09                   ; load index x with memory
  --------> 0x0000660f      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00006610      48             pha                         ; push accumulator on stack
  |||||||   0x00006611      a904           lda #0x04                   ; load accumulator with memory
  |||||||   0x00006613      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x00006616      68             pla                         ; pull accumulator from stack
  |||||||   0x00006617      aa             tax                         ; transfer accumulator to index x
  |||||||   0x00006618      ca             dex                         ; decrement index x by one
  ========< 0x00006619      d0f4           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000661b      adab65         lda 0x65ab                  ; load accumulator with memory
  |||||||   0x0000661e      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x00006620      adaf65         lda 0x65af                  ; load accumulator with memory
  |||||||   0x00006623      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x00006625      68             pla                         ; pull accumulator from stack
  |||||||   0x00006626      60             rts                         ; return from subroutine
  --------> 0x00006627      a900           lda #0x00                   ; load accumulator with memory
  |||||||   0x00006629      207c66         jsr 0x667c                  ; jump to new location saving return address
  ||||`===< 0x0000662c      4cb265         jmp 0x65b2                  ; jump to new location
  --------> 0x0000662f      ae7866         ldx 0x6678                  ; load index x with memory
  |||| ||   0x00006632      ca             dex                         ; decrement index x by one
  ========< 0x00006633      3086           bmi 0x4ed108                ; branch on result minus
  ||||.---> 0x00006635      8e7866         stx 0x6678                  ; store index x in memory
  |||||||   0x00006638      200c5d         jsr 0x5d0c                  ; jump to new location saving return address
  ========< 0x0000663b      4c2766         jmp 0x6627                  ; jump to new location
  --------> 0x0000663e      ae7866         ldx 0x6678                  ; load index x with memory
  --------> 0x00006641      e8             inx                         ; increment index x by one
  |||||||   0x00006642      e006           cpx #0x06                   ; compare memory and index x
  ========< 0x00006644      d003           bne 0x4ed108                ; branch on result not zero
  |`======< 0x00006646      4cbb65         jmp 0x65bb                  ; jump to new location
  --------> 0x00006649      8a             txa                         ; transfer index x to accumulator
  | |||||   0x0000664a      0a             asl a                       ; shift left one bit (memory or accumulator)
  | |||||   0x0000664b      0a             asl a                       ; shift left one bit (memory or accumulator)
  | |||||   0x0000664c      0a             asl a                       ; shift left one bit (memory or accumulator)
  | |||||   0x0000664d      0a             asl a                       ; shift left one bit (memory or accumulator)
  | |||||   0x0000664e      a8             tay                         ; transfer accumulator to index y
  | |||||   0x0000664f      b98010         lda 0x1080,y                ; load accumulator with memory
  ========< 0x00006652      d0ed           bne 0x4ed108                ; branch on result not zero
  | ||`===< 0x00006654      4c3566         jmp 0x6635                  ; jump to new location
  | || ||   0x00006657      af11bb         lax 0xbb11
  | || ||   0x0000665a      1dc091         ora 0x91c0,x                ; "or" memory with accumulator
  | || ||   0x0000665d      ba             tsx                         ; transfer stack pointer to index x
  | || ||   0x0000665e      9ddf85         sta 0x85df,x                ; store accumulator in memory
  | || ||   0x00006661      a00d           ldy #0x0d                   ; load index y with memory
  | || ||   0x00006663      c1d4           cmp (0xd4,x)                ; compare memory and accumulator
  | || ||   0x00006665      c5cb           cmp 0xcb                    ; compare memory and accumulator
  | || ||   0x00006667      00             brk                         ; force break
  | || ||   0x00006668      e4e4           cpx 0xe4                    ; compare memory and index x
  | || ||   0x0000666a      e4e4           cpx 0xe4                    ; compare memory and index x
  | || ||   0x0000666c      f5f5           sbc 0xf5,x                  ; subtract memory from accumulator with borrow
  | || ||   0x0000666e      f5f5           sbc 0xf5,x                  ; subtract memory from accumulator with borrow
  | || ||   0x00006670      f8             sed                         ; set decimal mode
  | || ||   0x00006671      f8             sed                         ; set decimal mode
  | || ||   0x00006672      f2             hlt
  | || ||   0x00006673      f2             hlt
  | || ||   0x00006674      f2             hlt
  | || ||   0x00006675      f2             hlt
  | || ||   0x00006676      f2             hlt
  | || ||   0x00006677      f2             hlt
  | || ||   0x00006678      00             brk                         ; force break
  | || ||   0x00006679      ad7866         lda 0x6678                  ; load accumulator with memory
  --------> 0x0000667c      0a             asl a                       ; shift left one bit (memory or accumulator)
  | || ||   0x0000667d      0a             asl a                       ; shift left one bit (memory or accumulator)
  | || ||   0x0000667e      0a             asl a                       ; shift left one bit (memory or accumulator)
  | || ||   0x0000667f      6908           adc #0x08                   ; add memory to accumulator with carry
  | || ||   0x00006681      aa             tax                         ; transfer accumulator to index x
  | || ||   0x00006682      bd0014         lda 0x1400,x                ; load accumulator with memory
  | || ||   0x00006685      18             clc                         ; clear carry flag
  | || ||   0x00006686      69c0           adc #0xc0                   ; add memory to accumulator with carry
  | || ||   0x00006688      8d9c66         sta 0x669c                  ; store accumulator in memory
  | || ||   0x0000668b      8da166         sta 0x66a1                  ; store accumulator in memory
  | || ||   0x0000668e      bdc014         lda 0x14c0,x                ; load accumulator with memory
  | || ||   0x00006691      6900           adc #0x00                   ; add memory to accumulator with carry
  | || ||   0x00006693      8d9d66         sta 0x669d                  ; store accumulator in memory
  | || ||   0x00006696      8da266         sta 0x66a2                  ; store accumulator in memory
  | || ||   0x00006699      a000           ldy #0x00                   ; load index y with memory
  | ||.---> 0x0000669b      b9ffff         lda 0xffff,y                ; load accumulator with memory
  | |||||   0x0000669e      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
  | |||||   0x000066a0      99ffff         sta 0xffff,y                ; store accumulator in memory
  | |||||   0x000066a3      c8             iny                         ; increment index y by one
  | |||||   0x000066a4      c078           cpy #0x78                   ; compare memory and index y
  | ||`===< 0x000066a6      d0f3           bne 0x4ed108                ; branch on result not zero
  | || ||   0x000066a8      60             rts                         ; return from subroutine
  | || ||   0x000066a9      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
  | || ||   0x000066ac      293f           and #0x3f                   ; "and" memory with accumulator
  | ||,===< 0x000066ae      f001           beq 0x4ed108                ; branch on result zero
  | |||||   0x000066b0      60             rts                         ; return from subroutine
  |.--`---> 0x000066b1      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||| ||   0x000066b4      2907           and #0x07                   ; "and" memory with accumulator
  |||| ||   0x000066b6      c905           cmp #0x05                   ; compare memory and accumulator
  |`======< 0x000066b8      b0f7           bcs 0x4ed108                ; branch on carry set
  --------> 0x000066ba      8523           sta 0x23                    ; store accumulator in memory
  | || ||   0x000066bc      a900           lda #0x00                   ; load accumulator with memory
  | || ||   0x000066be      8525           sta 0x25                    ; store accumulator in memory
  --------> 0x000066c0      a5c9           lda 0xc9                    ; load accumulator with memory
  | || ||   0x000066c2      48             pha                         ; push accumulator on stack
  | || ||   0x000066c3      a5ca           lda 0xca                    ; load accumulator with memory
  | || ||   0x000066c5      48             pha                         ; push accumulator on stack
  | || ||   0x000066c6      a50a           lda 0x0a                    ; load accumulator with memory
  | || ||   0x000066c8      c919           cmp #0x19                   ; compare memory and accumulator
  | ||,===< 0x000066ca      f03f           beq 0x4ed108                ; branch on result zero
  | |||||   0x000066cc      c921           cmp #0x21                   ; compare memory and accumulator
  |,======< 0x000066ce      b03b           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000066d0      a917           lda #0x17                   ; load accumulator with memory
  |||||||   0x000066d2      85ca           sta 0xca                    ; store accumulator in memory
  |||||||   0x000066d4      a905           lda #0x05                   ; load accumulator with memory
  |||||||   0x000066d6      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x000066d8      2409           bit 0x09                    ; test bits in memory with accumulator
  ========< 0x000066da      100c           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000066dc      a20d           ldx #0x0d                   ; load index x with memory
  |||||||   0x000066de      a902           lda #0x02                   ; load accumulator with memory
  --------> 0x000066e0      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x000066e3      ca             dex                         ; decrement index x by one
  ========< 0x000066e4      d0fa           bne 0x4ed108                ; branch on result not zero
  ========< 0x000066e6      f023           beq 0x4ed108                ; branch on result zero
  --------> 0x000066e8      a91e           lda #0x1e                   ; load accumulator with memory
  |||||||   0x000066ea      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x000066ed      a523           lda 0x23                    ; load accumulator with memory
  |||||||   0x000066ef      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000066f0      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x000066f1      6523           adc 0x23                    ; add memory to accumulator with carry
  |||||||   0x000066f3      a8             tay                         ; transfer accumulator to index y
  |||||||   0x000066f4      a205           ldx #0x05                   ; load index x with memory
  --------> 0x000066f6      b91267         lda 0x6712,y                ; load accumulator with memory
  |||||||   0x000066f9      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x000066fc      c8             iny                         ; increment index y by one
  |||||||   0x000066fd      ca             dex                         ; decrement index x by one
  ========< 0x000066fe      d0f6           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006700      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x00006703      a0d7           ldy #0xd7                   ; load index y with memory
  |||||||   0x00006705      e9ee           sbc #0xee                   ; subtract memory from accumulator with borrow
  |||||||   0x00006707      e4f3           cpx 0xf3                    ; compare memory and index x
  |||||||   0x00006709      1c0068         nop 0x6800,x                ; no operation
  | || ||   0x0000670c      85ca           sta 0xca                    ; store accumulator in memory
  | || ||   0x0000670e      68             pla                         ; pull accumulator from stack
  | || ||   0x0000670f      85c9           sta 0xc9                    ; store accumulator in memory
  | ||.---> 0x00006711      60             rts                         ; return from subroutine
  | |||||   0x00006712      c3e1           dcp (0xe1,x)
  | |||||   0x00006714      eceda0         cpx 0xa0ed                  ; compare memory and index x
  | |||||   0x00006717      ceeff2         dec 0xf2ef                  ; decrement memory by one
  | |||||   0x0000671a      f4e8           nop 0xe8,x                  ; no operation
  | |||||   0x0000671c      d3ef           dcp (0xef),y
  | |||||   0x0000671e      f5f4           sbc 0xf4,x                  ; subtract memory from accumulator with borrow
  | |||||   0x00006720      e8             inx                         ; increment index x by one
  | |||||   0x00006721      c5e1           cmp 0xe1                    ; compare memory and accumulator
  | |||||   0x00006723      f3f4           isb (0xf4),y
  | |||||   0x00006725      a0d7           ldy #0xd7                   ; load index y with memory
  | |||||   0x00006727      e5f3           sbc 0xf3                    ; subtract memory from accumulator with borrow
  | |||||   0x00006729      f4a0           nop 0xa0,x                  ; no operation
  --------> 0x0000672b      48             pha                         ; push accumulator on stack
  | |||||   0x0000672c      98             tya                         ; transfer index y to accumulator
  | |||||   0x0000672d      48             pha                         ; push accumulator on stack
  | |||||   0x0000672e      8a             txa                         ; transfer index x to accumulator
  | |||||   0x0000672f      48             pha                         ; push accumulator on stack
  | |||||   0x00006730      207c66         jsr 0x667c                  ; jump to new location saving return address
  | |||||   0x00006733      a90d           lda #0x0d                   ; load accumulator with memory
  | |||||   0x00006735      201261         jsr 0x6112                  ; jump to new location saving return address
  | |||||   0x00006738      68             pla                         ; pull accumulator from stack
  | |||||   0x00006739      aa             tax                         ; transfer accumulator to index x
  | |||||   0x0000673a      68             pla                         ; pull accumulator from stack
  | |||||   0x0000673b      a8             tay                         ; transfer accumulator to index y
  | |||||   0x0000673c      68             pla                         ; pull accumulator from stack
  -.------> 0x0000673d      8d5467         sta 0x6754                  ; store accumulator in memory
  |||||||   0x00006740      8e6a67         stx 0x676a                  ; store index x in memory
  |||||||   0x00006743      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00006744      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006745      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006746      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006747      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006748      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00006749      b98010         lda 0x1080,y                ; load accumulator with memory
  ||||`===< 0x0000674c      d0c3           bne 0x4ed108                ; branch on result not zero
  |||| ||   0x0000674e      b98910         lda 0x1089,y                ; load accumulator with memory
  |||| ||   0x00006751      38             sec                         ; set carry flag
  |||| ||   0x00006752      f8             sed                         ; set decimal mode
  |||| ||   0x00006753      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
  |||| ||   0x00006755      aa             tax                         ; transfer accumulator to index x
  |||| ||   0x00006756      b98810         lda 0x1088,y                ; load accumulator with memory
  |||| ||   0x00006759      e900           sbc #0x00                   ; subtract memory from accumulator with borrow
  |||| ||   0x0000675b      d8             cld                         ; clear decimal mode
  ||||,===< 0x0000675c      9006           bcc 0x4ed108                ; branch on carry clear
  ========< 0x0000675e      d014           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006760      e000           cpx #0x00                   ; compare memory and index x
  ========< 0x00006762      d010           bne 0x4ed108                ; branch on result not zero
  ||||`---> 0x00006764      a9c4           lda #0xc4                   ; load accumulator with memory
  |||| ||   0x00006766      998310         sta 0x1083,y                ; store accumulator in memory
  |||| ||   0x00006769      a900           lda #0x00                   ; load accumulator with memory
  |||| ||   0x0000676b      c52c           cmp 0x2c                    ; compare memory and accumulator
  ||||,===< 0x0000676d      d002           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000676f      662c           ror 0x2c                    ; rotate one bit right (memory or accumulator)
  ||||`---> 0x00006771      a900           lda #0x00                   ; load accumulator with memory
  |||| ||   0x00006773      aa             tax                         ; transfer accumulator to index x
  --------> 0x00006774      998810         sta 0x1088,y                ; store accumulator in memory
  |||| ||   0x00006777      8a             txa                         ; transfer index x to accumulator
  |||| ||   0x00006778      998910         sta 0x1089,y                ; store accumulator in memory
  |||| `==< 0x0000677b      4c9e5d         jmp 0x5d9e                  ; jump to new location
  -----.--> 0x0000677e      a200           ldx #0x00                   ; load index x with memory
  ||||.---> 0x00006780      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00006781      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006782      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006783      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006784      0a             asl a                       ; shift left one bit (memory or accumulator)
  |||||||   0x00006785      a8             tay                         ; transfer accumulator to index y
  |||||||   0x00006786      b98010         lda 0x1080,y                ; load accumulator with memory
  ========< 0x00006789      d016           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000678b      b98310         lda 0x1083,y                ; load accumulator with memory
  |||||||   0x0000678e      c9c4           cmp #0xc4                   ; compare memory and accumulator
  ========< 0x00006790      f00f           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006792      8a             txa                         ; transfer index x to accumulator
  |||||||   0x00006793      48             pha                         ; push accumulator on stack
  |||||||   0x00006794      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x00006797      2907           and #0x07                   ; "and" memory with accumulator
  |||||||   0x00006799      18             clc                         ; clear carry flag
  |||||||   0x0000679a      6901           adc #0x01                   ; add memory to accumulator with carry
  |||||||   0x0000679c      202b67         jsr 0x672b                  ; jump to new location saving return address
  |||||||   0x0000679f      68             pla                         ; pull accumulator from stack
  |||||||   0x000067a0      aa             tax                         ; transfer accumulator to index x
  --------> 0x000067a1      e8             inx                         ; increment index x by one
  |||||||   0x000067a2      e006           cpx #0x06                   ; compare memory and index x
  ||||`===< 0x000067a4      90da           bcc 0x4ed108                ; branch on carry clear
  |||| ||   0x000067a6      60             rts                         ; return from subroutine
  |||| ||   0x000067a7      00             brk                         ; force break
  |||| ||   0x000067a8      00             brk                         ; force break
  |||| ||   0x000067a9      00             brk                         ; force break
  |||| ||   0x000067aa      0101           ora (0x01,x)                ; "or" memory with accumulator
  |||| ||   0x000067ac      02             hlt
  |||| ||   0x000067ad      02             hlt
  |||| ||   0x000067ae      0300           slo (0x00,x)
  --------> 0x000067b0      8eaf67         stx 0x67af                  ; store index x in memory
  |||| ||   0x000067b3      a90d           lda #0x0d                   ; load accumulator with memory
  |||| ||   0x000067b5      201261         jsr 0x6112                  ; jump to new location saving return address
  |||| ||   0x000067b8      240a           bit 0x0a                    ; test bits in memory with accumulator
  ||||,===< 0x000067ba      1008           bpl 0x4ed108                ; branch on result plus
  |||||||   0x000067bc      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||||||   0x000067bf      aa             tax                         ; transfer accumulator to index x
  ========< 0x000067c0      102a           bpl 0x4ed108                ; branch on result plus
  ========< 0x000067c2      303e           bmi 0x4ed108                ; branch on result minus
  ||||`---> 0x000067c4      20b75e         jsr 0x5eb7                  ; jump to new location saving return address
  |||| ||   0x000067c7      2907           and #0x07                   ; "and" memory with accumulator
  |||| ||   0x000067c9      a8             tay                         ; transfer accumulator to index y
  |||| ||   0x000067ca      bea767         ldx 0x67a7,y                ; load index x with memory
  ||||,===< 0x000067cd      f01d           beq 0x4ed108                ; branch on result zero
  |||||||   0x000067cf      ca             dex                         ; decrement index x by one
  ========< 0x000067d0      f030           beq 0x4ed108                ; branch on result zero
  |||||||   0x000067d2      ca             dex                         ; decrement index x by one
  ========< 0x000067d3      f056           beq 0x4ed108                ; branch on result zero
  |||||||   0x000067d5      203868         jsr 0x6838                  ; jump to new location saving return address
  |||||||   0x000067d8      c7c1           dcp 0xc1
  |||||||   0x000067da      d3a1           dcp (0xa1),y
  |||||||   0x000067dc      8d00a9         sta 0xa900                  ; store accumulator in memory
  |||||||   0x000067df      058d           ora 0x8d                    ; "or" memory with accumulator
  |||||||   0x000067e1      af6720         lax 0x2067
  |||||||   0x000067e4      0e68ce         asl 0xce68                  ; shift left one bit (memory or accumulator)
  |||||||   0x000067e7      af6710         lax 0x1067
  |||||||   0x000067ea      f8             sed                         ; set decimal mode
  |||||||   0x000067eb      60             rts                         ; return from subroutine
  ----`---> 0x000067ec      203868         jsr 0x6838                  ; jump to new location saving return address
  |||| ||   0x000067ef      c1c3           cmp (0xc3,x)                ; compare memory and accumulator
  |||| ||   0x000067f1      c9c4           cmp #0xc4                   ; compare memory and accumulator
  |||| ||   0x000067f3      a18d           lda (0x8d,x)                ; load accumulator with memory
  |||| ||   0x000067f5      00             brk                         ; force break
  |||| ||   0x000067f6      20ff63         jsr 0x63ff                  ; jump to new location saving return address
  |||| ||   0x000067f9      201a63         jsr 0x631a                  ; jump to new location saving return address
  |||| ||   0x000067fc      aeaf67         ldx 0x67af                  ; load index x with memory
  |`======< 0x000067ff      4c3d67         jmp 0x673d                  ; jump to new location
  --------> 0x00006802      203868         jsr 0x6838                  ; jump to new location saving return address
  ========< 0x00006805      d0cf           bne 0x4ed108                ; branch on result not zero
  | || ||   0x00006807      c9d3           cmp #0xd3                   ; compare memory and accumulator
  | || ||   0x00006809      cfcea1         dcp 0xa1ce
  | || ||   0x0000680c      8d00ad         sta 0xad00                  ; store accumulator in memory
  | || ||   0x0000680f      af670a         lax 0x0a67
  | || ||   0x00006812      0a             asl a                       ; shift left one bit (memory or accumulator)
  | || ||   0x00006813      0a             asl a                       ; shift left one bit (memory or accumulator)
  | || ||   0x00006814      0a             asl a                       ; shift left one bit (memory or accumulator)
  | || ||   0x00006815      a8             tay                         ; transfer accumulator to index y
  | || ||   0x00006816      b98010         lda 0x1080,y                ; load accumulator with memory
  | ||,===< 0x00006819      d00f           bne 0x4ed108                ; branch on result not zero
  | |||||   0x0000681b      b98310         lda 0x1083,y                ; load accumulator with memory
  | |||||   0x0000681e      c9c4           cmp #0xc4                   ; compare memory and accumulator
  |,======< 0x00006820      f008           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006822      a9d0           lda #0xd0                   ; load accumulator with memory
  |||||||   0x00006824      998310         sta 0x1083,y                ; store accumulator in memory
  ||||||`=< 0x00006827      4c9e5d         jmp 0x5d9e                  ; jump to new location
  |`--`---> 0x0000682a      60             rts                         ; return from subroutine
  --------> 0x0000682b      203868         jsr 0x6838                  ; jump to new location saving return address
  | || |    0x0000682e      c2cf           nop #0xcf                   ; no operation
  | || |    0x00006830      cfcda1         dcp 0xa1cd
  | || |    0x00006833      8d004c         sta 0x4c00                  ; store accumulator in memory
  | ||      0x00006836      7e67
  
0x4c00:
            0x00006838      68             pla                         ; pull accumulator from stack
            0x00006839      8d4968         sta 0x6849                  ; store accumulator in memory
            0x0000683c      68             pla                         ; pull accumulator from stack
            0x0000683d      8d4a68         sta 0x684a                  ; store accumulator in memory
        .-> 0x00006840      ee4968         inc 0x6849                  ; increment memory by one
       ,==< 0x00006843      d003           bne 0x4b4108                ; branch on result not zero
       ||   0x00006845      ee4a68         inc 0x684a                  ; increment memory by one
       `--> 0x00006848      adffff         lda 0xffff       ; value can be changed
       ,==< 0x0000684b      f006           beq 0x4b4108                ; branch on result zero
       ||   0x0000684d      20595a         jsr 0x5a59                  ; jump to new location saving return address
       |`=< 0x00006850      4c4068         jmp 0x6840                  ; jump to new location
       `--> 0x00006853      ad4a68         lda 0x684a                  ; load accumulator with memory
            0x00006856      48             pha                         ; push accumulator on stack
            0x00006857      ad4968         lda 0x6849                  ; load accumulator with memory
            0x0000685a      48             pha                         ; push accumulator on stack
            0x0000685b      60             rts                         ; return from subroutine
  
  --------> 0x0000685c      a9ba           lda #0xba                   ; load accumulator with memory
    ||      0x0000685e      20595a         jsr 0x5a59                  ; jump to new location saving return address
    ||      0x00006861      a000           ldy #0x00                   ; load index y with memory
  ..--...-> 0x00006863      eeae4c         inc 0x4cae                  ; increment memory by one
  |||||||   0x00006866      20b05b         jsr 0x5bb0                  ; jump to new location saving return address
  |||||||   0x00006869      ceae4c         dec 0x4cae                  ; decrement memory by one
  |||||||   0x0000686c      0980           ora #0x80                   ; "or" memory with accumulator
  |||||||   0x0000686e      c98d           cmp #0x8d                   ; compare memory and accumulator
  ========< 0x00006870      f041           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006872      c985           cmp #0x85                   ; compare memory and accumulator
  ========< 0x00006874      f04b           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006876      c000           cpy #0x00                   ; compare memory and index y
  ========< 0x00006878      f01c           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000687a      c988           cmp #0x88                   ; compare memory and accumulator
  ========< 0x0000687c      d018           bne 0x4ed108                ; branch on result not zero
  |||||||   0x0000687e      88             dey                         ; decrement index y by one
  |||||||   0x0000687f      c6c9           dec 0xc9                    ; decrement memory by one
  |||||||   0x00006881      a5c9           lda 0xc9                    ; load accumulator with memory
  |||||||   0x00006883      c917           cmp #0x17                   ; compare memory and accumulator
  ========< 0x00006885      d006           bne 0x4ed108                ; branch on result not zero
  |||||||   0x00006887      a927           lda #0x27                   ; load accumulator with memory
  |||||||   0x00006889      85c9           sta 0xc9                    ; store accumulator in memory
  |||||||   0x0000688b      c6ca           dec 0xca                    ; decrement memory by one
  --------> 0x0000688d      a9a0           lda #0xa0                   ; load accumulator with memory
  |||||||   0x0000688f      20595a         jsr 0x5a59                  ; jump to new location saving return address
  |||||||   0x00006892      c6c9           dec 0xc9                    ; decrement memory by one
  `=======< 0x00006894      10cd           bpl 0x4ed108                ; branch on result plus
  --------> 0x00006896      c01e           cpy #0x1e                   ; compare memory and index y
   `======< 0x00006898      f0c9           beq 0x4ed108                ; branch on result zero
    |||||   0x0000689a      c9a0           cmp #0xa0                   ; compare memory and accumulator
    ||`===< 0x0000689c      90c5           bcc 0x4ed108                ; branch on carry clear
    || ||   0x0000689e      20595a         jsr 0x5a59                  ; jump to new location saving return address
    || ||   0x000068a1      998041         sta 0x4180,y                ; store accumulator in memory
    || ||   0x000068a4      c8             iny                         ; increment index y by one
    || ||   0x000068a5      a5c9           lda 0xc9                    ; load accumulator with memory
    || ||   0x000068a7      c928           cmp #0x28                   ; compare memory and accumulator
    || `==< 0x000068a9      d0b8           bne 0x4ed108                ; branch on result not zero
    ||  |   0x000068ab      a98d           lda #0x8d                   ; load accumulator with memory
    ||  |   0x000068ad      20595a         jsr 0x5a59                  ; jump to new location saving return address
    ||  `=< 0x000068b0      4c6368         jmp 0x6863                  ; jump to new location
  --------> 0x000068b3      38             sec                         ; set carry flag
    ||      0x000068b4      88             dey                         ; decrement index y by one
    ||  ,=< 0x000068b5      3009           bmi 0x4ed108                ; branch on result minus
    ||  |   0x000068b7      b98041         lda 0x4180,y                ; load accumulator with memory
    ||  |   0x000068ba      297f           and #0x7f                   ; "and" memory with accumulator
    ||  |   0x000068bc      998041         sta 0x4180,y                ; store accumulator in memory
    ||  |   0x000068bf      18             clc                         ; clear carry flag
    ||  `-> 0x000068c0      60             rts                         ; return from subroutine
  --------> 0x000068c1      38             sec                         ; set carry flag
    ||      0x000068c2      a000           ldy #0x00                   ; load index y with memory
    ||      0x000068c4      60             rts                         ; return from subroutine
  --------> 0x000068c5      a905           lda #0x05                   ; load accumulator with memory
    ||  .-> 0x000068c7      48             pha                         ; push accumulator on stack
    ||  |   0x000068c8      20ed68         jsr 0x68ed                  ; jump to new location saving return address
    ||  |   0x000068cb      ce11d0         dec 0xd011                  ; decrement memory by one
    ||  |   0x000068ce      20ed68         jsr 0x68ed                  ; jump to new location saving return address
    ||  |   0x000068d1      ce11d0         dec 0xd011                  ; decrement memory by one
    ||  |   0x000068d4      ce11d0         dec 0xd011                  ; decrement memory by one
    ||  |   0x000068d7      20ed68         jsr 0x68ed                  ; jump to new location saving return address
    ||  |   0x000068da      ee11d0         inc 0xd011                  ; increment memory by one
    ||  |   0x000068dd      20ed68         jsr 0x68ed                  ; jump to new location saving return address
    ||  |   0x000068e0      ee11d0         inc 0xd011                  ; increment memory by one
    ||  |   0x000068e3      ee11d0         inc 0xd011                  ; increment memory by one
    ||  |   0x000068e6      68             pla                         ; pull accumulator from stack
    ||  |   0x000068e7      38             sec                         ; set carry flag
    ||  |   0x000068e8      e901           sbc #0x01                   ; subtract memory from accumulator with borrow
    ||  `=< 0x000068ea      d0db           bne 0x4ed108                ; branch on result not zero
    ||      0x000068ec      60             rts                         ; return from subroutine
    ||      0x000068ed      a2af           ldx #0xaf                   ; load index x with memory
    ||  .-> 0x000068ef      a02c           ldy #0x2c                   ; load index y with memory
    || .--> 0x000068f1      88             dey                         ; decrement index y by one
    || `==< 0x000068f2      d0fd           bne 0x4ed108                ; branch on result not zero
    ||  |   0x000068f4      20ea5e         jsr 0x5eea                  ; jump to new location saving return address
    ||  |   0x000068f7      c9b0           cmp #0xb0                   ; compare memory and accumulator
    || ,==< 0x000068f9      9007           bcc 0x4ed108                ; branch on carry clear
    || ||   0x000068fb      2478           bit 0x78                    ; test bits in memory with accumulator
    ||,===< 0x000068fd      1003           bpl 0x4ed108                ; branch on result plus
    |||||   0x000068ff      20f06b         jsr 0x6bf0                  ; jump to new location saving return address
    ||``--> 0x00006902      ca             dex                         ; decrement index x by one
    ||  `=< 0x00006903      d0ea           bne 0x4ed108                ; branch on result not zero
    ||  .-> 0x00006905      ad12d0         lda 0xd012                  ; load accumulator with memory
    ||  |   0x00006908      c9fb           cmp #0xfb                   ; compare memory and accumulator
    || ,==< 0x0000690a      b004           bcs 0x4ed108                ; branch on carry set
    || ||   0x0000690c      c932           cmp #0x32                   ; compare memory and accumulator
    || |`=< 0x0000690e      b0f5           bcs 0x4ed108                ; branch on carry set
    || `--> 0x00006910      60             rts                         ; return from subroutine
  --------> 0x00006911      a21f           ldx #0x1f                   ; load index x with memory
    ||      0x00006913      a01f           ldy #0x1f                   ; load index y with memory
    ||      0x00006915      8482           sty 0x82                    ; store index y in memory
    ||      0x00006917      84b4           sty 0xb4                    ; store index y in memory
    ||      0x00006919      a900           lda #0x00                   ; load accumulator with memory
    || .--> 0x0000691b      9d407e         sta 0x7e40,x                ; store accumulator in memory
    || ||   0x0000691e      9d607e         sta 0x7e60,x                ; store accumulator in memory
    || ||   0x00006921      9d207e         sta 0x7e20,x                ; store accumulator in memory
    || ||   0x00006924      ca             dex                         ; decrement index x by one
    || `==< 0x00006925      10f4           bpl 0x4ed108                ; branch on result plus
    ||..--> 0x00006927      a682           ldx 0x82                    ; load index x with memory
    |||||   0x00006929      20af51         jsr 0x51af                  ; jump to new location saving return address
    |||||   0x0000692c      a20c           ldx #0x0c                   ; load index x with memory
   .------> 0x0000692e      dd6769         cmp 0x6967,x                ; compare memory and accumulator
  ,=======< 0x00006931      f007           beq 0x4ed108                ; branch on result zero
  |||||||   0x00006933      ca             dex                         ; decrement index x by one
  |`======< 0x00006934      10f8           bpl 0x4ed108                ; branch on result plus
  | |||||   0x00006936      a900           lda #0x00                   ; load accumulator with memory
  |,======< 0x00006938      f020           beq 0x4ed108                ; branch on result zero
  `-------> 0x0000693a      c91b           cmp #0x1b                   ; compare memory and accumulator
  ,=======< 0x0000693c      f004           beq 0x4ed108                ; branch on result zero
  |||||||   0x0000693e      c92a           cmp #0x2a                   ; compare memory and accumulator
  ========< 0x00006940      d004           bne 0x4ed108                ; branch on result not zero
  `-------> 0x00006942      a9ff           lda #0xff                   ; load accumulator with memory
  ,=======< 0x00006944      d002           bne 0x4ed108                ; branch on result not zero
  --------> 0x00006946      a901           lda #0x01                   ; load accumulator with memory
  `-------> 0x00006948      a6b4           ldx 0xb4                    ; load index x with memory
   ||||||   0x0000694a      9d207e         sta 0x7e20,x                ; store accumulator in memory
   ||||||   0x0000694d      98             tya                         ; transfer index y to accumulator
   ||||||   0x0000694e      9d407e         sta 0x7e40,x                ; store accumulator in memory
   ||||||   0x00006951      a582           lda 0x82                    ; load accumulator with memory
   ||||||   0x00006953      9d607e         sta 0x7e60,x                ; store accumulator in memory
   ||||||   0x00006956      c6b4           dec 0xb4                    ; decrement memory by one
  ,=======< 0x00006958      3009           bmi 0x4ed108                ; branch on result minus
  |`------> 0x0000695a      88             dey                         ; decrement index y by one
  | ||`===< 0x0000695b      10ca           bpl 0x4ed108                ; branch on result plus
  | || ||   0x0000695d      a01f           ldy #0x1f                   ; load index y with memory
  | || ||   0x0000695f      c682           dec 0x82                    ; decrement memory by one
  | || `==< 0x00006961      10c4           bpl 0x4ed108                ; branch on result plus
  `-------> 0x00006963      20c869         jsr 0x69c8                  ; jump to new location saving return address
    ||  |   0x00006966      60             rts                         ; return from subroutine
    ||  `=< 0x00006967      b0b1           bcs 0x4ed108                ; branch on carry set
    ||      0x00006969      b2             hlt
    ||      0x0000696a      b3bc           lax (0xbc),y
    ||      0x0000696c      bdbebf         lda 0xbfbe,x                ; load accumulator with memory
    ||      0x0000696f      1bdc2a         slo 0x2adc,y
    ||      0x00006972      11de           ora (0xde),y                ; "or" memory with accumulator
  --------> 0x00006974      a50e           lda 0x0e                    ; load accumulator with memory
    ||      0x00006976      c932           cmp #0x32                   ; compare memory and accumulator
    ||  ,=< 0x00006978      b011           bcs 0x4ed108                ; branch on carry set
    ||  |   0x0000697a      e612           inc 0x12                    ; increment memory by one
    ||  |   0x0000697c      a21f           ldx #0x1f                   ; load index x with memory
    ||  |   0x0000697e      86b4           stx 0xb4                    ; store index x in memory
    || .--> 0x00006980      a6b4           ldx 0xb4                    ; load index x with memory
    || ||   0x00006982      bd207e         lda 0x7e20,x                ; load accumulator with memory
    ||,===< 0x00006985      3005           bmi 0x4ed108                ; branch on result minus
  ..------> 0x00006987      c6b4           dec 0xb4                    ; decrement memory by one
  |||||`==< 0x00006989      10f5           bpl 0x4ed108                ; branch on result plus
  ||||| `-> 0x0000698b      60             rts                         ; return from subroutine
  ||||`---> 0x0000698c      bd407e         lda 0x7e40,x                ; load accumulator with memory
  ||||      0x0000698f      85fe           sta 0xfe                    ; store accumulator in memory
  ||||      0x00006991      bd607e         lda 0x7e60,x                ; load accumulator with memory
  ||||      0x00006994      85ff           sta 0xff                    ; store accumulator in memory
  ||||      0x00006996      a512           lda 0x12                    ; load accumulator with memory
  ||||      0x00006998      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||||      0x00006999      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||||      0x0000699a      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||||      0x0000699b      0a             asl a                       ; shift left one bit (memory or accumulator)
  ||||      0x0000699c      85b5           sta 0xb5                    ; store accumulator in memory
  ||||      0x0000699e      a93f           lda #0x3f                   ; load accumulator with memory
  ||||      0x000069a0      85fa           sta 0xfa                    ; store accumulator in memory
  |||| ..-> 0x000069a2      a6b5           ldx 0xb5                    ; load index x with memory
  |||| ||   0x000069a4      bdbf6a         lda 0x6abf,x                ; load accumulator with memory
  |||| ||   0x000069a7      20516a         jsr 0x6a51                  ; jump to new location saving return address
  |||| ||   0x000069aa      a5fa           lda 0xfa                    ; load accumulator with memory
  |||| ||   0x000069ac      c930           cmp #0x30                   ; compare memory and accumulator
  ||||,===< 0x000069ae      b00c           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000069b0      20806a         jsr 0x6a80                  ; jump to new location saving return address
  |||||||   0x000069b3      e6b5           inc 0xb5                    ; increment memory by one
  |||||||   0x000069b5      c6fa           dec 0xfa                    ; decrement memory by one
  |||||`==< 0x000069b7      10e9           bpl 0x4ed108                ; branch on result plus
  `=======< 0x000069b9      4c8769         jmp 0x6987                  ; jump to new location
   |||`---> 0x000069bc      208d6a         jsr 0x6a8d                  ; jump to new location saving return address
   |||  |   0x000069bf      e6b5           inc 0xb5                    ; increment memory by one
   |||  |   0x000069c1      c6fa           dec 0xfa                    ; decrement memory by one
   |||  `=< 0x000069c3      10dd           bpl 0x4ed108                ; branch on result plus
   `======< 0x000069c5      4c8769         jmp 0x6987                  ; jump to new location
  --------> 0x000069c8      20b46a         jsr 0x6ab4                  ; jump to new location saving return address
    ||      0x000069cb      a91f           lda #0x1f                   ; load accumulator with memory
    ||      0x000069cd      85b4           sta 0xb4                    ; store accumulator in memory
    ||  .-> 0x000069cf      a4b4           ldy 0xb4                    ; load index y with memory
    ||  |   0x000069d1      b9207e         lda 0x7e20,y                ; load accumulator with memory
    || ,==< 0x000069d4      f046           beq 0x4ed108                ; branch on result zero
    ||,===< 0x000069d6      3044           bmi 0x4ed108                ; branch on result minus
    |||||   0x000069d8      b9407e         lda 0x7e40,y                ; load accumulator with memory
    |||||   0x000069db      85fe           sta 0xfe                    ; store accumulator in memory
    |||||   0x000069dd      b9607e         lda 0x7e60,y                ; load accumulator with memory
    |||||   0x000069e0      85ff           sta 0xff                    ; store accumulator in memory
    |||||   0x000069e2      a924           lda #0x24                   ; load accumulator with memory
    |||||   0x000069e4      85b6           sta 0xb6                    ; store accumulator in memory
   .------> 0x000069e6      a6b6           ldx 0xb6                    ; load index x with memory
   ||||||   0x000069e8      bdbf6b         lda 0x6bbf,x                ; load accumulator with memory
   ||||||   0x000069eb      20516a         jsr 0x6a51                  ; jump to new location saving return address
   ||||||   0x000069ee      a4ab           ldy 0xab                    ; load index y with memory
   ||||||   0x000069f0      c020           cpy #0x20                   ; compare memory and index y
  ,=======< 0x000069f2      b024           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000069f4      8483           sty 0x83                    ; store index y in memory
  |||||||   0x000069f6      a682           ldx 0x82                    ; load index x with memory
  |||||||   0x000069f8      e020           cpx #0x20                   ; compare memory and index x
  ========< 0x000069fa      b01c           bcs 0x4ed108                ; branch on carry set
  |||||||   0x000069fc      8684           stx 0x84                    ; store index x in memory
  |||||||   0x000069fe      20af51         jsr 0x51af                  ; jump to new location saving return address
  |||||||   0x00006a01      202751         jsr 0x5127                  ; jump to new location saving return address
  ========< 0x00006a04      3012           bmi 0x4ed108                ; branch on result minus
  --------> 0x00006a06      20216a         jsr 0x6a21                  ; jump to new location saving return address
  ========< 0x00006a09      f0fb           beq 0x4ed108                ; branch on result zero
  ========< 0x00006a0b      300b           bmi 0x4ed108                ; branch on result minus
  |||||||   0x00006a0d      a583           lda 0x83                    ; load accumulator with memory
  |||||||   0x00006a0f      85ab           sta 0xab                    ; store accumulator in memory
  |||||||   0x00006a11      a584           lda 0x84                    ; load accumulator with memory
  |||||||   0x00006a13      8582           sta 0x82                    ; store accumulator in memory
  |||||||   0x00006a15      20806a         jsr 0x6a80                  ; jump to new location saving return address
  `-------> 0x00006a18      c6b6           dec 0xb6                    ; decrement memory by one
   `======< 0x00006a1a      10ca           bpl 0x4ed108                ; branch on result plus
    ||``--> 0x00006a1c      c6b4           dec 0xb4                    ; decrement memory by one
    ||  `=< 0x00006a1e      10af           bpl 0x4ed108                ; branch on result plus
    ||      0x00006a20      60             rts                         ; return from subroutine
    ||      0x00006a21      38             sec                         ; set carry flag
    ||      0x00006a22      a5fe           lda 0xfe                    ; load accumulator with memory
    ||      0x00006a24      e5ab           sbc 0xab                    ; subtract memory from accumulator with borrow
    ||      0x00006a26      204863         jsr 0x6348                  ; jump to new location saving return address
    ||      0x00006a29      18             clc                         ; clear carry flag
    ||      0x00006a2a      65ab           adc 0xab                    ; add memory to accumulator with carry
    ||      0x00006a2c      85ab           sta 0xab                    ; store accumulator in memory
    ||      0x00006a2e      38             sec                         ; set carry flag
    ||      0x00006a2f      a5ff           lda 0xff                    ; load accumulator with memory
    ||      0x00006a31      e582           sbc 0x82                    ; subtract memory from accumulator with borrow
    ||      0x00006a33      204863         jsr 0x6348                  ; jump to new location saving return address
    ||      0x00006a36      18             clc                         ; clear carry flag
    ||      0x00006a37      6582           adc 0x82                    ; add memory to accumulator with carry
    ||      0x00006a39      8582           sta 0x82                    ; store accumulator in memory
    ||      0x00006a3b      a4ab           ldy 0xab                    ; load index y with memory
    ||      0x00006a3d      a682           ldx 0x82                    ; load index x with memory
    ||      0x00006a3f      c4fe           cpy 0xfe                    ; compare memory and index y
    ||  ,=< 0x00006a41      d007           bne 0x4ed108                ; branch on result not zero
    ||  |   0x00006a43      e4ff           cpx 0xff                    ; compare memory and index x
    || ,==< 0x00006a45      d003           bne 0x4ed108                ; branch on result not zero
    || ||   0x00006a47      a901           lda #0x01                   ; load accumulator with memory
    || ||   0x00006a49      60             rts                         ; return from subroutine
    || ``-> 0x00006a4a      20af51         jsr 0x51af                  ; jump to new location saving return address
    ||      0x00006a4d      202751         jsr 0x5127                  ; jump to new location saving return address
    ||      0x00006a50      60             rts                         ; return from subroutine
    ||      0x00006a51      48             pha                         ; push accumulator on stack
    ||      0x00006a52      290f           and #0x0f                   ; "and" memory with accumulator
    ||      0x00006a54      aa             tax                         ; transfer accumulator to index x
    ||      0x00006a55      18             clc                         ; clear carry flag
    ||      0x00006a56      bda46a         lda 0x6aa4,x                ; load accumulator with memory
    ||      0x00006a59      65ff           adc 0xff                    ; add memory to accumulator with carry
    ||      0x00006a5b      8582           sta 0x82                    ; store accumulator in memory
    ||      0x00006a5d      68             pla                         ; pull accumulator from stack
    ||      0x00006a5e      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a5f      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a60      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a61      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a62      aa             tax                         ; transfer accumulator to index x
    ||      0x00006a63      18             clc                         ; clear carry flag
    ||      0x00006a64      bda46a         lda 0x6aa4,x                ; load accumulator with memory
    ||      0x00006a67      65fe           adc 0xfe                    ; add memory to accumulator with carry
    ||      0x00006a69      85ab           sta 0xab                    ; store accumulator in memory
    ||      0x00006a6b      60             rts                         ; return from subroutine
    ||      0x00006a6c      a582           lda 0x82                    ; load accumulator with memory
    ||      0x00006a6e      0a             asl a                       ; shift left one bit (memory or accumulator)
    ||      0x00006a6f      0a             asl a                       ; shift left one bit (memory or accumulator)
    ||      0x00006a70      85be           sta 0xbe                    ; store accumulator in memory
    ||      0x00006a72      a5ab           lda 0xab                    ; load accumulator with memory
    ||      0x00006a74      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a75      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a76      4a             lsr a                       ; shift right one bit (memory or accumulator)
    ||      0x00006a77      05be           ora 0xbe                    ; "or" memory with accumulator
    ||      0x00006a79      a8             tay                         ; transfer accumulator to index y
    ||      0x00006a7a      a5ab           lda 0xab                    ; load accumulator with memory
    ||      0x00006a7c      2907           and #0x07                   ; "and" memory with accumulator
    ||      0x00006a7e      aa             tax                         ; transfer accumulator to index x
    ||      0x00006a7f      60             rts                         ; return from subroutine
    ||      0x00006a80      206c6a         jsr 0x6a6c                  ; jump to new location saving return address
    ||      0x00006a83      b9807e         lda 0x7e80,y                ; load accumulator with memory
    ||      0x00006a86      1d9c6a         ora 0x6a9c,x                ; "or" memory with accumulator
    ||      0x00006a89      99807e         sta 0x7e80,y                ; store accumulator in memory
    ||      0x00006a8c      60             rts                         ; return from subroutine
    ||      0x00006a8d      206c6a         jsr 0x6a6c                  ; jump to new location saving return address
    ||      0x00006a90      bd9c6a         lda 0x6a9c,x                ; load accumulator with memory
    ||      0x00006a93      49ff           eor #0xff                   ; "exclusive-or" memory with accumulator
    ||      0x00006a95      39807e         and 0x7e80,y                ; "and" memory with accumulator
    ||      0x00006a98      99807e         sta 0x7e80,y                ; store accumulator in memory
    ||      0x00006a9b      60             rts                         ; return from subroutine
    ||      0x00006a9c      0102           ora (0x02,x)                ; "or" memory with accumulator
    ||      0x00006a9e      0408           nop 0x08                    ; no operation
    ||  ,=< 0x00006aa0      1020           bpl 0x4ed108                ; branch on result plus
    ||  |   0x00006aa2      40             rti                         ; return from interrupt
    ||  |   0x00006aa3      8000           nop #0x00                   ; no operation
    ||  |   0x00006aa5      0102           ora (0x02,x)                ; "or" memory with accumulator
    ||  |   0x00006aa7      0304           slo (0x04,x)
    ||  |   0x00006aa9      0506           ora 0x06                    ; "or" memory with accumulator
    ||  |   0x00006aab      07f8           slo 0xf8
    ||  |   0x00006aad      f9fafb         sbc 0xfbfa,y                ; subtract memory from accumulator with borrow
    ||  |   0x00006ab0      fcfdfe         nop 0xfefd,x                ; no operation
    ||  |   0x00006ab3      ffa07f         isb 0x7fa0,x
    ||  |   0x00006ab6      a900           lda #0x00                   ; load accumulator with memory
    || .--> 0x00006ab8      99807e         sta 0x7e80,y                ; store accumulator in memory
    || ||   0x00006abb      88             dey                         ; decrement index y by one
    || `==< 0x00006abc      10fa           bpl 0x4ed108                ; branch on result plus
    ||  |   0x00006abe      60             rts                         ; return from subroutine
    ||  |   0x00006abf      0f0e0d         slo 0x0d0e
    ||  `-> 0x00006ac2      fc0c1c         nop 0x1c0c,x                ; no operation
    ||      0x00006ac5      fb0b1b         isb 0x1b0b,y
    ||      0x00006ac8      fa             nop                         ; no operation
    ||      0x00006ac9      0a             asl a                       ; shift left one bit (memory or accumulator)
    ||      0x00006aca      1a             nop                         ; no operation
    ||      0x00006acb      f90919         sbc 0x1909,y                ; subtract memory from accumulator with borrow
    ||      0x00006ace      00             brk                         ; force break
    ||      0x00006acf      1e1d2d         asl 0x2d1d,x                ; shift left one bit (memory or accumulator)
    ||      0x00006ad2      2c2b3b         bit 0x3b2b                  ; test bits in memory with accumulator
    ||      0x00006ad5      2a             rol a                       ; rotate one bit left (memory or accumulator)
    ||      0x00006ad6      3a             nop                         ; no operation
    ||      0x00006ad7      2900           and #0x00                   ; "and" memory with accumulator
    ||      0x00006ad9      00             brk                         ; force break
    ||      0x00006ada      00             brk                         ; force break
    ||      0x00006adb      00             brk                         ; force break
    ||      0x00006adc      00             brk                         ; force break
    ||      0x00006add      00             brk                         ; force break
    ||      0x00006ade      00             brk                         ; force break
    ||      0x00006adf      1f2e3d         slo 0x3d2e,x
    ||      0x00006ae2      4d3c4c         eor 0x4c3c                  ; "exclusive-or" memory with accumulator
    ||  |   0x00006ae5      5c6c4b         nop 0x4b6c,x                ; no operation
    ||  |   0x00006ae8      5b4a00         sre 0x004a,y
    ||  |   0x00006aeb      00             brk                         ; force break
    ||  |   0x00006aec      00             brk                         ; force break
    ||  |   0x00006aed      00             brk                         ; force break
    ||  |   0x00006aee      00             brk                         ; force break
    ||  |   0x00006aef      2f3f3e         rla 0x3e3f
    ||  |   0x00006af2      4e5e6e         lsr 0x6e5e                  ; shift right one bit (memory or accumulator)
    ||  |   0x00006af5      7e5d6d         ror 0x6d5d,x                ; rotate one bit right (memory or accumulator)
    ||  |   0x00006af8      00             brk                         ; force break
    ||  |   0x00006af9      00             brk                         ; force break
    ||  |   0x00006afa      00             brk                         ; force break
    ||  |   0x00006afb      00             brk                         ; force break
    ||  |   0x00006afc      00             brk                         ; force break
    ||  |   0x00006afd      00             brk                         ; force break
    ||  |   0x00006afe      00             brk                         ; force break
    || ,==< 0x00006aff      1020           bpl 0x4ed108                ; branch on result plus
    ||,===< 0x00006b01      3040           bmi 0x4ed108                ; branch on result minus
   ,======< 0x00006b03      5060           bvc 0x4ed108                ; branch on overflow clear
  ,=======< 0x00006b05      704f           bvs 0x4ed108                ; branch on overflow set
  |||||||   0x00006b07      5f6f7f         sre 0x7f6f,x
  |||||||   0x00006b0a      4151           eor (0x51,x)                ; "exclusive-or" memory with accumulator
  |||||||   0x00006b0c      6171           adc (0x71,x)                ; add memory to accumulator with carry
  |||||||   0x00006b0e      00             brk                         ; force break
  |||||||   0x00006b0f      2131           and (0x31,x)                ; "and" memory with accumulator
  |||||||   0x00006b11      32             hlt
  |||||||   0x00006b12      42             hlt
  |||||||   0x00006b13      52             hlt
  |||||||   0x00006b14      62             hlt
  |||||||   0x00006b15      72             hlt
  |||||||   0x00006b16      5363           sre (0x63),y
  |||||||   0x00006b18      00             brk                         ; force break
  |||||||   0x00006b19      00             brk                         ; force break
  |||||||   0x00006b1a      00             brk                         ; force break
  |||||||   0x00006b1b      00             brk                         ; force break
  |||||||   0x00006b1c      00             brk                         ; force break
  |||||||   0x00006b1d      00             brk                         ; force break
  |||||||   0x00006b1e      00             brk                         ; force break
  |||||||   0x00006b1f      1122           ora (0x22),y                ; "or" memory with accumulator
  |||||`--> 0x00006b21      3344           rla (0x44),y
  ||||| |   0x00006b23      5543           eor 0x43,x                  ; "exclusive-or" memory with accumulator
  ||||| |   0x00006b25      5464           nop 0x64,x                  ; no operation
  ||||| |   0x00006b27      3445           nop 0x45,x                  ; no operation
  ||||| |   0x00006b29      4600           lsr 0x00                    ; shift right one bit (memory or accumulator)
  ||||| |   0x00006b2b      00             brk                         ; force break
  ||||| |   0x00006b2c      00             brk                         ; force break
  ||||| |   0x00006b2d      00             brk                         ; force break
  ||||| |   0x00006b2e      00             brk                         ; force break
  ||||| |   0x00006b2f      12             hlt
  ||||| |   0x00006b30      1323           slo (0x23),y
  ||||| |   0x00006b32      2425           bit 0x25                    ; test bits in memory with accumulator
  ||||| |   0x00006b34      2627           rol 0x27                    ; rotate one bit left (memory or accumulator)
  ||||| |   0x00006b36      3536           and 0x36,x                  ; "and" memory with accumulator
  ||||| |   0x00006b38      00             brk                         ; force break
  ||||| |   0x00006b39      00             brk                         ; force break
  ||||| |   0x00006b3a      00             brk                         ; force break
  ||||| |   0x00006b3b      00             brk                         ; force break
  ||||| |   0x00006b3c      00             brk                         ; force break
  ||||| |   0x00006b3d      00             brk                         ; force break
  ||||| |   0x00006b3e      00             brk                         ; force break
  ||||| |   0x00006b3f      0102           ora (0x02,x)                ; "or" memory with accumulator
  ||||| |   0x00006b41      0304           slo (0x04,x)
  ||||`---> 0x00006b43      0506           ora 0x06                    ; "or" memory with accumulator
  ||||  |   0x00006b45      0714           slo 0x14
  ||||  |   0x00006b47      1516           ora 0x16,x                  ; "or" memory with accumulator
  ||||  |   0x00006b49      17f4           slo 0xf4,x
  ||||  |   0x00006b4b      f5f6           sbc 0xf6,x                  ; subtract memory from accumulator with borrow
  ||||  |   0x00006b4d      f700           isb 0x00,x
  ||||  |   0x00006b4f      f2             hlt
  ||||  |   0x00006b50      f3e3           isb (0xe3),y
  ||||  |   0x00006b52      e4e5           cpx 0xe5                    ; compare memory and index x
  ||||  |   0x00006b54      e6e7           inc 0xe7                    ; increment memory by one
  `-------> 0x00006b56      d5d6           cmp 0xd6,x                  ; compare memory and accumulator
   |||  |   0x00006b58      00             brk                         ; force break
   |||  |   0x00006b59      00             brk                         ; force break
   |||  |   0x00006b5a      00             brk                         ; force break
   |||  |   0x00006b5b      00             brk                         ; force break
   |||  |   0x00006b5c      00             brk                         ; force break
   |||  |   0x00006b5d      00             brk                         ; force break
   |||  |   0x00006b5e      00             brk                         ; force break
   |||  |   0x00006b5f      f1e2           sbc (0xe2),y                ; subtract memory from accumulator with borrow
   |||  |   0x00006b61      d3c4           dcp (0xc4),y
   |||  |   0x00006b63      b5d4           lda 0xd4,x                  ; load accumulator with memory
   `------> 0x00006b65      c5c6           cmp 0xc6                    ; compare memory and accumulator
    ||  |   0x00006b67      c3b4           dcp (0xb4,x)
    ||  |   0x00006b69      a400           ldy 0x00                    ; load index y with memory
    ||  |   0x00006b6b      00             brk                         ; force break
    ||  |   0x00006b6c      00             brk                         ; force break
    ||  |   0x00006b6d      00             brk                         ; force break
    ||  |   0x00006b6e      00             brk                         ; force break
    ||  |   0x00006b6f      e1d1           sbc (0xd1,x)                ; subtract memory from accumulator with borrow
    ||  |   0x00006b71      d2             hlt
    ||  |   0x00006b72      c2b2           nop #0xb2                   ; no operation
    ||  |   0x00006b74      a292           ldx #0x92                   ; load index x with memory
    ||  |   0x00006b76      b3a3           lax (0xa3),y
    ||  |   0x00006b78      00             brk                         ; force break
    ||  |   0x00006b79      00             brk                         ; force break
    ||  |   0x00006b7a      00             brk                         ; force break
    ||  |   0x00006b7b      00             brk                         ; force break
    ||  |   0x00006b7c      00             brk                         ; force break
    ||  |   0x00006b7d      00             brk                         ; force break
    ||  |   0x00006b7e      00             brk                         ; force break
    ||  |   0x00006b7f      f0e0           beq 0x4ed108                ; branch on result zero
    ||  |   0x00006b81      d0c0           bne 0x4ed108                ; branch on result not zero
    ||  |   0x00006b83      b0a0           bcs 0x4ed108                ; branch on carry set
    ||  |   0x00006b85      90cf           bcc 0x4ed108                ; branch on carry clear
    ||  |   0x00006b87      bfaf9f         lax 0x9faf,y
    ||  |   0x00006b8a      c1b1           cmp (0xb1,x)                ; compare memory and accumulator
    ||  |   0x00006b8c      a191           lda (0x91,x)                ; load accumulator with memory
    ||  |   0x00006b8e      00             brk                         ; force break
    ||  |   0x00006b8f      efdfde         isb 0xdedf
    ||  |   0x00006b92      cebeae         dec 0xaebe                  ; decrement memory by one
    ||  |   0x00006b95      9ebdad         shx 0xadbd,y
    ||  |   0x00006b98      00             brk                         ; force break
    ||  |   0x00006b99      00             brk                         ; force break
    ||  |   0x00006b9a      00             brk                         ; force break
    ||  |   0x00006b9b      00             brk                         ; force break
    ||  |   0x00006b9c      00             brk                         ; force break
    ||  |   0x00006b9d      00             brk                         ; force break
    ||  |   0x00006b9e      00             brk                         ; force break
    ||  |   0x00006b9f      ffeedd         isb 0xddee,x
    ||  |   0x00006ba2      ccbbdc         cpy 0xdcbb                  ; compare memory and index y
    ||  |   0x00006ba5      cbca           sbx 0xca
    ||  |   0x00006ba7      cdbcac         cmp 0xacbc                  ; compare memory and accumulator
    ||  |   0x00006baa      00             brk                         ; force break
    ||  |   0x00006bab      00             brk                         ; force break
    ||  |   0x00006bac      00             brk                         ; force break
    ||  |   0x00006bad      00             brk                         ; force break
    ||  |   0x00006bae      00             brk                         ; force break
    ||  |   0x00006baf      fefded         inc 0xedfd,x                ; increment memory by one
    ||  |   0x00006bb2      ecebea         cpx 0xeaeb                  ; compare memory and index x
    ||  |   0x00006bb5      e9db           sbc #0xdb                   ; subtract memory from accumulator with borrow
    ||  |   0x00006bb7      da             nop                         ; no operation
    ||  |   0x00006bb8      00             brk                         ; force break
    ||  |   0x00006bb9      00             brk                         ; force break
    ||  |   0x00006bba      00             brk                         ; force break
    ||  |   0x00006bbb      00             brk                         ; force break
    ||  |   0x00006bbc      00             brk                         ; force break
    ||  |   0x00006bbd      00             brk                         ; force break
    ||  |   0x00006bbe      00             brk                         ; force break
    ||  |   0x00006bbf      fd0d1d         sbc 0x1d0d,x                ; subtract memory from accumulator with borrow
    ||  |   0x00006bc2      eefe0e         inc 0x0efe                  ; increment memory by one
    ||  |   0x00006bc5      1e2edf         asl 0xdf2e,x                ; shift left one bit (memory or accumulator)
    ||  |   0x00006bc8      efff0f         isb 0x0fff
    ||  |   0x00006bcb      1f2f3f         slo 0x3f2f,x
    ||  |   0x00006bce      d0e0           bne 0x4ed108                ; branch on result not zero
    ||  |   0x00006bd0      f000           beq 0x4ed108                ; branch on result zero
    ||  |   0x00006bd2      1020           bpl 0x4ed108                ; branch on result plus
    ||  |   0x00006bd4      30d1           bmi 0x4ed108                ; branch on result minus
    ||  |   0x00006bd6      e1f1           sbc (0xf1,x)                ; subtract memory from accumulator with borrow
    ||  |   0x00006bd8      0111           ora (0x11,x)                ; "or" memory with accumulator
    ||  |   0x00006bda      2131           and (0x31,x)                ; "and" memory with accumulator
    ||  |   0x00006bdc      e2f2           nop #0xf2                   ; no operation
    ||  |   0x00006bde      02             hlt
    ||  |   0x00006bdf      12             hlt
    ||  |   0x00006be0      22             hlt
    ||  |   0x00006be1      f303           isb (0x03),y
            0x00006be3      13

0x4c2a: (sound effect)
            0x00006be4      a200           ldx #0x00                   ; load index x with memory
            0x00006be6      a5c8           lda 0xc8                    ; load accumulator with memory
        ,=< 0x00006be8      3003           bmi 0x4b4108                ; branch on result minus
        |   0x00006bea      86c6           stx 0xc6                    ; store index x in memory
        |   0x00006bec      60             rts                         ; return from subroutine
        `-> 0x00006bed      86d0           stx 0xd0                    ; store index x in memory
            0x00006bef      60             rts                         ; return from subroutine
0x4c9c:
            0x00006bf0      a900           lda #0x00             ; value will be changed
            0x00006bf2      4907           eor #0x07                   ; "exclusive-or" memory with accumulator
            0x00006bf4      8df16b         sta 0x6bf1                  ; store accumulator in memory
            0x00006bf7      8d18d4         sta 0xd418            ; set volume
            0x00006bfa      60             rts                         ; return from subroutine
